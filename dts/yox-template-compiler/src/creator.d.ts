import * as type from '../../yox-type/src/type';
import ExpressionNode from '../../yox-expression-compiler/src/node/Node';
import Node from './node/Node';
import Attribute from './node/Attribute';
import Directive from './node/Directive';
import Property from './node/Property';
import Each from './node/Each';
import Element from './node/Element';
import Else from './node/Else';
import ElseIf from './node/ElseIf';
import Expression from './node/Expression';
import If from './node/If';
import Import from './node/Import';
import Partial from './node/Partial';
import Spread from './node/Spread';
import Text from './node/Text';
export declare function createAttribute(name: string): Attribute;
export declare function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive;
export declare function createProperty(name: string, hint: type.hint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property;
export declare function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each;
export declare function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element;
export declare function createElse(): Else;
export declare function createElseIf(expr: ExpressionNode): ElseIf;
export declare function createExpression(expr: ExpressionNode, safe: boolean): Expression;
export declare function createIf(expr: ExpressionNode): If;
export declare function createImport(name: string): Import;
export declare function createPartial(name: string): Partial;
export declare function createSpread(expr: ExpressionNode, binding: boolean): Spread;
export declare function createText(text: string): Text;
//# sourceMappingURL=creator.d.ts.map