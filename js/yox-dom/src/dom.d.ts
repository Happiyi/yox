import { listener } from '../../yox-type/src/type';
export declare function createElement(tag: string, isSvg?: boolean): Element;
export declare function createText(text: string): Text;
export declare function createComment(text: string): Comment;
export declare function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void;
export declare function removeProp(node: HTMLElement, name: string, hint?: number): void;
export declare function attr(node: HTMLElement, name: string, value?: string): string | void;
export declare function removeAttr(node: HTMLElement, name: string): void;
export declare function before(parentNode: Node, node: Node, beforeNode: Node): void;
export declare function append(parentNode: Node, node: Node): void;
export declare function replace(parentNode: Node, node: Node, oldNode: Node): void;
export declare function remove(parentNode: Node, node: Node): void;
export declare function parent(node: Node): Node | void;
export declare function next(node: Node): Node | void;
export declare const find: (selector: string) => void | Element;
export declare function tag(node: Node): string | void;
export declare function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void;
export declare function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void;
export declare const addClass: (node: HTMLElement, className: string) => void;
export declare const removeClass: (node: HTMLElement, className: string) => void;
export declare function on(node: HTMLElement | Window | Document, type: string, listener: listener): void;
export declare function off(node: HTMLElement | Window | Document, type: string, listener: listener): void;
export declare function addSpecialEvent(type: string, hooks: SpecialEventHooks): void;
//# sourceMappingURL=dom.d.ts.map