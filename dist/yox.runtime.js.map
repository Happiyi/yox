{"version":3,"file":"yox.runtime.js","sources":["../node_modules/yox-common/src/util/env.ts","../node_modules/yox-common/src/function/isDef.ts","../node_modules/yox-common/src/util/is.ts","../node_modules/yox-common/src/function/execute.ts","../node_modules/yox-common/src/util/Event.ts","../node_modules/yox-common/src/util/array.ts","../node_modules/yox-common/src/util/string.ts","../node_modules/yox-common/src/function/toString.ts","../node_modules/yox-common/src/util/keypath.ts","../node_modules/yox-common/src/util/object.ts","../node_modules/yox-common/src/util/logger.ts","../node_modules/yox-common/src/util/Emitter.ts","../node_modules/yox-common/src/function/isNative.ts","../node_modules/yox-common/src/function/nextTick.ts","../node_modules/yox-common/src/util/NextTask.ts","../node_modules/yox-config/index.ts","../node_modules/yox-snabbdom/src/field.ts","../node_modules/yox-snabbdom/src/nativeAttr.ts","../node_modules/yox-snabbdom/src/nativeProp.ts","../node_modules/yox-snabbdom/src/directive.ts","../node_modules/yox-snabbdom/src/component.ts","../node_modules/yox-snabbdom/index.ts","../node_modules/yox-common/src/function/toNumber.ts","../node_modules/yox-expression-compiler/src/nodeType.ts","../node_modules/yox-expression-compiler/src/interpreter.ts","../node_modules/yox-template-compiler/src/nodeType.ts","../node_modules/yox-common/src/function/isUndef.ts","../node_modules/yox-common/src/function/toJSON.ts","../node_modules/yox-template-compiler/src/stringify.ts","../node_modules/yox-expression-compiler/src/executor.ts","../node_modules/yox-template-compiler/src/renderer.ts","../node_modules/yox-observer/src/Computed.ts","../node_modules/yox-observer/src/function/matchBest.ts","../node_modules/yox-observer/src/function/readValue.ts","../node_modules/yox-observer/src/function/diffRecursion.ts","../node_modules/yox-observer/src/function/diffString.ts","../node_modules/yox-observer/src/function/diffArray.ts","../node_modules/yox-observer/src/function/diffObject.ts","../node_modules/yox-observer/src/function/diffWatcher.ts","../node_modules/yox-observer/src/function/filterWatcher.ts","../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../node_modules/yox-observer/src/Observer.ts","../node_modules/yox-dom/index.ts","../node_modules/yox-common/src/function/debounce.ts","../src/config/event.ts","../src/directive/event.ts","../src/directive/model.ts","../src/directive/binding.ts","../src/Yox.ts","../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport function EMPTY_FUNCTION() {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || plain` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 dom 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from '../util/env'\n\nexport default function (target: any, defaultValue = env.EMPTY_STRING): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : defaultValue\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\nimport toString from '../function/toString'\n\nconst SEPARATOR = '.', patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: any, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  if (string.falsy(keypath)) {\n    callback(\n      keypath,\n      env.TRUE\n    )\n  }\n  else {\n    let startIndex = 0, endIndex = 0\n    while (env.TRUE) {\n      endIndex = string.indexOf(keypath, SEPARATOR, startIndex)\n      if (endIndex > 0) {\n        if (\n          callback(\n            string.slice(keypath, startIndex, endIndex),\n            env.FALSE\n          ) === env.FALSE\n        ) {\n          break\n        }\n        startIndex = endIndex + 1\n      }\n      else {\n        callback(\n          string.slice(keypath, startIndex),\n          env.TRUE\n        )\n        break\n      }\n    }\n  }\n}\n\n\nfunction formatKeypath(keypath: any): string {\n  return is.string(keypath)\n    ? keypath\n    : is.number(keypath)\n      ? toString(keypath)\n      : env.EMPTY_STRING\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: any, keypath2: any): string {\n\n  keypath1 = formatKeypath(keypath1)\n  keypath2 = formatKeypath(keypath2)\n\n  return keypath1 === env.EMPTY_STRING\n    ? keypath2\n    : keypath2 !== env.EMPTY_STRING\n      ? keypath1 + SEPARATOR + keypath2\n      : keypath1\n\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string | number): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string | number, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`绑定的事件已被全部移除`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    let channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Attribute from 'yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Property from 'yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}\n\n//\n// 旧 [ child1, child2 ]\n// 新 innerHTML\n//\n// 这种情况，要让外部先把 child1 child2 正常移除掉，再用 innerHTML 覆盖，否则指令无法销毁\n//\n// 旧 innerHTML\n// 新 [ child1, child2 ]\n//\n// 这种情况，先用 innerHTML 覆盖，再处理 child1 child2\n//\n// export default {\n//   create: createProps,\n//   update: removeProps,\n//   postpatch: createProps,\n// }\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from 'yox-type/src/vnode/VNode'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n      if (props) {\n        node.set(node.checkPropTypes(props))\n      }\n      if (slots) {\n        node.set(slots)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport API from 'yox-type/src/API'\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxOptions from 'yox-type/src/options/Yox'\n\nimport * as field from './src/field'\n\nimport * as nativeAttr from './src/nativeAttr'\nimport * as nativeProp from './src/nativeProp'\nimport * as directive from './src/directive'\nimport * as component from './src/component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions | void) {\n\n  if (!options) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`component [${vnode.tag}] is not found.`)\n    }\n    return\n  }\n\n  // 渲染同步加载的组件时，vnode.node 为空\n  // 渲染异步加载的组件时，vnode.node 不为空，因为初始化用了占位节点\n  const child = (vnode.parent || vnode.context).create(options, vnode, vnode.node),\n\n  // 组件初始化创建的元素\n  node = child.$el as Node\n\n  if (node) {\n    vnode.node = node\n  }\n  else {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`the root element of component [${vnode.tag}] is not found.`)\n    }\n  }\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Record<string, any> {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let isAsync = env.TRUE\n\n    context.component(\n      tag as string,\n      function (options: any) {\n        if (isDef(data[field.LOADING])) {\n          // 异步组件\n          if (data[field.LOADING]) {\n            // 尝试使用最新的 vnode\n            if (data[field.VNODE]) {\n              vnode = data[field.VNODE]\n              // 用完就删掉\n              delete data[field.VNODE]\n            }\n            enterVnode(\n              vnode,\n              createComponent(vnode, options)\n            )\n          }\n        }\n        // 同步组件\n        else {\n          createComponent(vnode, options)\n          isAsync = env.FALSE\n        }\n      }\n    )\n\n    if (isAsync) {\n      vnode.node = api.createComment(env.RAW_COMPONENT)\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.append(\n        node,\n        api.createText(text)\n      )\n    }\n    else if (html) {\n      api.html(node as Element, html)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= (end as number)) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.nextTick(enter, env.TRUE)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n  if (vnode.parent && vnode.parent !== vnode.context) {\n    return\n  }\n\n  const { data, children } = vnode\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement,\n        env.EMPTY_FUNCTION\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING)\n  }\n\n}\n\nexport function create(api: API, node: Node, isComment: boolean, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    isComment,\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`destroy vnode is not work without parent node.`)\n      }\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\n\nexport default function (target: any, defaultValue = 0): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n\n  '->': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i > b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i < b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  },\n  '=>': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i >= b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i <= b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds\n      ? elementChilds\n      : env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport invoke from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.LITERAL] = function (node: Literal): any {\n  return node.value\n}\n\nnodeExecutor[nodeType.IDENTIFIER] = function (node: Identifier, getter: (keypath: string, node: Keypath) => any): any {\n  return getter(node.name, node)\n}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let { props, staticKeypath } = node, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.unary[node.operator].exec(\n    execute(node.arg, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.binary[node.operator].exec(\n    execute(node.left, getter, context),\n    execute(node.right, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return node.elements.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key, index) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return invoke(\n    execute(node.callee, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Event from 'yox-common/src/util/Event'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport Keypath from 'yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from 'yox-expression-compiler/src/executor'\n\nimport * as signature from 'yox-type/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\n\nimport * as nodeType from './nodeType'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const map = target[name] || (target[name] = {})\n  map[key] = value\n}\n\nexport function render(\n  context: Yox,\n  filters: Record<string, Function>,\n  partials: Record<string, Function | void>,\n  directives: Record<string, DirectiveHooks | void>,\n  transitions: Record<string, TransitionHooks | void>,\n  template: Function\n) {\n\n  let $keypath = env.EMPTY_STRING,\n\n  $scope: Record<string, any> = { $keypath },\n\n  $stack = [$keypath, $scope],\n\n  eventScope: Record<string, any> | void,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let keypath = keypathUtil.join(stack[index], key),\n\n    scope = stack[index + 1]\n\n    node.absoluteKeypath = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    if (eventScope && object.has(eventScope, key)) {\n      return eventScope[key]\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 keypath\n    if (object.has(scope, key)) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (object.has(scope, '$item')) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope && object.has(scope, key)) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    let result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 1) {\n        index -= 2\n        return lookup(stack, index, key, node, depIgnore, defaultKeypath)\n      }\n      result = object.get(filters, key)\n      if (!result) {\n        node.absoluteKeypath = defaultKeypath\n        logger.warn(`data [${node.raw}] is not found.`)\n        return\n      }\n      result = result.value\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - 2 * ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: any, attr: Record<string, any>): any {\n\n    const { expr } = attr,\n\n    value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, attr.name),\n\n    hooks = directives[config.DIRECTIVE_BINDING]\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns: config.DIRECTIVE_BINDING,\n          name: attr.name,\n          key,\n          hooks,\n          binding: expr.absoluteKeypath,\n          hint: attr.hint,\n        }\n      )\n    }\n\n    return value\n\n  },\n\n  spreadObject = function (vnode: any, attr: Record<string, any>) {\n\n    let { expr } = attr,\n\n    value = getValue(expr, attr.binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair(vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr[env.RAW_ABSOLUTE_KEYPATH]\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath),\n        hooks = directives[config.DIRECTIVE_BINDING]\n        if (hooks) {\n          setPair(\n            vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks,\n              binding: keypathUtil.join(absoluteKeypath, '*'),\n            }\n          )\n        }\n      }\n\n    }\n    else {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n  },\n\n  addDirective = function (vnode: any, attr: Record<string, any>) {\n\n    let { ns, name, value } = attr,\n\n    key = keypathUtil.join(ns, name),\n\n    binding: string | void,\n\n    hooks: DirectiveHooks | void,\n\n    getter: signature.directiveGetter | void,\n\n    handler: signature.directiveHandler | signature.eventListener | void,\n\n    transition: TransitionHooks | void\n\n    switch (ns) {\n\n      case config.DIRECTIVE_EVENT:\n        hooks = directives[config.DIRECTIVE_EVENT]\n        handler = attr.event\n          ? createEventListener(attr.event)\n          : createMethodListener(attr.method, attr.args, $stack)\n        break\n\n      case env.RAW_TRANSITION:\n        transition = transitions[value]\n        if (transition) {\n          vnode.transition = transition\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`transition [${value}] is not found.`)\n          }\n        }\n        return\n\n      case config.DIRECTIVE_MODEL:\n        hooks = directives[config.DIRECTIVE_MODEL]\n        vnode.model = getValue(attr.expr, env.TRUE)\n        binding = attr.expr.absoluteKeypath\n        break\n\n      case config.DIRECTIVE_LAZY:\n        setPair(vnode, 'lazy', name, value)\n        return\n\n      default:\n        hooks = directives[name]\n        if (attr.method) {\n          handler = createMethodListener(attr.method, attr.args, $stack)\n        }\n        else if (attr.getter) {\n          getter = createGetter(attr.getter, $stack)\n        }\n        break\n\n    }\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns,\n          name,\n          key,\n          value,\n          binding,\n          hooks,\n          getter,\n          handler\n        }\n      )\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`directive [${key}] is not found.`)\n      }\n    }\n\n  },\n\n  createEventListener = function (type: string): signature.eventListener {\n    return function (event: Event, data?: Record<string, any>) {\n      if (event.type !== type) {\n        event = new Event(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    method: string,\n    args: Function | void,\n    stack: any[]\n  ): signature.directiveHandler {\n    return function (event?: Event, data?: Record<string, any>) {\n\n      const callee = context[method]\n\n      if (event instanceof Event) {\n\n        let result: any | void\n\n        if (args) {\n          // 给当前 scope 加上 event 和 data\n          eventScope = {\n            $event: event,\n            $data: data,\n          }\n          result = execute(callee, context, args(stack))\n          // 阅后即焚\n          eventScope = env.UNDEFINED\n        }\n        else {\n          result = execute(callee, context, data ? [event, data] : event)\n        }\n\n        if (result === env.FALSE) {\n          event.prevent().stop()\n        }\n      }\n      else {\n        execute(\n          callee,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): signature.directiveGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        lastVnode.text += text\n      }\n      else {\n        array.push(\n          vnodeList,\n          {\n            isText: env.TRUE,\n            text,\n            context,\n            keypath: $keypath,\n          }\n        )\n      }\n    }\n  },\n\n  renderElementVnode = function (\n    vnode: Record<string, any>,\n    attrs: any[] | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (attrs) {\n      array.each(\n        attrs,\n        function (attr: any) {\n\n          let { name, value } = attr\n\n          switch (attr.type) {\n\n            case nodeType.ATTRIBUTE:\n\n              if (attr.binding) {\n                value = addBinding(vnode, attr)\n              }\n\n              if (vnode.isComponent) {\n                setPair(vnode, 'props', name, value)\n              }\n              else {\n                setPair(vnode, 'nativeAttrs', name, { name, value })\n              }\n\n              break\n\n            case nodeType.PROPERTY:\n              setPair(\n                vnode,\n                'nativeProps',\n                name,\n                {\n                  name,\n                  value: attr.binding ? addBinding(vnode, attr) : value,\n                  hint: attr.hint,\n                }\n              )\n              break\n\n            case nodeType.DIRECTIVE:\n              addDirective(vnode, attr)\n              break\n\n            case nodeType.SPREAD:\n              spreadObject(vnode, attr)\n              break\n\n          }\n        }\n      )\n      // 确保有 directives 就必然有 lazy\n      if (vnode.directives && !vnode.lazy) {\n        vnode.lazy = env.EMPTY_OBJECT\n      }\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack), vnodes = context.get(name)\n\n    if (vnodes) {\n      array.each(\n        vnodes,\n        function (vnode: any) {\n          array.push(vnodeList, vnode)\n          vnode.parent = context\n        }\n      )\n    }\n    else if (defaultRender) {\n      defaultRender()\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n      return\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n        return\n      }\n    }\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`partial [${name}] is not found.`)\n    }\n  },\n\n  renderEach = function (expr: ExpressionNode, index: string | Function | void, handler?: Function) {\n\n    let eachIndex: string | void, eachHandler: Function\n\n    if (is.func(index)) {\n      eachHandler = index as Function\n      eachIndex = env.UNDEFINED\n    }\n    else {\n      eachHandler = handler as Function\n      eachIndex = index as string\n    }\n\n    const value = getValue(expr),\n\n    exprKeypath = expr[env.RAW_ABSOLUTE_KEYPATH],\n\n    eachKeypath = exprKeypath || keypathUtil.join($keypath, expr.raw),\n\n    callback = function (item: any, key: string | number) {\n\n      let lastKeypath = $keypath, lastScope = $scope, lastKeypathStack = $stack\n\n      $keypath = keypathUtil.join(eachKeypath, key)\n      $scope = {}\n      $stack = object.copy($stack)\n\n      array.push($stack, $keypath)\n      array.push($stack, $scope)\n\n      // 从下面这几句赋值可以看出\n      // scope 至少会有 '$keypath' '$item' eachIndex 等几个值\n      $scope.$keypath = $keypath\n\n      // 类似 {{#each 1 -> 10}} 这样的临时循环，需要在 scope 上加上当前项\n      // 因为通过 context.get() 无法获取数据\n      if (!exprKeypath) {\n        $scope.$item = item\n      }\n\n      if (eachIndex) {\n        $scope[eachIndex] = key\n      }\n\n      eachHandler(item, key)\n\n      $keypath = lastKeypath\n      $scope = lastScope\n      $stack = lastKeypathStack\n\n    }\n\n    if (is.array(value)) {\n      array.each(value, callback)\n    }\n    else if (is.object(value)) {\n      object.each(value, callback)\n    }\n    else if (is.func(value)) {\n      value(callback)\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, 'value')) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string | number, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      'length',\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string | number, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      'length',\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// textContent 不兼容 IE 678\ninnerText = 'textContent',\n\naddEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\nremoveEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\naddClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nremoveClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nfindElement: (selector: string) => Element | void = env.EMPTY_FUNCTION\n\nif (doc) {\n  if (isUndef(doc.body[innerText])) {\n    innerText = 'innerText'\n  }\n  if (doc.addEventListener) {\n    addEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.addEventListener(type, listener, env.FALSE)\n    }\n    removeEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.removeEventListener(type, listener, env.FALSE)\n    }\n  }\n  else {\n    addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.attachEvent(`on${type}`, listener)\n    }\n    removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.detachEvent(`on${type}`, listener)\n    }\n  }\n  if (doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      node.classList.add(className)\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      node.classList.remove(className)\n    }\n  }\n  else {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n  if (doc.querySelector) {\n    findElement = function (selector: string): Element | void {\n      const node = (doc as Document).querySelector(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n  else {\n    findElement = function (selector: string): Element | void {\n      // 去掉 #\n      if (string.codeAt(selector, 0) === 35) {\n        selector = string.slice(selector, 1)\n      }\n      const node = (doc as Document).getElementById(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 输入事件\n */\nINPUT = 'input',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  createEvent(event: any, node: HTMLElement): any {\n    return event\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string): string | void {\n    if (isDef(text)) {\n      node[innerText] = text as string\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string): string | void {\n    if (isDef(html)) {\n      node.innerHTML = html as string\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, domApi.createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = INPUT\n      listener(event)\n    })\n    addEventListener(node, INPUT, listener[INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, INPUT, listener[INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: number\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = 0\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const INPUT = 'input'\n\n/**\n * 表单控件的修改事件\n */\nexport const CHANGE = 'change'\n\n/**\n * IE 模拟输入事件的特殊事件\n */\nexport const PROPERTY_CHANGE = 'propertychange'\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\nimport * as event from '../config/event'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([event.CLICK, event.TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = event.CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as config from 'yox-config/index'\nimport api from 'yox-dom/index'\n\nimport * as event from '../config/event'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\n\nfunction getOptionValue(option: HTMLOptionElement) {\n  return isDef(option.value)\n    ? option.value\n    : option.text\n}\n\ninterface Control {\n\n  set(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  sync(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nconst syncWatcherOptions = { sync: env.TRUE },\n\ninputControl: Control = {\n  set(input: HTMLInputElement, keypath: string, context: Yox) {\n    input.value = toString(context.get(keypath))\n  },\n  sync(input: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, input.value)\n  },\n  name: 'value'\n},\n\nselectControl: Control = {\n  set(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    array.each(\n      array.toArray(select.options),\n      select.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, getOptionValue(option), env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (getOptionValue(option) == value) {\n            select.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const options = array.toArray(select.options)\n    if (select.multiple) {\n      const values = []\n      array.each(\n        options,\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              getOptionValue(option)\n            )\n          }\n        }\n      )\n      // 如果新旧值都是 []，set 没有意义\n      if (!array.falsy(values) || !array.falsy(context.get(keypath))) {\n        context.set(keypath, values)\n      }\n    }\n    else {\n      context.set(\n        keypath,\n        getOptionValue(\n          options[select.selectedIndex]\n        )\n      )\n    }\n  },\n  name: 'value'\n},\n\nradioControl: Control = {\n  set(radio: HTMLInputElement, keypath: string, context: Yox) {\n    radio.checked = radio.value === toString(context.get(keypath))\n  },\n  sync(radio: HTMLInputElement, keypath: string, context: Yox) {\n    if (radio.checked) {\n      context.set(keypath, radio.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: Control = {\n  set(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    checkbox.checked = is.array(value)\n      ? array.has(value, checkbox.value, env.FALSE)\n      : (is.boolean(value) ? value : !!value)\n  },\n  sync(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (checkbox.checked) {\n        context.append(keypath, checkbox.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, checkbox.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, checkbox.checked)\n    }\n  },\n  name: 'checked'\n},\n\ncomponentControl: Control = {\n  set(component: Yox, keypath: string, context: Yox) {\n    component.set(\n      component.$model,\n      context.get(keypath)\n    )\n  },\n  sync(component: Yox, keypath: string, context: Yox) {\n    context.set(\n      keypath,\n      component.get(component.$model)\n    )\n  },\n  name: 'value'\n},\n\nspecialControls = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n  select: selectControl,\n},\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { binding } = directive,\n\n    { context, nativeProps } = vnode,\n\n    lazy = vnode.lazy[config.DIRECTIVE_MODEL] || vnode.lazy[env.EMPTY_STRING],\n\n    set = function () {\n      if (!isSyncing) {\n        control.set(component || element, binding as string, context)\n      }\n    },\n\n    sync = function () {\n      isSyncing = env.TRUE\n      control.sync(component || element, binding as string, context)\n      isSyncing = env.FALSE\n    },\n\n    isSyncing = env.FALSE,\n\n    component: Yox,\n\n    element: HTMLElement,\n\n    control: Control,\n\n    type: string\n\n    if (lazy && lazy !== env.TRUE) {\n      sync = debounce(sync, lazy)\n    }\n\n    if (vnode.isComponent) {\n\n      component = node as Yox\n      control = componentControl\n\n      // 监听交互，修改数据\n      component.watch(component.$model, sync)\n\n    }\n    else {\n\n      element = node as HTMLElement\n      control = specialControls[element['type']] || specialControls[api.tag(element) as string]\n\n      // checkbox,radio,select 监听的是 change 事件\n      type = event.CHANGE\n\n      // 如果是输入框，则切换成 input 事件\n      if (!control) {\n        control = inputControl\n        if (lazy !== env.TRUE) {\n          type = event.INPUT\n        }\n      }\n\n      // 如果模板里没写对应的属性，则这里先设值\n      if (!nativeProps || !object.has(nativeProps, control.name)) {\n        set()\n      }\n\n      // 监听交互，修改数据\n      api.on(element, type, sync)\n\n    }\n\n    // 监听数据，修改界面\n    // 这里使用同步监听，这样才能使 isSyncing 生效\n    context.watch(binding as string, set, syncWatcherOptions)\n\n    vnode.data[directive.key] = function () {\n      if (vnode.isComponent) {\n        component.unwatch(component.$model, sync)\n      }\n      else {\n        api.off(element, type, sync)\n      }\n      context.unwatch(binding as string, set)\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\n\nimport api from 'yox-dom/index'\n\nconst directive: DirectiveHooks = {\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    const { binding } = directive\n\n    if (binding) {\n\n      const isFuzzy = keypathUtil.isFuzzy(binding),\n\n      watcher = function (newValue: any, oldValue: any, keypath: string) {\n\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          (node as Yox).set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n\n      }\n\n      vnode.context.watch(binding, watcher)\n\n      vnode.data[directive.key] = function () {\n        vnode.context.unwatch(binding, watcher)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = '1.0.0-alpha'\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[ config.HOOK_BEFORE_CREATE ], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n            }\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"el\" option 格式错误`)\n            }\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`\"${name}\" method is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[ config.HOOK_AFTER_CREATE ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (placeholder) {\n            logger.fatal('有 el 没 template 是几个意思？')\n          }\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[ config.HOOK_BEFORE_UPDATE ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[ config.HOOK_BEFORE_MOUNT ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || 'value'\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[ config.HOOK_BEFORE_DESTROY ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[ config.HOOK_AFTER_DESTROY ], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n","import * as config from 'yox-config/index'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  if (process.env.NODE_ENV === 'dev') {\n    logger.warn('hasSlot 过滤器已不建议使用')\n  }\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_FUNCTION","RAW_ABSOLUTE_KEYPATH","win","window","doc","document","EMPTY_FUNCTION","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","originalEvent","this","CustomEvent","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toArray","execute","slice","toObject","key","result","indexOf","strict","index","has","last","pop","remove","splice","falsy","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","str","start","end","is.number","env.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","is.string","replace","$0","$1","toUpperCase","trim","offset","charAt","defaultValue","SEPARATOR","patternCache","match","keypath","prefix","string.startsWith","string.falsy","startIndex","endIndex","string.indexOf","string.slice","formatKeypath","keypath1","keypath2","isFuzzy","string.has","matchFuzzy","pattern","cache","RegExp","keys","is.object","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","_i","objects","array.each","copy","deep","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","nativeConsole","console","useSource","test","env.EMPTY_FUNCTION","isDebug","env.win","debug","is.boolean","warn","msg","log","error","Error","ns","listeners","Emitter","bullet","data","filter","event","instance","_a","name","list","isComplete","object.copy","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","matchListener","createMatchListener","object.each","addListener","object.extend","array.push","ns_1","matchListener_1","parseNamespace","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","nextTasks","NextTask","task","array.unshift","nextTick","run","SLOT_DATA_PREFIX","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","bind","unbind","node_2","ref","props","slots","isComponent","checkPropTypes","refs","$refs","isPatchable","tag","createKeyToIndex","vnodes","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","create","$el","field.LOADING","component.update","directive.update","guid","createData","field.ID","createVnode","isComment","isText","children","text","html","createText","createComment","isAsync_1","component","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","removeVnodes","removeVnode","component_2","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","->","=>","ATTRIBUTE","DIRECTIVE","PROPERTY","SPREAD","JSON","stringify","array.join","nodeExecutor","getter","setPair","render","filters","partials","transitions","template","eventScope","$keypath","$scope","$stack","vnodeStack","localPartials","lookup","stack","depIgnore","defaultKeypath","keypathUtil.join","scope","absoluteKeypath","isUndef","object.has","$item","object.get","logger.warn","raw","getValue","expr","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","hooks","binding","createEventListener","Event","fire","createMethodListener","method","callee","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","array.last","lastVnode","renderElementVnode","attrs","childs","nodeType.ATTRIBUTE","nodeType.PROPERTY","nodeType.DIRECTIVE","handler","config.DIRECTIVE_EVENT","env.RAW_TRANSITION","config.DIRECTIVE_MODEL","model","config.DIRECTIVE_LAZY","addDirective","nodeType.SPREAD","env.RAW_ABSOLUTE_KEYPATH","spreadObject","lazy","array.pop","renderSlots_1","slot","renderSlot","defaultRender","renderPartial","renderImport","partial","renderEach","eachIndex","eachHandler","exprKeypath","eachKeypath","lastKeypath","lastScope","lastKeypathStack","first","staticKeypath","len","interpreter.unary","operator","arg","interpreter.binary","left","right","yes","no","elements","map","values","invoke","syncWatcherOptions","sync","asyncWatcherOptions","deps","observer","setter","unique","$2","oldValue","newValue","diff","fixed","array.falsy","dep","add","Computed","env.EMPTY_ARRAY","force","lastComputed","current","watch","unwatch","sorted","keypathUtil.match","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","immediate","nextTask","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","string.codeAt","diffWatcher","pending","diffAsync","filterWatcher","build","object.sort","once","emitter","on","formatWatcherOptions","step","toNumber","min","insert","array.remove","object.clear","env.doc","innerText","addEventListener","removeEventListener","addClass","removeClass","findElement","body","attachEvent","detachEvent","classList","className","classes","split","CHAR_WHITESPACE","querySelector","selector","getElementById","namespaces","svg","domain","specialEvents","domApi","isSvg","createElementNS","createTextNode","createEvent","setAttribute","value_1","getAttribute","removeAttribute","appendChild","oldNode","replaceChild","removeChild","nextSibling","find","nodeType","tagName","innerHTML","nativeListeners","special","nativeListener","object.falsy","delay","timer","args_1","array.toArray","arguments","locked","immediateTypes","array.toObject","debounce","el_1","getOptionValue","option","inputControl","input","componentControl","$model","specialControls","radio","checked","checkbox","removeAt","array.indexOf","select","multiple","selected","selectedIndex","values_1","element","control","isSyncing","isFuzzy_1","watcher_1","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","el","components","events","methods","watchers","extensions","$observer","addComputed","$emitter","placeholder","$parent","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","config.HOOK_AFTER_CREATE","$template","Yox","compile","snabbdom.create","prepend","plugin","install","Function","getResource","setResource","getComponentAsync","propTypes","rule","matched_1","required","actual","t","is.is","removeComputed","downward","eventData","$children","watcherOptions","$directives","$transitions","$components","$partials","$filters","templateRender.render","mergeResource","hook_1","instance_1","snabbdom.patch","model_1","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","$queue_1","$queue","replacement","formatValue","locals","globals","hasSlot","config.SLOT_DATA_PREFIX"],"mappings":"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"}