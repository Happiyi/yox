{"version":3,"file":"yox.cjs.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/function/toJSON.ts","../../../../yox-template-compiler/src/stringify.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-expression-compiler/src/executor.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/filter/hasSlot.ts","../../../src/Yox.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst SEP_DOT = '.',\n\ndotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEP_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(SEP_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + SEP_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Attribute from '../../yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Property from '../../yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from '../../yox-type/src/vnode/VNode'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, model, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      // 更新组件时，如果写了 <Component model=\"xx\"/>\n      // 必须把双向绑定的值写到 props 里，否则一旦 propTypes 加了默认值\n      // 传下去的数据就错了\n      if (isDef(model)) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model\n      }\n\n      const result = object.merge(props ? node.checkProps(props) : env.UNDEFINED, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as type from '../../yox-type/src/type'\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxOptions from '../../yox-type/src/options/Yox'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): type.data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import isDef from '../../yox-common/src/function/isDef'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(a: Node, op: string, b: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    a,\n    op,\n    b,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean | void, offset: number | void, sk: string | void): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    sk: isDef(sk) ? sk as string : name,\n  }\n}\n\nfunction createMemberInner(raw: string, props: Node[], lookup: boolean | void, offset: number, sk: string | void) {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    props,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    sk,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup: boolean | void, offset: number | void\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(op: string, a: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    op,\n    a,\n  }\n}\n\nfunction getLiteralNode(nodes: Node[], index: number): Literal | void {\n  if (nodes[index]\n    && nodes[index].type === nodeType.LITERAL\n  ) {\n    return nodes[index] as Literal\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: (Node | Identifier | Literal)[]): Node | Identifier | Member {\n\n  let { length } = nodes,\n\n  lookup: boolean | void,\n\n  offset = 0,\n\n  staticKeypath: string | void,\n\n  name = env.EMPTY_STRING,\n\n  list: (Node | Identifier | Literal)[] = [],\n\n  literal: Literal | void,\n\n  identifier: Identifier\n\n  if (length > 1) {\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n    if (nodes[0].type === nodeType.IDENTIFIER) {\n\n      identifier = nodes[0] as Identifier\n\n      name = identifier.name\n      lookup = identifier.lookup\n      staticKeypath = identifier.sk\n\n      if (identifier.offset > 0) {\n        offset += identifier.offset as number\n      }\n\n      if (name) {\n        array.push(list, identifier)\n      }\n\n      // 优化 1：计算 staticKeypath\n      //\n      // 计算 staticKeypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n      // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n      // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n      // 下面这段属于性能优化，避免在运行时反复计算 Member 的 keypath\n\n      // 优化 2：计算 offset 并智能转成 Identifier\n      //\n      // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n      for (let i = 1; i < length; i++) {\n        literal = getLiteralNode(nodes, i)\n        if (literal) {\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            continue\n          }\n          if (isDef(staticKeypath)\n            && literal.raw !== env.KEYPATH_CURRENT\n          ) {\n            staticKeypath = keypathUtil.join(staticKeypath as string, toString(literal.value))\n          }\n        }\n        else {\n          staticKeypath = env.UNDEFINED\n        }\n        array.push(list, nodes[i])\n      }\n\n      // 表示 nodes 中包含路径，并且路径节点被干掉了\n      if (list.length < length) {\n        nodes = list\n        // 剩下的节点，第一个如果是 Literal，把它转成 Identifier\n        literal = getLiteralNode(nodes, 0)\n        if (literal) {\n          name = literal.value\n          nodes[0] = createIdentifierInner(literal.raw, name, lookup, offset)\n        }\n      }\n\n    }\n\n    // 如果全是路径节点，如 ../../this，nodes 为空数组\n    // 如果剩下一个节点，则可转成标识符\n    return nodes.length < 2\n      ? createIdentifierInner(raw, name, lookup, offset, staticKeypath)\n      : createMemberInner(raw, nodes, lookup, offset, staticKeypath)\n\n  }\n\n  return nodes[0]\n\n}\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n}\n","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.RAW_MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.RAW_MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.RAW_MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'dev') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'dev') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw].value, raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'dev') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'dev') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorInfo: any | void,\n\n    lastOperator: string | void,\n\n    lastOperatorInfo: any | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorInfo = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorInfo = interpreter.binary[lastOperator])\n            && lastOperatorInfo.prec >= operatorInfo.prec\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'dev') {\n        if (operator) {\n          instance.fatal(startIndex, '表达式错误')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, ValueHolder> = {}\n\n// object.has 无法判断出 undefined，因此这里改成 ValueHolder 结构\nkeywordLiterals[env.RAW_TRUE] = { value: env.TRUE }\nkeywordLiterals[env.RAW_FALSE] = { value: env.FALSE }\nkeywordLiterals[env.RAW_NULL] = { value: env.NULL }\nkeywordLiterals[env.RAW_UNDEFINED] = { value: env.UNDEFINED }\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: type.hint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from '../../yox-config/src/config'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 表达式的静态 keypath\nSTATIC_KEYPATH = 'sk',\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && array.has(selfClosingTagNames, element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'dev') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.RAW_MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.RAW_MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child: Node, index: number) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.RAW_MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的值不能用插值或 if 语法`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[STATIC_KEYPATH]) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[STATIC_KEYPATH]) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === config.DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === config.DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    isEvent = directive.ns === config.DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === config.DIRECTIVE_CUSTOM\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    let expr: ExpressionNode | void\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch {}\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'dev') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`lazy 指令的值 [${raw}] 必须是大于 0 的数字`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (!eventPattern.test(raw) && !eventNamespacePattern.test(raw)) {\n            fatal('事件转换名称只能是 [name] 或 [name.namespace] 格式')\n          }\n          else if (currentElement\n            && currentElement.isComponent\n            && directive.name === raw\n          ) {\n            fatal('转换组件事件的名称不能相同')\n          }\n        }\n\n        if (isModel && !expr[STATIC_KEYPATH]) {\n          fatal(`${directive.ns} 指令的值格式错误: [${raw}]`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        if (!isCustom) {\n          fatal(`${directive.ns} 指令的表达式错误: [${text}]`)\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    // 变成一维数组，方便遍历\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, attrs, slot, children } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n        else if (!slot) {\n          fatal(`<template> 不写 slot 属性是几个意思？`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = config.SLOT_NAME_DEFAULT\n    }\n    // 补全 style 标签的 type\n\n    // style 如果没有 type 则加一个 type=\"text/css\"\n    // 因为低版本 IE 没这个属性，没法正常渲染样式\n\n    else {\n      let hasType = env.FALSE, hasValue = env.FALSE\n      if (attrs) {\n        array.each(\n          attrs,\n          function (attr) {\n\n            const name = attr.type === nodeType.PROPERTY\n              ? (attr as Property).name\n              : env.UNDEFINED\n\n            if (name === 'type') {\n              hasType = env.TRUE\n            }\n            else if (name === env.RAW_VALUE) {\n              hasValue = env.TRUE\n            }\n\n          }\n        )\n      }\n      if (element.isStyle && !hasType) {\n        addProperty(\n          element,\n          creator.createProperty('type', config.HINT_STRING, 'text/css')\n        )\n      }\n      // 低版本 IE 需要给 option 标签强制加 value\n      else if (tag === 'option' && !hasValue) {\n        element.isOption = env.TRUE\n      }\n    }\n\n  },\n\n  addProperty = function (element: Element, prop: Property) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      prop\n    )\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'dev') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('只能写一个 else 啊')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('不写 if 是几个意思')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(\n      breaklinePattern,\n      env.EMPTY_STRING\n    )\n\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'dev') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'dev') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name),\n              env.EMPTY_STRING\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = string.lower(name)\n\n              // <slot> 、<template> 或 svg 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag] || currentElement.isSvg) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'dev') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `each 不能写在属性的值里`\n                : `each 不能写在属性层级`\n            )\n          }\n        }\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              is.string(expr[STATIC_KEYPATH])\n                ? env.TRUE\n                : env.FALSE\n            )\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ 和 }}} 无法配对`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ 和 }} 无法配对`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (nodeStack.length) {\n        fatal('还有节点未出栈')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport toJSON from '../../yox-common/src/function/toJSON'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ATTRIBUTE_VNODE = 'g',\n\nRENDER_PROPERTY_VNODE = 'h',\n\nRENDER_LAZY_VNODE = 'i',\n\nRENDER_TRANSITION_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_PARTIAL = 'q',\n\nRENDER_IMPORT = 'r',\n\nARG_CONTEXT = 's',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ATTRIBUTE_VNODE,\n    RENDER_PROPERTY_VNODE,\n    RENDER_LAZY_VNODE,\n    RENDER_TRANSITION_VNODE,\n    RENDER_MODEL_VNODE,\n    RENDER_EVENT_METHOD_VNODE,\n    RENDER_EVENT_NAME_VNODE,\n    RENDER_DIRECTIVE_VNODE,\n    RENDER_SPREAD_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (!isDef(yes)) {\n        yes = STRING_EMPTY\n      }\n      if (!isDef(no)) {\n        no = STRING_EMPTY\n      }\n    }\n\n    if (!isDef(no)) {\n      result = `${test} && ${yes}`\n    }\n    else if (!isDef(yes)) {\n      result = `!${test} && ${no}`\n    }\n    else {\n      result = `${test}?${yes}:${no}`\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, tag, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(config.SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: type.data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          outputAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = toJSON(string.slice(tag, 1))\n  }\n  else {\n    data.tag = toJSON(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = STRING_TRUE\n  }\n\n  if (isOption) {\n    data.isOption = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, SEP_COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const { binding } = node\n  return stringifyCall(\n    RENDER_ATTRIBUTE_VNODE,\n    array.join(\n      trimArgs([\n        toJSON(node.name),\n        binding ? STRING_TRUE : env.UNDEFINED,\n        binding ? toJSON(node.expr) : env.UNDEFINED,\n        binding ? env.UNDEFINED : stringifyValue(node.value, node.expr, node.children)\n      ]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const { binding } = node\n  return stringifyCall(\n    RENDER_PROPERTY_VNODE,\n    array.join(\n      trimArgs([\n        toJSON(node.name),\n        toJSON(node.hint),\n        binding ? STRING_TRUE : env.UNDEFINED,\n        binding ? toJSON(node.expr) : env.UNDEFINED,\n        binding ? env.UNDEFINED : stringifyValue(node.value, node.expr, node.children)\n      ]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr } = node\n\n  if (ns === config.DIRECTIVE_LAZY) {\n    return stringifyCall(\n      RENDER_LAZY_VNODE,\n      array.join(\n        [toJSON(name), toJSON(value)],\n        SEP_COMMA\n      )\n    )\n  }\n\n  if (ns === env.RAW_TRANSITION) {\n    return stringifyCall(\n      RENDER_TRANSITION_VNODE,\n      toJSON(value)\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === config.DIRECTIVE_MODEL) {\n    return stringifyCall(\n      RENDER_MODEL_VNODE,\n      toJSON(expr)\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    toJSON(name),\n    toJSON(key),\n    toJSON(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === config.DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        toJSON(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_CONTEXT\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === config.DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        toJSON(expr.raw)\n      )\n    }\n    else if (ns === config.DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyExpressionArg(expr),\n            ARG_CONTEXT\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return stringifyCall(\n    renderName,\n    array.join(\n      trimArgs(args),\n      SEP_COMMA\n    )\n  )\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyCall(\n    RENDER_SPREAD_VNODE,\n    array.join(\n      trimArgs([toJSON(node.expr), node.binding ? STRING_TRUE : env.UNDEFINED]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const generate = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(\n    RENDER_EACH,\n    array.join(\n      trimArgs([\n        generate,\n        toJSON(node.from),\n        node.to ? toJSON(node.to) : env.UNDEFINED,\n        node.equal ? STRING_TRUE : env.UNDEFINED,\n        node.index ? toJSON(node.index) : env.UNDEFINED\n      ]),\n      SEP_COMMA\n    )\n  )\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name}${SEP_COMMA}${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport invoke from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\ntype Getter = (keypath: string, node: Keypath) => any\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: Getter, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let staticKeypath = node.sk, props = node.props, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      staticKeypath = env.EMPTY_STRING\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: Getter, context?: any): any {\n  return interpreter.unary[node.op].exec(\n    execute(node.a, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: Getter, context?: any): any {\n  return interpreter.binary[node.op].exec(\n    execute(node.a, getter, context),\n    execute(node.b, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: Getter, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: Getter, context?: any): any {\n  return node.nodes.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: Getter, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key: string, index: number) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: Getter, context?: any): any {\n  return invoke(\n    execute(node.name, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: Getter, context?: any): any {\n  // LITERAL 和 IDENTIFIER 避免再一次的函数调用\n  return node.type === nodeType.LITERAL\n    ? (node as Literal).value\n    : node.type === nodeType.IDENTIFIER\n      ? (getter as Getter)((node as Identifier).name, (node as Identifier))\n      : nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport Keypath from '../../yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from '../../yox-expression-compiler/src/executor'\n\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nexport function render(\n  context: Yox,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: type.data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key)\n\n    node.ak = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope != env.NULL && isDef(scope[key])) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    const result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 0) {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.debug(`Can't find [${keypath}], start looking up.`)\n        }\n        return lookup(stack, index - 1, key, node, depIgnore, defaultKeypath)\n      }\n      const holder = object.get(filters, key)\n      return holder\n        ? holder.value\n        : (node.ak = defaultKeypath, env.UNDEFINED)\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: type.data, name: string, expr: Keypath, hint?: type.hint): any {\n\n    const value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: expr.ak,\n        hint,\n      }\n    )\n\n    return value\n\n  },\n\n  createEventListener = function (type: string): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): type.getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, binding: boolean | void, expr: Keypath | void, value: string | void) {\n    if (binding) {\n      value = addBinding($vnode, name, expr as Keypath)\n    }\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: type.hint, binding: boolean | void, expr: Keypath | void, value: any | void) {\n    if (binding) {\n      value = addBinding($vnode, name, expr as Keypath, hint)\n    }\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: type.lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'dev') {\n      if (!$vnode.transition) {\n        logger.fatal(`transition [${name}] is not found.`)\n      }\n    }\n  },\n\n  renderModelVnode = function (expr: Keypath) {\n\n    $vnode.model = getValue(expr, env.TRUE)\n\n    setPair(\n      $vnode,\n      'directives',\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        binding: expr.ak,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!hooks) {\n        logger.fatal(`directive [${name}] is not found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (expr: ExpressionNode, binding?: boolean) {\n\n    const value = getValue(expr, binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair($vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr['ak']\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath)\n        setPair(\n          $vnode,\n          'directives',\n          key,\n          {\n            ns: config.DIRECTIVE_BINDING,\n            name: env.EMPTY_STRING,\n            key,\n            hooks: directives[config.DIRECTIVE_BINDING],\n            binding: keypathUtil.join(absoluteKeypath, env.RAW_WILDCARD),\n          }\n        )\n      }\n\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: type.data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'dev') {\n        if (!componentName) {\n          logger.warn(`Dynamic component [${tag}] is not found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`partial [${name}] is not found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ExpressionNode,\n    to: ExpressionNode | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = getValue(from)\n\n    if (to) {\n      let toValue = getValue(to), count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      const eachKeypath = from['ak']\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            eachKeypath\n              ? keypathUtil.join(eachKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            eachKeypath\n              ? keypathUtil.join(eachKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'dev') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as type from '../../yox-type/src/type'\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport API from '../../yox-type/src/interface/API'\nimport SpecialEventHooks from '../../yox-type/src/hooks/SpecialEvent'\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n      : (env.DOCUMENT as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (env.DOCUMENT as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (env.DOCUMENT as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      const holder = object.get(node, name)\n      if (holder) {\n        return holder.value\n      }\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value as string\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, beforeNode: Node): void {\n    parentNode.insertBefore(node, beforeNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return string.lower((node as HTMLElement).tagName)\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = text as string\n          }\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = html as string\n          }\n          node[innerHTML] = html as string\n        }\n      }\n      else {\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      return node[innerHTML]\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        const customEvent = event instanceof CustomEvent\n          ? event\n          : new CustomEvent(event.type, createEvent(event, node))\n\n        if (customEvent.type !== type) {\n          customEvent.type = type\n        }\n\n        emitter.fire(type, [customEvent])\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n\n    emitter.on(type, listener)\n  },\n\n  off(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n    if (process.env.NODE_ENV === 'dev') {\n      if (specialEvents[type]) {\n        logger.error(`Special event \"${type}\" is existed.`)\n      }\n      logger.info(`Special event \"${type}\" add success.`)\n    }\n    specialEvents[type] = hooks\n  },\n\n}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nconst directive: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive, { lazy } = vnode\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n\n      const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n      if (value === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else if (value > 0) {\n        handler = debounce(\n          handler,\n          value,\n          // 避免连续多次点击，主要用于提交表单场景\n          // 移动端的 tap 事件可自行在业务层打补丁实现\n          name === env.EVENT_CLICK || name === env.EVENT_TAP\n        )\n      }\n\n    }\n\n    if (vnode.isComponent) {\n\n      (node as Yox).on(name, handler)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(name, handler as type.listener)\n      }\n\n    }\n    else {\n\n      api.on(node as HTMLElement, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(node as HTMLElement, name, handler as type.listener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: type.lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: Yox) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n},\n\ndirective: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { context, lazy, isComponent } = vnode,\n\n    dataBinding = directive.binding as string,\n\n    lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n    set: type.watcher | void,\n\n    sync: type.watcher,\n\n    unbind: Function\n\n    if (isComponent) {\n\n      let component = node as Yox,\n\n      viewBinding = component.$model as string\n\n      set = function (newValue: any) {\n        if (set) {\n          component.set(viewBinding, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function (newValue: any) {\n          context.set(dataBinding, newValue)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        component.unwatch(viewBinding, sync)\n      }\n\n      component.watch(viewBinding, sync)\n\n    }\n    else {\n\n      let element = node as HTMLElement,\n\n      control = vnode.tag === 'select'\n        ? selectControl\n        : inputControl,\n\n      // checkbox,radio,select 监听的是 change 事件\n      eventName = env.EVENT_CHANGE\n\n      if (control === inputControl) {\n        const type = (node as HTMLInputElement).type\n        if (inputTypes[type]) {\n          control = inputTypes[type]\n        }\n        // 如果是输入框，则切换成 model 事件\n        // model 事件是个 yox-dom 实现的特殊事件\n        // 不会在输入法组合文字过程中得到触发事件\n        else if (lazyValue !== env.TRUE) {\n          eventName = env.EVENT_MODEL\n        }\n      }\n\n      set = function (newValue: any) {\n        if (set) {\n          control.set(element, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function () {\n          control.sync(element, dataBinding, context)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        api.off(element, eventName, sync as type.listener)\n      }\n\n      api.on(element, eventName, sync as type.listener)\n\n      control.set(element, vnode.model)\n\n    }\n\n    // 监听数据，修改界面\n    context.watch(dataBinding, set as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      context.unwatch(dataBinding, set as type.watcher)\n      set = env.UNDEFINED\n      unbind()\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as type from '../../../yox-type/src/type'\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nimport api from '../../../yox-dom/src/dom'\n\nconst directive: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    let binding = directive.binding as string,\n\n    isFuzzy = keypathUtil.isFuzzy(binding),\n\n    watcher: type.watcher | void = function (newValue: any, _: any, keypath: string) {\n\n      if (watcher) {\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          const component = node as Yox\n          component.set(name, component.checkProp(name, newValue))\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n      }\n\n    }\n\n    vnode.context.watch(binding, watcher as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      vnode.context.unwatch(binding, watcher as type.watcher)\n      watcher = env.UNDEFINED\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n","import isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateStringify from '../../yox-template-compiler/src/stringify'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'dev') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateStringify.stringify(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static checkProp(key: string, value: any, rule: PropRule): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      // 类型\n      const type = rule.type,\n\n      // 默认值\n      defaultValue = rule.value\n\n      // 传了数据\n      if (isDef(value)) {\n\n        if (process.env.NODE_ENV === 'dev') {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n\n            // 自定义函数判断是否匹配类型\n            // 自己打印警告信息吧\n            if (is.func(type)) {\n              (type as type.propType)(key, value)\n            }\n            else {\n\n              let matched = env.FALSE\n\n              // type: 'string'\n              if (!string.falsy(type)) {\n                matched = matchType(value, type as string)\n              }\n              // type: ['string', 'number']\n              else if (!array.falsy(type)) {\n                array.each(\n                  type as string[],\n                  function (item: string) {\n                    if (matchType(value, item)) {\n                      matched = env.TRUE\n                      return env.FALSE\n                    }\n                  }\n                )\n              }\n\n              if (!matched) {\n                logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n              }\n\n            }\n\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n        }\n\n      }\n      else {\n\n        if (process.env.NODE_ENV === 'dev') {\n          // 没传值但此项是必传项\n          if (rule.required) {\n            logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n          }\n        }\n\n        // 没传值但是配置了默认值\n        if (isDef(defaultValue)) {\n          value = type === env.RAW_FUNCTION\n            ? defaultValue\n            : is.func(defaultValue)\n              ? (defaultValue as type.propValue)()\n              : defaultValue\n        }\n\n      }\n    }\n\n    return value\n\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'dev') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源\n    const source = instance.checkProps(props || {})\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      if (root) {\n        instance.$root = root\n      }\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'dev') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'dev') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters),\n        object.merge(instance.$partials, globalPartials),\n        object.merge(instance.$directives, globalDirectives),\n        object.merge(instance.$transitions, globalTransitions)\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): type.data {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const result = object.copy(props)\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            result[key] = Yox.checkProp(key, props[key], rule)\n          }\n        )\n        return result\n      }\n    }\n    return props\n  }\n\n  checkProp(key: string, value: any): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          value = Yox.checkProp(key, value, rule)\n        }\n      }\n    }\n    return value\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","RAW_KEY","RAW_REF","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_THIS","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","KEYPATH_PARENT","KEYPATH_CURRENT","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EVENT_TAP","EVENT_CLICK","EVENT_INPUT","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","toObject","key","join","separator","falsy","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","hyphenate","lower","capitalize","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","toLowerCase","is.string","SEP_DOT","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","env.RAW_UNDEFINED","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","debug","msg","tag","log","info","warn","error","fatal","Error","nextTick","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","run","array.unshift","task","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","model","isComponent","$model","object.merge","checkProps","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","leaveVnode","slot","$vnode","component_3","directive.remove","destroy","component","transition","field.LEAVING","leave","updateChildren","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","patch","next","oldText","oldHtml","create","isRemove","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createArray","nodes","raw","nodeType.ARRAY","createBinary","op","nodeType.BINARY","createCall","nodeType.CALL","createIdentifierInner","lookup","sk","nodeType.IDENTIFIER","createMemberInner","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createObject","values","nodeType.OBJECT","createTernary","yes","no","nodeType.TERNARY","createUnary","nodeType.UNARY","getLiteralNode","createMemberIfNeeded","staticKeypath","literal","identifier","keypathUtil.join","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","creator.createArray","scanTuple","CODE_CBRACK","pick","CODE_OBRACE","scanObject","operator","scanOperator","interpreter.unary","skip","creator.createLiteral","creator.createUnary","isNumber","endCode","loop","CODE_BACKSLASH","Function","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createCall","creator.createMemberIfNeeded","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorInfo","lastOperator","lastOperatorInfo","output","scanToken","interpreter.binary","creator.createBinary","scanBinary","CODE_QUESTION","creator.createTernary","String","fromCharCode","message","env.RAW_TRUE","env.RAW_FALSE","env.RAW_NULL","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","env.RAW_KEY","env.RAW_REF","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","expr","nodeType.DIRECTIVE","createProperty","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.ELEMENT","createElse","nodeType.ELSE","createElseIf","nodeType.ELSE_IF","createExpression","safe","nodeType.EXPRESSION","isLeaf","createIf","createImport","nodeType.IMPORT","createPartial","createSpread","binding","nodeType.SPREAD","nodeType.TEXT","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","STATIC_KEYPATH","directiveSeparator","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","element","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","isModel","config.DIRECTIVE_MODEL","isLazy","config.DIRECTIVE_LAZY","isEvent","config.DIRECTIVE_EVENT","isCustom","config.DIRECTIVE_CUSTOM","exprCompiler.compile","exprNodeType.LITERAL","exprNodeType.CALL","exprNodeType.IDENTIFIER","partial","attrs","isTemplate","hasType_1","hasValue_1","env.RAW_VALUE","addProperty","creator.createProperty","config.HINT_STRING","config.SLOT_NAME_DEFAULT","isStringValueRequired","env.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","prev","stub","addTextChild","creator.createText","htmlParsers","creator.createElement","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","event","lazy","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","index_1","parts","creator.createEach","config.SYNTAX_IMPORT","creator.createImport","config.SYNTAX_PARTIAL","creator.createPartial","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","creator.createElse","config.SYNTAX_SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","JSON","stringify","isStringRequired","joinStack","collectStack","nodeStringify","RENDER_SLOT","RENDER_EACH","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_EXPRESSION_VNODE","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_PARTIAL","RENDER_IMPORT","ARG_CONTEXT","SEP_COMMA","SEP_COLON","SEP_PLUS","STRING_TRUE","STRING_FALSE","STRING_EMPTY","toJSON","CODE_RETURN","CODE_PREFIX","array.join","CODE_SUFFIX","stringifyObject","obj","fields","stringifyArray","arr","stringifyCall","arg","stringifyFunction","stringifyGroup","stringifyExpression","renderName","extra","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","map","stringifyConditionChildren","stringifyIf","renderElement","trimArgs","removable","childs","getComponentSlots","addSlot","array.falsy","config.SLOT_DATA_PREFIX","object.falsy","hasStringify","outputTag","outputChilds","outputSlots","outputAttrs","generate","nodeExecutor","getter","setPair","render","template","filters","partials","transitions","$scope","$keypath","$stack","vnodeStack","localPartials","stack","depIgnore","defaultKeypath","scope","ak","isUndef","$item","logger.debug","holder","object.get","getValue","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","hooks","createMethodListener","method","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderModelVnode","renderEventMethodVnode","handler","renderEventNameVnode","fire","renderDirectiveVnode","renderSpreadVnode","absoluteKeypath","renderElementVnode","componentName","renderSlots_1","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachHandler","lastScope","lastStack","concat","$length","fromValue","toValue","count","eachKeypath","first","len","invoke","sync","deps","observer","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","newIsString","oldIsString","env.RAW_LENGTH","newIsArray","oldIsArray","newLength","oldLength","Math","newIsObject","oldIsObject","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","diffString","diffArray","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","emitter","on","formatWatcherOptions","min","insert","array.remove","object.clear","innerText","innerHTML","findElement","selector","env.DOCUMENT","querySelector","addEventListener","removeEventListener","addClass","className","classList","removeClass","createEvent","documentElement","classes","CHAR_WHITESPACE","PROPERTY_CHANGE_1","env.EVENT_INPUT","EMITTER","propertyName","env.EVENT_CHANGE","isBoxElement_1","env.EVENT_CLICK","attachEvent","detachEvent","IEEvent_1","object.extend","currentTarget","srcElement","IEEvent","returnValue","cancelBubble","getElementById","STYLE_SHEET","COMPOSITION_START","COMPOSITION_END","domain","namespaces","svg","specialEvents","domApi","createElementNS","createTextNode","setAttribute","value_1","getAttribute","removeAttribute","beforeNode","appendChild","removeChild","nextSibling","find","nodeType","cssText","nativeListeners","special","nativeListener","customEvent","addSpecialEvent","logger.error","logger.info","delay","timer","args_1","array.toArray","env.EVENT_MODEL","locked","debounce","env.EVENT_TAP","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checkbox","dataBinding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","type_1","checkProp","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","LOADER_QUEUE","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","Yox","events","methods","watchers","extensions","addComputed","$emitter","placeholder","el","root","model_1","components","$root","$parent","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","afterCreateHook","$template","snabbdom.create","plugin","install","templateStringify.hasStringify","templateCompiler.compile","templateStringify.stringify","rule","matched_1","matchType","required","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","modelKey","modelValue","$el","$directives","$transitions","$partials","$filters","templateRender.render","afterHook_1","instance_1","$options_1","config.HOOK_BEFORE_UPDATE","snabbdom.patch","config.HOOK_AFTER_UPDATE","config.HOOK_BEFORE_MOUNT","config.HOOK_AFTER_MOUNT","propTypes","result_1","config.HOOK_BEFORE_DESTROY","snabbdom.destroy","config.HOOK_AFTER_DESTROY","toggle","increase","decrease","logger","prototype","config.HOOK_AFTER_CREATE","addEvent","loader_1","queue_1","formatValue","hasSlot"],"mappings":"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"}