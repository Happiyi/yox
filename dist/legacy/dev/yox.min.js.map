{"version":3,"file":"yox.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-common/src/function/guid.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../../../node_modules/yox-template-compiler/src/helper.ts","../../../../../node_modules/yox-template-compiler/src/creator.ts","../../../../../node_modules/yox-template-compiler/src/platform/web.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-expression-compiler/src/creator.ts","../../../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../../../node_modules/yox-expression-compiler/src/compiler.ts","../../../../../node_modules/yox-template-compiler/src/compiler.ts","../../../../../node_modules/yox-common/src/function/isUndef.ts","../../../../../node_modules/yox-common/src/util/generator.ts","../../../../../node_modules/yox-template-compiler/src/generator.ts","../../../../../node_modules/yox-expression-compiler/src/generator.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/matchBest.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  const list = splitCache.hasOwnProperty(keypath)\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(constant.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\ntype Namespace = {\n\n  // 事件名称\n  type: string\n\n  // 命名空间\n  ns?: string\n\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = constant.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === constant.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = constant.FALSE\n            }\n          }\n\n          if (result === constant.FALSE) {\n            return isComplete = constant.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | Namespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | Namespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | Namespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport guid from 'yox-common/src/function/guid'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (oldIndex !== constant.UNDEFINED) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[constant.RAW_SLOT] =\nspecialTags[constant.RAW_TEMPLATE] =\n\nspecialAttrs[constant.RAW_KEY] =\nspecialAttrs[constant.RAW_REF] =\nspecialAttrs[constant.RAW_SLOT] = constant.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: constant.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: constant.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string | void): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: constant.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: constant.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== constant.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: constant.TRUE,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: constant.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: constant.TRUE,\n    isLeaf: constant.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from 'yox-config/src/config'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[$A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return constant.TRUE\n  }\n  // <div data-name checked>\n  else {\n    return string.startsWith(name, 'data-')\n      ? constant.EMPTY_STRING\n      : name\n  }\n}\n\nexport function createElement(tagName: string) {\n\n  let isSvg = array.has(svgTagNames, tagName), isComponent = constant.FALSE\n\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (!isSvg && componentNamePattern.test(tagName)) {\n    isComponent = constant.TRUE\n  }\n\n  return creator.createElement(\n    tagName,\n    isSvg,\n    tagName === 'style',\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = constant.FALSE, hasValue = constant.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : constant.UNDEFINED\n\n        if (name === 'type') {\n          hasType = constant.TRUE\n        }\n        else if (name === constant.RAW_VALUE) {\n          hasValue = constant.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = constant.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return constant.TRUE\n  }\n}","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import toString from 'yox-common/src/function/toString'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = constant.TRUE, offset = 0\n\n  if (name === constant.KEYPATH_CURRENT\n    || name === constant.KEYPATH_PARENT\n  ) {\n    lookup = constant.FALSE\n    if (name === constant.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = constant.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个节点\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  // 第一个节点要特殊处理\n  let firstNode = nodes.shift() as Node,\n\n  // 是否向上查找\n  lookup = constant.TRUE,\n\n  // 偏移量，默认从当前 context 开始查找\n  offset = 0\n\n  // 表示传入的 nodes 至少有两个节点（弹出了一个）\n  if (nodes.length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    // 是否全是 Literal 节点\n    let isLiteral = constant.TRUE,\n\n    // 静态节点\n    staticNodes: string[] = [],\n\n    // 对于 this.a.b[c] 这样的\n    // 要还原静态部分 this.a.b 的 raw\n    // 虽然 raw 没什么大用吧，谁让我是洁癖呢\n    staticRaw = constant.EMPTY_STRING,\n\n    // 动态节点\n    dynamicNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (isLiteral) {\n          if (node.type === nodeType.LITERAL) {\n            if ((node as Literal).raw === constant.KEYPATH_PARENT) {\n              offset += 1\n              staticRaw = staticRaw\n                ? staticRaw + constant.RAW_SLASH + constant.KEYPATH_PARENT\n                : constant.KEYPATH_PARENT\n              return\n            }\n            if ((node as Literal).raw !== constant.KEYPATH_CURRENT) {\n              const value = toString((node as Literal).value)\n              array.push(\n                staticNodes,\n                value\n              )\n              if (staticRaw) {\n                staticRaw += string.endsWith(staticRaw, constant.KEYPATH_PARENT)\n                  ? constant.RAW_SLASH\n                  : constant.RAW_DOT\n              }\n              staticRaw += value\n            }\n          }\n          else {\n            isLiteral = constant.FALSE\n          }\n        }\n\n        if (!isLiteral) {\n          array.push(\n            dynamicNodes,\n            node\n          )\n        }\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 static keypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      lookup = (firstNode as Identifier).lookup\n      offset += (firstNode as Identifier).offset\n\n      let firstName = (firstNode as Identifier).name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (firstName) {\n        array.unshift(staticNodes, firstName)\n      }\n\n      // 转成 Identifier\n      firstName = array.join(staticNodes, constant.RAW_DOT)\n\n      // a.b.c\n      if (isLiteral) {\n        firstNode = createIdentifierInner(raw, firstName, lookup, offset)\n      }\n      // a[b]\n      // this.a[b]\n      else {\n\n        // 当 isLiteral 为 false 时\n        // 需要为 lead 节点创建合适的 raw\n        let firstRaw = (firstNode as Identifier).raw\n        if (staticRaw) {\n          firstRaw += (\n            firstRaw === constant.KEYPATH_PARENT\n              ? constant.RAW_SLASH\n              : constant.RAW_DOT\n          ) + staticRaw\n        }\n\n        firstNode = createMemberInner(\n          raw,\n          createIdentifierInner(firstRaw, firstName, lookup, offset),\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n    else {\n      // 例子：\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, constant.RAW_DOT),\n          constant.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // 例子：\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n","import * as constant from 'yox-common/src/util/constant'\n\nexport const unary = {\n  '+': constant.TRUE,\n  '-': constant.TRUE,\n  '~': constant.TRUE,\n  '!': constant.TRUE,\n  '!!': constant.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = constant.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? constant.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (constant.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(constant.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (constant.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = constant.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = constant.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = constant.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (constant.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (constant.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = constant.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = constant.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, constant.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, constant.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, 'The operator \"++\" is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, 'The operator \"--\" is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (constant.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = constant.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (constant.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[constant.RAW_TRUE] = constant.TRUE\nkeywordLiterals[constant.RAW_FALSE] = constant.FALSE\nkeywordLiterals[constant.RAW_NULL] = constant.NULL\nkeywordLiterals[constant.RAW_UNDEFINED] = constant.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 调用的方法\nmethodPattern = /^[_$a-z]([\\w]+)?$/,\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-$.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = constant.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = constant.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = constant.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The type of poping node is not expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = constant.MINUS_ONE,\n\n    openText = constant.EMPTY_STRING,\n\n    closeIndex = constant.MINUS_ONE,\n\n    closeText = constant.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          // 有了结束 index，这里的任务是配对开始 index\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              let startIndex = openIndex, endIndex = closeIndex\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                startIndex++\n              }\n              if (closeText) {\n                // 合并开始和结束文本，如 1<!-- {{x}}{{y}} -->2\n                // 这里要把 1 和 2 两个文本节点合并成一个\n                if (openText) {\n                  (children[openIndex] as Text).text += closeText\n                }\n                else {\n                  (children[closeIndex] as Text).text = closeText\n                  endIndex--\n                }\n              }\n\n              children.splice(startIndex, endIndex - startIndex + 1)\n\n              // 重置，再继续寻找结束 index\n              openIndex = closeIndex = constant.MINUS_ONE\n            }\n          }\n          else {\n            // 从后往前遍历\n            // 一旦发现能匹配 --> 就可以断定这是注释的结束 index\n            // 剩下的就是找开始 index\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      constant.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && setElementText(element, child.text)\n    ) {\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && !child.safe\n    ) {\n      element.html = child.expr\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = constant.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === constant.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = constant.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = constant.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = constant.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = constant.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = constant.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal('The value of lazy must be a number greater than 0.')\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          let methodName = (expr as ExpressionCall).name\n          if (methodName.type !== exprNodeType.IDENTIFIER) {\n            fatal('Invalid method name.')\n          }\n          // 函数调用调用方法，因此不能是 a.b() 的形式\n          else if (!methodPattern.test((methodName as ExpressionIdentifier).name)) {\n            fatal('Invalid method name.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(constant.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal('The value of the model must be an identifier.')\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      // 自定义指令支持错误的表达式\n      // 反正是自定义的规则，爱怎么写就怎么写\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = constant.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (constant.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = constant.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === constant.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === constant.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === constant.RAW_NAME || name === constant.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === constant.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === constant.RAW_SLOT && attr.name === constant.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = constant.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        // 这里不能写 currentElement && !currentAttribute，举个例子\n        //\n        // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n        //\n        // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n        if (currentElement && currentBranch.type === nodeType.ELEMENT) {\n\n          // 属性层级不能使用危险插值\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          // node 没法转型，一堆可能的类型怎么转啊...\n          array.push(\n            currentElement.attrs || (currentElement.attrs = []),\n            node as any\n          )\n\n        }\n        else {\n          const children = currentBranch.children || (currentBranch.children = []),\n          lastChild = array.last(children)\n          // 连续添加文本节点，则直接合并\n          if (lastChild\n            && lastChild.type === nodeType.TEXT\n            && node.type === nodeType.TEXT\n          ) {\n            (lastChild as Text).text += (node as Text).text\n            return\n          }\n          else {\n\n            if (process.env.NODE_ENV === 'development') {\n              if (type === nodeType.EXPRESSION\n                && !(node as Expression).safe\n              ) {\n                // 前面不能有别的 child，危险插值必须独占父元素\n                if (lastChild) {\n                  fatal('The dangerous interpolation must be the only child of a HTML element.')\n                }\n                // 危险插值的父节点必须是 html element\n                else if (currentBranch.type !== nodeType.ELEMENT\n                  || (currentBranch as Element).isComponent\n                  || helper.specialTags[(currentBranch as Element).tag]\n                ) {\n                  fatal('The dangerous interpolation must be the only child of a HTML element.')\n                }\n              }\n              // 后面不能有别的 child，危险插值必须独占父元素\n              else if (lastChild\n                && lastChild.type === nodeType.EXPRESSION\n                && !(lastChild as Expression).safe\n              ) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n            }\n\n            array.push(children, node)\n          }\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (type === nodeType.EXPRESSION\n            && !(node as Expression).safe\n          ) {\n            fatal('The dangerous interpolation must be under a HTML element.')\n          }\n        }\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = constant.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = constant.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, constant.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === constant.RAW_SLASH) {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === constant.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            const node = createElement(tag)\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === constant.RAW_SLASH) {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = constant.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === constant.RAW_TRANSITION) {\n            node = creator.createDirective(\n              constant.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(event).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_EVENT,\n              diectiveModifier\n            )\n            // on-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid event namespace.')\n              }\n            }\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : constant.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(custom).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_CUSTOM,\n              diectiveModifier\n            )\n            // o-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid directive modifier.')\n              }\n            }\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(constant.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = constant.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, constant.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, constant.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, constant.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = terms[1] ? string.trim(terms[1]) : constant.UNDEFINED,\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                constant.UNDEFINED,\n                constant.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(\n            expr,\n            blockMode === BLOCK_MODE_SAFE\n          )\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === constant.RAW_SLASH) {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = constant.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = constant.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it's not open yet.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return constant.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (constant.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, constant.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target === constant.UNDEFINED\n}\n","import isDef from '../function/isDef'\n\nimport * as array from './array'\nimport * as constant from './constant'\n\nexport const UNDEFINED = '$0'\n\nexport const NULL = '$1'\n\nexport const TRUE = '$2'\n\nexport const FALSE = '$3'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n *\n * [a, undefined, undefined] => [a]\n * [a, undefined, b, undefined] => [a, undefined, b]\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = constant.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = constant.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    constant.TRUE\n  )\n\n  return args\n\n}\n\n/**\n * 把 [ 'key1:value1', 'key2:value2' ] 格式转成 `{key1:value1,key2:value2}`\n */\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\n/**\n * 把 [ 'item1', 'item2' ] 格式转成 `['item1','item2']`\n */\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\n/**\n * 输出函数调用的格式\n */\nexport function toCall(name: string, args?: (string | void)[]): string {\n  const code = args ? array.join(trimArgs(args), COMMA) : constant.EMPTY_STRING\n  return `${name}(${code})`\n}\n\n/**\n * 输出为字符串格式\n */\nexport function toString(value: string | number | boolean | null | void): string {\n  return value === constant.TRUE\n    ? TRUE\n    : value === constant.FALSE\n      ? FALSE\n      : value === constant.NULL\n        ? NULL\n        : value === constant.UNDEFINED\n          ? UNDEFINED\n          : JSON.stringify(value)\n}\n\n/**\n * 输出为匿名函数格式\n */\nexport function toFunction(args: string, code: string) {\n  return `${constant.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0,${NULL}=null,${TRUE}=!0,${FALSE}=!1;${RETURN}${code}}`\n}","import {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as exprGenerator from 'yox-expression-compiler/src/generator'\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_COMMENT_VNODE = 'p',\n\nRENDER_ELEMENT_VNODE = 'q',\n\nRENDER_COMPONENT_VNODE = 'r',\n\nRENDER_SLOT = 's',\n\nRENDER_PARTIAL = 't',\n\nRENDER_IMPORT = 'u',\n\nRENDER_EACH = 'v',\n\nRENDER_RANGE = 'w',\n\nRENDER_EQUAL_RANGE = 'x',\n\nTO_STRING = 'y',\n\nARG_STACK = 'z'\n\n\n// 序列化代码的参数列表\nlet codeArgs: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${constant.RAW_FUNCTION}(${arg || constant.EMPTY_STRING}){${result || constant.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, constant.FALSE, constant.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 join 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = generator.toCall(\n      RENDER_COMMENT_VNODE\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (isUndef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (isUndef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (isUndef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (isUndef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === constant.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, constant.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isComplex, ref, key, html, attrs, children } = node,\n\n  staticTag: string | void,\n  dynamicTag: string | void,\n\n  outputAttrs: string | void,\n\n  outputText: string | void,\n  outputHTML: string | void,\n\n  outputChilds: string | void,\n  outputSlots: string | void,\n\n  outputStatic: string | void,\n  outputOption: string | void,\n  outputStyle: string | void,\n  outputSvg: string | void,\n\n  outputRef: string | void,\n  outputKey: string | void\n\n  if (tag === constant.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + node.name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, constant.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    dynamicTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    staticTag = generator.toString(tag)\n  }\n\n\n\n\n  array.push(collectStack, constant.FALSE)\n\n  if (attrs) {\n    const list: string[] = []\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          list,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n    if (list.length) {\n      outputAttrs = stringifyFunction(\n        array.join(list, generator.COMMA)\n      )\n    }\n  }\n\n  if (children) {\n    if (isComponent) {\n      collectStack[collectStack.length - 1] = constant.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n    else {\n      isStringRequired = constant.TRUE\n      collectStack[collectStack.length - 1] = isComplex\n      outputChilds = stringifyChildren(children, isComplex)\n      if (isComplex) {\n        outputChilds = stringifyFunction(outputChilds)\n      }\n      else {\n        outputText = outputChilds\n        outputChilds = constant.UNDEFINED\n      }\n    }\n  }\n\n  array.pop(collectStack)\n\n\n\n\n  if (html) {\n    outputHTML = is.string(html)\n      ? generator.toString(html as string)\n      : stringifyExpression(html as ExpressionNode, constant.TRUE)\n  }\n\n  outputStatic = node.isStatic ? generator.TRUE : constant.UNDEFINED\n  outputOption = node.isOption ? generator.TRUE : constant.UNDEFINED\n  outputStyle = node.isStyle ? generator.TRUE : constant.UNDEFINED\n  outputSvg = node.isSvg ? generator.TRUE : constant.UNDEFINED\n\n  outputRef = ref ? stringifyValue(ref.value, ref.expr, ref.children) : constant.UNDEFINED\n  outputKey = key ? stringifyValue(key.value, key.expr, key.children) : constant.UNDEFINED\n\n  if (isComponent) {\n    return generator.toCall(\n      RENDER_COMPONENT_VNODE,\n      // 最常用 => 最不常用排序\n      [\n        staticTag,\n        outputAttrs,\n        outputSlots,\n        outputRef,\n        outputKey,\n        dynamicTag,\n      ]\n    )\n  }\n\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    // 最常用 => 最不常用排序\n    [\n      staticTag,\n      outputAttrs,\n      outputChilds,\n      outputText,\n      outputStatic,\n      outputOption,\n      outputStyle,\n      outputSvg,\n      outputHTML,\n      outputRef,\n      outputKey,\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === constant.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, constant.UNDEFINED) // method\n        array.push(args, constant.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, constant.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [\n        result\n      ]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          generator.toString(node.index)\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        generator.toString(node.index)\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, constant.TRUE),\n      generator.toString(node.index)\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_COMMENT_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_COMPONENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n      TO_STRING,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = constant.FALSE,\n\n  // 如果是内部临时值，不需要 holder\n  needHolder = holder && !inner,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      constant.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = constant.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          generator.toString(identifier.lookup),\n          identifier.offset > 0 ? generator.toString(identifier.offset) : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED,\n          depIgnore ? generator.TRUE : constant.UNDEFINED,\n          stack ? stack : constant.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = constant.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            generator.toString(lookup),\n            offset > 0 ? generator.toString(offset) : constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n            depIgnore ? generator.TRUE : constant.UNDEFINED,\n            stack ? stack : constant.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            constant.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            needHolder ? generator.TRUE : constant.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = constant.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  if (!needHolder) {\n    return value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([\n        constant.RAW_VALUE + generator.COLON + value\n      ])\n\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (defaultKeypath === constant.UNDEFINED) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (scope[key] !== constant.UNDEFINED) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (scope.$item !== constant.UNDEFINED) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && scope[key] !== constant.UNDEFINED) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: Data = {\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      $vnode,\n      $vnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair($vnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair($vnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          $vnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    return appendVnode({\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    text: string | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: string | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      text,\n      html,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    staticTag: string | void,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void,\n    dynamicTag: string | void\n  ) {\n\n    let tag: string\n\n    // 组件支持动态名称\n    if (dynamicTag) {\n      const componentName = observer.get(dynamicTag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`The dynamic component \"${dynamicTag}\" can't be found.`)\n        }\n      }\n      tag = componentName\n    }\n    else {\n      tag = staticTag as string\n    }\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        vnodeSlots[name] = vnodes.length ? vnodes : constant.UNDEFINED\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - 1 - (offset || 0),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (runtimeKeypath !== constant.UNDEFINED) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n          vnodes[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (length !== constant.UNDEFINED) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange,\n    toString\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (value !== constant.UNDEFINED) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (value !== constant.UNDEFINED) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (text !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (html !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = constant.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return constant.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, constant.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, constant.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (directive.hint !== constant.UNDEFINED) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return constant.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    isComplete = $emitter.fire(event, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","RAW_SLASH","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","constant.UNDEFINED","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","constant.MINUS_ONE","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","target","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","constant.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","constant.RAW_DOT","list","hasOwnProperty","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","debug","info","warn","error","fatal","Error","ns","listeners","Emitter","filter","instance","namespace","parse","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","name","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","string.indexOf","string.slice","matchTrue","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","_a","once","bind","unbind","ref","props","slots","isComponent","model","$model","checkProp","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","hint","expr","nodeType.PROPERTY","createEach","from","to","equal","nodeType.EACH","isComplex","nodeType.TEXT","isLeaf","constant.RAW_SLOT","constant.RAW_TEMPLATE","nodeType.IF","nodeType.PARTIAL","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","tagName","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifier","isProp","lookup","constant.KEYPATH_CURRENT","constant.KEYPATH_PARENT","createLiteral","createIdentifierInner","nodeType.LITERAL","createMemberIfNeeded","nodes","firstNode","shift","isLiteral_1","staticNodes_1","staticRaw_1","dynamicNodes_1","constant.RAW_SLASH","string.endsWith","nodeType.IDENTIFIER","firstName","array.join","firstRaw","createMemberInner","lead","nodeType.MEMBER","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isDef","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","array.last","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","constant.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","methodPattern","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","element","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","checkDirective","openIndex","openText","closeIndex","closeText","helper.specialTags","setElementText","safe","replaceChild","toNumber","exprNodeType.IDENTIFIER","binding","getAttributeDefaultValue","isModel","isLazy","isEvent","isCustom","exprCompiler.compile","e","exprNodeType.LITERAL","exprNodeType.CALL","methodName","partial","isTemplate","attrs","hasType","constant.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","constant.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","lastChild","stub","addTextChild","creator.createText","htmlParsers","constant.RAW_TRANSITION","creator.createDirective","event","directiveName","diectiveModifier","extra","lazy","string.camelize","custom","_b","creator.createAttribute","lowerName","string.lower","blockParsers","source","terms","literal","index_1","parts","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","node_1","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","RETURN","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","codeArgs","isStringRequired","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_COMMENT_VNODE","RENDER_ELEMENT_VNODE","RENDER_COMPONENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","TO_STRING","ARG_STACK","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","needHolder","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","fields_1","generator.toObject","identifier","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","generator.COMMA","stringifyConditionChildren","getComponentSlots","addSlot","array.falsy","object.falsy","setPair","staticTag","dynamicTag","outputAttrs","outputText","outputHTML","outputChilds","outputSlots","outputStatic","outputOption","outputStyle","outputSvg","outputRef","outputKey","list_1","renderName","generator.RETURN","stringifyExpressionVnode","stringifyIf","isUndef","generator.EMPTY","generator.AND","generator.NOT","KEY_DIRECTIVES","innerText","innerHTML","createEvent","findElement","selector","constant.DOCUMENT","querySelector","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","documentElement","classes","CHAR_WHITESPACE","array.remove","isBoxElement_1","IEEvent_1","object.extend","currentTarget","srcElement","IEEvent","returnValue","cancelBubble","getElementById","EMITTER","propertyName","constant.EVENT_CHANGE","constant.EVENT_CLICK","attachEvent","detachEvent","STYLE_SHEET","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","value_1","getAttribute","appendChild","constant.EVENT_MODEL","on","locked","find","cssText","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","hooks","logger.info","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","Computed","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","object.sort","formatWatcherOptions","min","insert","object.clear","delay","timer","args_1","array.toArray","handler","debounce","constant.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","values_1","dataBinding","lazyValue","viewBinding_1","viewSyncing_1","element_1","control_1","eventName_1","sync_1","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","rule","addComputed","method","placeholder","el","root","model_1","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","render","$template","Yox","snabbdom.create","domApi","plugin","install","templateCompiler.compile","templateGenerator.generate","getResource","setResource","addEvents","downward","$children","logger.error","PHASE_DOWNWARD","PHASE_UPWARD","$components","model_2","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","renderedSlots","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","renderComponentVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","renderRange","renderEqualRange","$keypath","defaultKeypath","scope","globalHolder","$item","logger.debug","$event","$data","vnodeList","lastScope","lastStack","concat","$length","myStack","runtimeKeypath","staticKeypath","lastVnode","childs","componentName","vnodeSlots","defaultRender","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","matchType","matched_1","required","addEvent","registry","componentCallback","queue","promise","then","formatValue","hasSlot"],"mappings":"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"}