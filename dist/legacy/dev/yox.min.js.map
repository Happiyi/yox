{"version":3,"file":"yox.min.js","sources":["../../../../yox-config/src/config.ts","../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/holder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/platform/web.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/util/generator.ts","../../../../yox-template-compiler/src/generator.ts","../../../../yox-expression-compiler/src/generator.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  Namespace,\n} from '../../../yox-type/src/type'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  CustomEventInterface,\n} from '../../../yox-type/src/emitter'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间信息\n  ns?: Namespace\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += env.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(env.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + env.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import { ValueHolder } from '../../../yox-type/src/type'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder\n} from '../../../yox-type/src/type'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\ndefaultLogLevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = env.WINDOW && /edge|msie|trident/i.test(env.WINDOW.navigator.userAgent)\n  ? env.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : env.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (env.GLOBAL) {\n    const logLevel = env.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  Namespace,\n  NativeListener,\n} from '../../../yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\nimport {\n  EmitterInterface,\n} from '../../../yox-type/src/emitter'\n\nimport execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace.key, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = instance.parse(type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = instance.parse(type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == env.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = instance.parse(type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    const result = {\n      key: type,\n      name: type,\n      ns: env.EMPTY_STRING,\n    }\n\n    if (this.ns) {\n      const index = string.indexOf(type, env.RAW_DOT)\n      if (index >= 0) {\n        result.name = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from '../../../yox-type/src/type'\n\nimport {\n  NextTaskInterface,\n} from '../../../yox-type/src/yox'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n  Attribute,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import {\n  VNode,\n  Property\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import {\n  VNode,\n  Directive,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL\n} from '../../yox-config/src/config'\n\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from '../../yox-type/src/type'\n\nimport {\n  DomApi,\n} from '../../yox-type/src/api'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from '../../../yox-config/src/config'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[$A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return env.TRUE\n  }\n  // <div data-name checked>\n  else {\n    return string.startsWith(name, 'data-')\n      ? env.EMPTY_STRING\n      : name\n  }\n}\n\nexport function createElement(tagName: string) {\n\n  let isSvg = array.has(svgTagNames, tagName), isComponent = env.FALSE\n\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (!isSvg && componentNamePattern.test(tagName)) {\n    isComponent = env.TRUE\n  }\n\n  return creator.createElement(\n    tagName,\n    isSvg,\n    tagName === 'style',\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = env.FALSE, hasValue = env.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : env.UNDEFINED\n\n        if (name === 'type') {\n          hasType = env.TRUE\n        }\n        else if (name === env.RAW_VALUE) {\n          hasValue = env.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = env.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return env.TRUE\n  }\n}","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = env.TRUE, offset = 0\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  let firstNode = nodes.shift() as Node,\n\n  { length } = nodes,\n\n  lookup = env.TRUE,\n\n  offset = 0\n\n  // member 要求至少两个节点\n  if (length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    let isLiteral = env.TRUE, staticNodes: string[] = [], runtimeNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (node.type === nodeType.LITERAL) {\n\n          const literal = node as Literal\n\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            return\n          }\n\n          if (literal.raw !== env.KEYPATH_CURRENT) {\n            array.push(\n              staticNodes,\n              toString(literal.value)\n            )\n          }\n\n        }\n        else {\n          isLiteral = env.FALSE\n        }\n\n        array.push(\n          runtimeNodes,\n          node\n        )\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      const identifier = firstNode as Identifier\n\n      lookup = identifier.lookup\n      offset += identifier.offset\n\n      let name = identifier.name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (name) {\n        array.unshift(staticNodes, name)\n      }\n\n      // a.b.c\n      if (isLiteral) {\n        // 转成 Identifier\n        name = array.join(staticNodes, env.RAW_DOT)\n        firstNode = createIdentifierInner(name, name, lookup, offset)\n      }\n      // a[b]\n      else {\n        firstNode = createMemberInner(raw, firstNode, env.UNDEFINED, runtimeNodes, lookup, offset)\n      }\n    }\n    else {\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, env.RAW_DOT),\n          env.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          env.UNDEFINED,\n          runtimeNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n","import * as env from '../../yox-common/src/util/env'\n\nexport const unary = {\n  '+': env.TRUE,\n  '-': env.TRUE,\n  '~': env.TRUE,\n  '!': env.TRUE,\n  '!!': env.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, '++ is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, '-- is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from '../../yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The poping node type is not as expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`{{ and }} are not allowed in directive.`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (setElementText(element, child.text)) {\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`The value of lazy must be a number greater than 0.`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('The method name that appear on directive must be an identifier.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(env.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal(`The value of the model must be an identifier.`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`{{ and }} are not allowed in a directive value.`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, env.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            const node = createElement(tag)\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              env.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier] = string.camelize(event).split(env.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_EVENT,\n              diectiveModifier\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier] = string.camelize(custom).split(env.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_CUSTOM,\n              diectiveModifier\n            )\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it does't opened.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as env from './env'\nimport * as array from './array'\n\nexport const UNDEFINED = 'z'\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), COMMA)})`\n}\n\nexport function toString(value: any): string {\n  return JSON.stringify(value)\n}\n\nexport function toFunction(args: string, code: string) {\n  return `${env.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0;${RETURN}${code}}`\n}","import {\n  Data,\n} from '../../yox-type/src/type'\n\nimport {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as exprGenerator from '../../yox-expression-compiler/src/generator'\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_SLOT = 'q',\n\nRENDER_PARTIAL = 'r',\n\nRENDER_IMPORT = 's',\n\nRENDER_EACH = 't',\n\nRENDER_RANGE = 'u',\n\nRENDER_EQUAL_RANGE = 'v',\n\nTO_STRING = 'w',\n\nARG_STACK = 'x'\n\n\n// 序列化代码的参数列表\nlet codeArgs: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${env.RAW_FUNCTION}(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, env.FALSE, env.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: generator.TRUE,\n        text: generator.EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (isUndef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (isUndef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (isUndef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (isUndef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    [data, tag, attrs, childs, slots]\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void\n\n  if (tag === env.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          outputAttrs,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    data.tag = generator.toString(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = generator.TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = generator.TRUE\n  }\n\n  if (isOption) {\n    data.isOption = generator.TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = generator.TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = is.string(html)\n      ? generator.toString(html)\n      : stringifyExpression(html as ExpressionNode, env.TRUE)\n  }\n\n  if (isComponent) {\n    data.isComponent = generator.TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, generator.COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      generator.toString(node.hint),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === env.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, env.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [\n        result\n      ]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          node.index ? generator.toString(node.index) : env.UNDEFINED\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        node.index ? generator.toString(node.index) : env.UNDEFINED\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, env.TRUE),\n      node.index ? generator.toString(node.index) : env.UNDEFINED\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n      TO_STRING,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = env.FALSE,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      env.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = env.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          identifier.lookup ? generator.TRUE : env.UNDEFINED,\n          identifier.offset > 0 ? generator.toString(identifier.offset) : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED,\n          depIgnore ? generator.TRUE : env.UNDEFINED,\n          stack ? stack : env.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = env.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            lookup ? generator.TRUE : env.UNDEFINED,\n            offset > 0 ? generator.toString(offset) : env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n            depIgnore ? generator.TRUE : env.UNDEFINED,\n            stack ? stack : env.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            env.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            holder ? generator.TRUE : env.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = env.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  // 不需要 value holder\n  if (!holder) {\n    return value\n  }\n\n  // 内部的临时值，且 holder 为 true\n  if (inner) {\n    return isSpecialNode\n      ? value + env.RAW_DOT + env.RAW_VALUE\n      : value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([env.RAW_VALUE + generator.COLON + value])\n\n}\n","import {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport globalHolder from '../../yox-common/src/util/holder'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport Observer from '../../yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: PropertyHint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            KEY_DIRECTIVES,\n            key,\n            {\n              ns: DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              modifier: keypathUtil.join(keypath, env.RAW_WILDCARD),\n              hooks: directives[DIRECTIVE_BINDING],\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: Data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = observer.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`The dynamic component \"${tag}\" can't be found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, env.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], env.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = env.UNDEFINED\n    globalHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, env.EMPTY_STRING + i)\n            : env.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange,\n    toString\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from '../../yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  HINT_BOOLEAN\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = env.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (env.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (env.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (env.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, env.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string, hint?: number): void {\n  object.set(\n    node,\n    name,\n    hint === HINT_BOOLEAN\n      ? env.FALSE\n      : env.EMPTY_STRING,\n    env.FALSE\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != env.NULL) {\n      return value as string\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = env.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" is existed.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  Namespace,\n} from '../../../yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: Namespace, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../../yox-type/src/options'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from '../../yox-type/src/options'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from '../../../yox-config/src/config'\n\nimport execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n    if (value === env.TRUE) {\n      name = env.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === env.EVENT_CLICK || name === env.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += env.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from '../../../yox-config/src/config'\n\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n}\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = env.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== env.TRUE) {\n        eventName = env.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = env.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = env.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Watcher,\n  Listener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  WatcherOptions,\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from '../../yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as domApi from '../../yox-dom/src/dom'\n\nimport Observer from '../../yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\ntype YoxClass = typeof Yox\ntype EmitterClass = typeof Emitter\ntype CustomEventClass = typeof CustomEvent\n\ntype YoxPlugin = {\n  version: string\n  install(Yox: YoxClass): void\n}\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox<Computed, Watchers, Events, Methods> implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event: CustomEventClass = CustomEvent\n  public static Emitter: EmitterClass = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(\n    options?: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n\n    const instance = this, $options: ComponentOptions = options || env.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === env.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, Listener<this>>,\n    listener?: Listener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, Listener<this>>,\n    listener?: Listener<this>\n  ): this {\n    addEvents(this, type, listener, env.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    namespace = event.ns || (event.ns = $emitter.parse(event.type)),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (namespace.ns === MODIFER_NATIVE) {\n        logger.error(`\"${event.type}\": The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    isComplete = $emitter.fire(namespace, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, Watcher<this> | WatcherOptions<this>>,\n    watcher?: Watcher<this> | WatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: YoxInterface, watchers: Record<string, Watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  if (process.env.NODE_ENV !== 'pure') {\n    execute(instance.$options[HOOK_AFTER_CREATE], instance)\n    instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Listener>,\n  listener?: Listener,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Listener, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return env.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return isDef((this as YoxInterface).get(SLOT_DATA_PREFIX + name))\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","offset","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","env.RAW_DOT","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","env.EMPTY_FUNCTION","stylePrefix","env.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","env.GLOBAL","logLevel","getStyle","backgroundColor","debug","info","warn","error","fatal","Error","ns","listeners","Emitter","filter","instance","namespace","parse","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","_a","array.push","logger.fatal","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","string.indexOf","string.slice","matchTrue","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","isComponent","model","$model","checkProp","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","expr","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","tagName","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifierInner","lookup","nodeType.IDENTIFIER","createMemberInner","lead","nodes","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createMemberIfNeeded","firstNode","shift","isLiteral_1","staticNodes_1","runtimeNodes_1","literal","identifier","array.join","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","array.last","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","env.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","element","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","checkDirective","openIndex","openText","closeIndex","closeText","setElementText","safe","replaceChild","toNumber","exprNodeType.IDENTIFIER","binding","getAttributeDefaultValue","isModel","isLazy","isEvent","isCustom","exprCompiler.compile","e","exprNodeType.LITERAL","exprNodeType.CALL","partial","isTemplate","attrs","hasType","env.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","env.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","env.RAW_TRANSITION","creator.createDirective","event","directiveName","diectiveModifier","lazy","string.camelize","custom","_b","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","terms","index_1","parts","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","RETURN","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","toFunction","codeArgs","isStringRequired","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","TO_STRING","ARG_STACK","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","fields_1","generator.toObject","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyObject","obj","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","generator.COMMA","stringifyConditionChildren","renderElement","childs","setPair","outputTag","outputChilds","outputSlots","outputAttrs","addSlot","array.falsy","object.falsy","getComponentSlots","renderName","generator.RETURN","stringifyExpressionVnode","stringifyIf","generator.EMPTY","isUndef","generator.AND","generator.NOT","KEY_DIRECTIVES","innerText","innerHTML","findElement","selector","env.DOCUMENT","querySelector","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","createEvent","documentElement","classes","CHAR_WHITESPACE","array.remove","EMITTER","propertyName","env.EVENT_CHANGE","isBoxElement_1","env.EVENT_CLICK","attachEvent","detachEvent","IEEvent_1","object.extend","currentTarget","srcElement","IEEvent","returnValue","cancelBubble","getElementById","STYLE_SHEET","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","value_1","getAttribute","appendChild","env.EVENT_MODEL","on","locked","find","cssText","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","hooks","logger.info","sync","deps","observer","getter","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","dep","watch","Computed","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","object.sort","formatWatcherOptions","min","insert","object.clear","delay","timer","args_1","array.toArray","handler","debounce","env.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","values_1","dataBinding","lazyValue","viewBinding_1","viewSyncing_1","element_1","control_1","eventName_1","sync_1","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","rule","addComputed","method","placeholder","el","root","model_1","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","Yox","snabbdom.create","domApi","plugin","install","templateCompiler.compile","generator.toFunction","getResource","setResource","addEvents","downward","$children","logger.error","PHASE_DOWNWARD","PHASE_UPWARD","$components","model_2","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","renderRange","renderEqualRange","$keypath","defaultKeypath","scope","globalHolder","$item","logger.debug","$event","$data","lastScope","lastStack","concat","$length","myStack","runtimeKeypath","staticKeypath","vnodeList","lastVnode","componentName","renderSlots_1","defaultRender","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","matchType","matched_1","required","addEvent","registry","componentCallback","queue","promise","then","formatValue","hasSlot"],"mappings":"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"}