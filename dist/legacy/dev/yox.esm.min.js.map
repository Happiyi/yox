{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/valueHolder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/util/generator.ts","../../../../yox-template-compiler/src/generator.ts","../../../../yox-expression-compiler/src/generator.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import ValueHolder from '../../../yox-type/src/interface/ValueHolder'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst valueHolder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default valueHolder","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport valueHolder from './valueHolder'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Attribute from '../../yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Property from '../../yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from '../../yox-type/src/vnode/VNode'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, model, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      // 更新组件时，如果写了 <Component model=\"xx\"/>\n      // 必须把双向绑定的值写到 props 里，否则一旦 propTypes 加了默认值\n      // 传下去的数据就错了\n      if (isDef(model)) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model\n      }\n\n      if (props) {\n        node.checkProps(props)\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as type from '../../yox-type/src/type'\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxOptions from '../../yox-type/src/options/Yox'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): type.data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = env.TRUE, offset = 0\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  let firstNode = nodes.shift() as Node,\n\n  { length } = nodes,\n\n  lookup = env.TRUE,\n\n  offset = 0\n\n  // member 要求至少两个节点\n  if (length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    let isLiteral = env.TRUE, staticNodes: string[] = [], runtimeNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (node.type === nodeType.LITERAL) {\n\n          const literal = node as Literal\n\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            return\n          }\n\n          if (literal.raw !== env.KEYPATH_CURRENT) {\n            array.push(\n              staticNodes,\n              toString(literal.value)\n            )\n          }\n\n        }\n        else {\n          isLiteral = env.FALSE\n        }\n\n        array.push(\n          runtimeNodes,\n          node\n        )\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      const identifier = firstNode as Identifier\n\n      lookup = identifier.lookup\n      offset += identifier.offset\n\n      let name = identifier.name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (name) {\n        array.unshift(staticNodes, name)\n      }\n\n      // a.b.c\n      if (isLiteral) {\n        // 转成 Identifier\n        name = array.join(staticNodes, keypathUtil.separator)\n        firstNode = createIdentifierInner(name, name, lookup, offset)\n      }\n      // a[b]\n      else {\n        firstNode = createMemberInner(raw, firstNode, env.UNDEFINED, runtimeNodes, lookup, offset)\n      }\n    }\n    else {\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, keypathUtil.separator),\n          env.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          env.UNDEFINED,\n          runtimeNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n","import * as env from '../../yox-common/src/util/env'\n\nexport const unary = {\n  '+': env.TRUE,\n  '-': env.TRUE,\n  '~': env.TRUE,\n  '!': env.TRUE,\n  '!!': env.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.RAW_MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.RAW_MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.RAW_MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw].value, raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, '表达式错误')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, ValueHolder> = {}\n\n// object.has 无法判断出 undefined，因此这里改成 ValueHolder 结构\nkeywordLiterals[env.RAW_TRUE] = { value: env.TRUE }\nkeywordLiterals[env.RAW_FALSE] = { value: env.FALSE }\nkeywordLiterals[env.RAW_NULL] = { value: env.NULL }\nkeywordLiterals[env.RAW_UNDEFINED] = { value: env.UNDEFINED }\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: type.hint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from '../../yox-config/src/config'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && array.has(selfClosingTagNames, element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.RAW_MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.RAW_MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child: Node, index: number) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.RAW_MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的值不能用插值或 if 语法`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === config.DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === config.DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    isEvent = directive.ns === config.DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === config.DIRECTIVE_CUSTOM\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    let expr: ExpressionNode | void\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch {}\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`lazy 指令的值 [${raw}] 必须是大于 0 的数字`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (!eventPattern.test(raw) && !eventNamespacePattern.test(raw)) {\n            fatal('事件转换名称只能是 [name] 或 [name.namespace] 格式')\n          }\n          else if (currentElement\n            && currentElement.isComponent\n            && directive.name === raw\n          ) {\n            fatal('转换组件事件的名称不能相同')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal(`model 指令的值格式错误: [${raw}]`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          fatal(`${directive.ns} 指令的表达式错误: [${text}]`)\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, attrs, slot, children } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n        else if (!slot) {\n          fatal(`<template> 不写 slot 属性是几个意思？`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = config.SLOT_NAME_DEFAULT\n    }\n    // 补全 style 标签的 type\n\n    // style 如果没有 type 则加一个 type=\"text/css\"\n    // 因为低版本 IE 没这个属性，没法正常渲染样式\n\n    else {\n      let hasType = env.FALSE, hasValue = env.FALSE\n      if (attrs) {\n        array.each(\n          attrs,\n          function (attr) {\n\n            const name = attr.type === nodeType.PROPERTY\n              ? (attr as Property).name\n              : env.UNDEFINED\n\n            if (name === 'type') {\n              hasType = env.TRUE\n            }\n            else if (name === env.RAW_VALUE) {\n              hasValue = env.TRUE\n            }\n\n          }\n        )\n      }\n      if (element.isStyle && !hasType) {\n        array.push(\n          element.attrs || (element.attrs = []),\n          creator.createProperty('type', config.HINT_STRING, 'text/css')\n        )\n      }\n      // 低版本 IE 需要给 option 标签强制加 value\n      else if (tag === 'option' && !hasValue) {\n        element.isOption = env.TRUE\n      }\n    }\n\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('只能写一个 else 啊')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('不写 if 是几个意思')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, env.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name),\n              env.EMPTY_STRING\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = string.lower(name)\n\n              // <slot> 、<template> 或 svg 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag] || currentElement.isSvg) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `each 不能写在属性的值里`\n                : `each 不能写在属性层级`\n            )\n          }\n        }\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ 和 }}} 无法配对`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ 和 }} 无法配对`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('还有节点未出栈')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as env from './env'\nimport * as array from './array'\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), COMMA)})`\n}\n\nexport function toString(value: any): string {\n  return JSON.stringify(value)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as exprGenerator from '../../yox-expression-compiler/src/generator'\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_SLOT = 'q',\n\nRENDER_PARTIAL = 'r',\n\nRENDER_IMPORT = 's',\n\nRENDER_EACH = 't',\n\nTO_STRING = 'u',\n\nARG_STACK = 'v',\n\nCODE_RETURN = 'return '\n\n// 序列化代码的前缀\nlet codePrefix: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction getCodePrefix() {\n  if (!codePrefix) {\n    codePrefix = `function(${\n      array.join([\n        RENDER_EXPRESSION_IDENTIFIER,\n        RENDER_EXPRESSION_MEMBER_KEYPATH,\n        RENDER_EXPRESSION_MEMBER_LITERAL,\n        RENDER_EXPRESSION_CALL,\n        RENDER_TEXT_VNODE,\n        RENDER_ATTRIBUTE_VNODE,\n        RENDER_PROPERTY_VNODE,\n        RENDER_LAZY_VNODE,\n        RENDER_TRANSITION_VNODE,\n        RENDER_BINDING_VNODE,\n        RENDER_MODEL_VNODE,\n        RENDER_EVENT_METHOD_VNODE,\n        RENDER_EVENT_NAME_VNODE,\n        RENDER_DIRECTIVE_VNODE,\n        RENDER_SPREAD_VNODE,\n        RENDER_ELEMENT_VNODE,\n        RENDER_SLOT,\n        RENDER_PARTIAL,\n        RENDER_IMPORT,\n        RENDER_EACH,\n        TO_STRING,\n      ], generator.COMMA)\n    }){${CODE_RETURN}`\n  }\n  return codePrefix\n}\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: Object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${env.RAW_FUNCTION}(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, env.FALSE, env.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: generator.TRUE,\n        text: generator.EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (!isDef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (!isDef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (!isDef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (!isDef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    [data, tag, attrs, childs, slots]\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(config.SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: type.data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void\n\n  if (tag === env.RAW_SLOT) {\n    const args = [generator.toString(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          outputAttrs,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    data.tag = generator.toString(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = generator.TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = generator.TRUE\n  }\n\n  if (isOption) {\n    data.isOption = generator.TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = generator.TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(html, env.TRUE)\n  }\n\n  if (isComponent) {\n    data.isComponent = generator.TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, generator.COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      generator.toString(node.hint),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr } = node\n\n  if (ns === config.DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [generator.toString(name), generator.toString(value)]\n    )\n  }\n\n  if (ns === env.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [generator.toString(value)]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === config.DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === config.DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === config.DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === config.DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, env.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [result]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      ),\n      renderExpression(node.from, env.TRUE),\n      node.to ? renderExpression(node.to, env.TRUE) : env.UNDEFINED,\n      node.equal ? generator.TRUE : env.UNDEFINED,\n      node.index ? generator.toString(node.index) : env.UNDEFINED\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n  return getCodePrefix() + nodeGenerator[node.type](node) + '}'\n}\n\nexport function hasGenerated(code: string): boolean {\n  return string.startsWith(code, getCodePrefix())\n}","import * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = env.FALSE,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      env.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = env.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          identifier.lookup ? generator.TRUE : env.UNDEFINED,\n          identifier.offset > 0 ? generator.toString(identifier.offset) : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED,\n          depIgnore ? generator.TRUE : env.UNDEFINED,\n          stack ? stack : env.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = env.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            lookup ? generator.TRUE : env.UNDEFINED,\n            offset > 0 ? generator.toString(offset) : env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n            depIgnore ? generator.TRUE : env.UNDEFINED,\n            stack ? stack : env.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            env.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            holder ? generator.TRUE : env.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = env.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  // 不需要 value holder\n  if (!holder) {\n    return value\n  }\n\n  // 内部的临时值，且 holder 为 true\n  if (inner) {\n    return isSpecialNode\n      ? value + '.' + env.RAW_VALUE\n      : value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([env.RAW_VALUE + generator.COLON + value])\n\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport valueHolder from '../../yox-common/src/util/valueHolder'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nexport function render(\n  context: Yox,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: type.data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = valueHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`Can't find [${keypath}], start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): type.getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: type.hint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: type.lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`transition [${name}] is not found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: type.hint): any {\n\n    const key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: holder.keypath,\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n\n    $vnode.model = holder.value\n\n    setPair(\n      $vnode,\n      'directives',\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        binding: holder.keypath,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`directive [${name}] is not found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(config.DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks: directives[config.DIRECTIVE_BINDING],\n              binding: keypathUtil.join(keypath, env.RAW_WILDCARD),\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: type.data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component [${tag}] is not found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, keypathUtil.separator)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], keypathUtil.separator)\n    }\n    const match = object.get(value, staticKeypath as string)\n    valueHolder.keypath = env.UNDEFINED\n    valueHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? valueHolder : valueHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    valueHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    valueHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? valueHolder : valueHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`partial [${name}] is not found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ValueHolder,\n    to: ValueHolder | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = from.value,\n\n    fromKeypath = from.keypath\n\n    if (to) {\n      let toValue = to.value, count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    toString\n  )\n\n}","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as type from '../../yox-type/src/type'\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport API from '../../yox-type/src/interface/API'\nimport SpecialEventHooks from '../../yox-type/src/hooks/SpecialEvent'\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n      : (env.DOCUMENT as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (env.DOCUMENT as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (env.DOCUMENT as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      const holder = object.get(node, name)\n      if (holder) {\n        return holder.value\n      }\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value as string\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, beforeNode: Node): void {\n    parentNode.insertBefore(node, beforeNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return string.lower((node as HTMLElement).tagName)\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = text as string\n          }\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = html as string\n          }\n          node[innerHTML] = html as string\n        }\n      }\n      else {\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      return node[innerHTML]\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        const customEvent = event instanceof CustomEvent\n          ? event\n          : new CustomEvent(event.type, createEvent(event, node))\n\n        if (customEvent.type !== type) {\n          customEvent.type = type\n        }\n\n        emitter.fire(type, [customEvent])\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n\n    emitter.on(type, listener)\n  },\n\n  off(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n    if (process.env.NODE_ENV === 'development') {\n      if (specialEvents[type]) {\n        logger.error(`Special event \"${type}\" is existed.`)\n      }\n      logger.info(`Special event \"${type}\" add success.`)\n    }\n    specialEvents[type] = hooks\n  },\n\n}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nconst directive: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive, { lazy } = vnode\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n\n      const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n      if (value === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else if (value > 0) {\n        handler = debounce(\n          handler,\n          value,\n          // 避免连续多次点击，主要用于提交表单场景\n          // 移动端的 tap 事件可自行在业务层打补丁实现\n          name === env.EVENT_CLICK || name === env.EVENT_TAP\n        )\n      }\n\n    }\n\n    if (vnode.isComponent) {\n\n      (node as Yox).on(name, handler)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(name, handler as type.listener)\n      }\n\n    }\n    else {\n\n      api.on(node as HTMLElement, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(node as HTMLElement, name, handler as type.listener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: type.lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: Yox) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n},\n\ndirective: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { context, lazy, isComponent } = vnode,\n\n    dataBinding = directive.binding as string,\n\n    lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n    set: type.watcher | void,\n\n    sync: type.watcher,\n\n    unbind: Function\n\n    if (isComponent) {\n\n      let component = node as Yox,\n\n      viewBinding = component.$model as string\n\n      set = function (newValue: any) {\n        if (set) {\n          component.set(viewBinding, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function (newValue: any) {\n          context.set(dataBinding, newValue)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        component.unwatch(viewBinding, sync)\n      }\n\n      component.watch(viewBinding, sync)\n\n    }\n    else {\n\n      let element = node as HTMLElement,\n\n      control = vnode.tag === 'select'\n        ? selectControl\n        : inputControl,\n\n      // checkbox,radio,select 监听的是 change 事件\n      eventName = env.EVENT_CHANGE\n\n      if (control === inputControl) {\n        const type = (node as HTMLInputElement).type\n        if (inputTypes[type]) {\n          control = inputTypes[type]\n        }\n        // 如果是输入框，则切换成 model 事件\n        // model 事件是个 yox-dom 实现的特殊事件\n        // 不会在输入法组合文字过程中得到触发事件\n        else if (lazyValue !== env.TRUE) {\n          eventName = env.EVENT_MODEL\n        }\n      }\n\n      set = function (newValue: any) {\n        if (set) {\n          control.set(element, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function () {\n          control.sync(element, dataBinding, context)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        api.off(element, eventName, sync as type.listener)\n      }\n\n      api.on(element, eventName, sync as type.listener)\n\n      control.set(element, vnode.model)\n\n    }\n\n    // 监听数据，修改界面\n    context.watch(dataBinding, set as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      context.unwatch(dataBinding, set as type.watcher)\n      set = env.UNDEFINED\n      unbind()\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as type from '../../../yox-type/src/type'\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nimport api from '../../../yox-dom/src/dom'\n\nconst directive: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    let binding = directive.binding as string,\n\n    isFuzzy = keypathUtil.isFuzzy(binding),\n\n    watcher: type.watcher | void = function (newValue: any, _: any, keypath: string) {\n\n      if (watcher) {\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          const component = node as Yox\n          component.checkProp(name, newValue)\n          component.set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n      }\n\n    }\n\n    vnode.context.watch(binding, watcher as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      vnode.context.unwatch(binding, watcher as type.watcher)\n      watcher = env.UNDEFINED\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateGenerator.hasGenerated(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'development') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateGenerator.generate(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      propTypes,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'development') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (propTypes) {\n      object.each(\n        propTypes,\n        function (rule: PropRule, key: string) {\n          let value = source[key]\n          if (process.env.NODE_ENV === 'development') {\n            checkProp(key, value, rule)\n          }\n          if (isUndef(value)) {\n            value = rule.value\n            if (isDef(value)) {\n              source[key] = rule.type === env.RAW_FUNCTION\n                ? value\n                : is.func(value)\n                  ? (value as type.propValue)()\n                  : value\n            }\n          }\n        }\n      )\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件的直接父组件\n      if (parent) {\n        instance.$parent = parent\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'development') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): void {\n    if (process.env.NODE_ENV === 'development') {\n      const instance = this\n      object.each(\n        props,\n        function (value, key) {\n          instance.checkProp(key, value)\n        }\n      )\n    }\n  }\n\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as type.propType)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item: string) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","KEYPATH_PARENT","KEYPATH_CURRENT","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","offset","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","valueHolder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","debug","msg","tag","log","info","warn","error","fatal","Error","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","model","isComponent","$model","checkProps","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifierInner","lookup","nodeType.IDENTIFIER","createMemberInner","lead","nodes","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createMemberIfNeeded","firstNode","shift","isLiteral_1","staticNodes_1","runtimeNodes_1","literal","identifier","array.join","keypathUtil.separator","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","env.RAW_TRUE","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","expr","nodeType.DIRECTIVE","keypathUtil.join","createProperty","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","element","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","exprNodeType.IDENTIFIER","binding","isModel","config.DIRECTIVE_MODEL","isLazy","config.DIRECTIVE_LAZY","isEvent","config.DIRECTIVE_EVENT","isCustom","config.DIRECTIVE_CUSTOM","exprCompiler.compile","exprNodeType.LITERAL","exprNodeType.CALL","partial","attrs","isTemplate","hasType_1","hasValue_1","env.RAW_VALUE","creator.createProperty","config.HINT_STRING","config.SLOT_NAME_DEFAULT","isStringValueRequired","env.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","creator.createElement","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","event","lazy","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","index_1","parts","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","codePrefix","isStringRequired","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","TO_STRING","ARG_STACK","CODE_RETURN","getCodePrefix","generator.COMMA","renderExpression","holder","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","fields_1","generator.toObject","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyObject","obj","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","stringifyConditionChildren","renderElement","childs","setPair","outputTag","outputChilds","outputSlots","outputAttrs","config.SLOT_DATA_PREFIX","addSlot","array.falsy","object.falsy","getComponentSlots","renderName","stringifyIf","generator.EMPTY","generator.NOT","generator.AND","sync","deps","observer","getter","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","object.get","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","diffWatcher","fire","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","emitter","on","formatWatcherOptions","min","insert","array.remove","object.clear","innerText","findElement","selector","env.DOCUMENT","querySelector","addEventListener","removeEventListener","addClass","className","classList","removeClass","createEvent","documentElement","classes","CHAR_WHITESPACE","EMITTER","propertyName","isBoxElement_1","attachEvent","detachEvent","IEEvent_1","object.extend","currentTarget","srcElement","IEEvent","returnValue","cancelBubble","getElementById","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","setAttribute","value_1","getAttribute","removeAttribute","beforeNode","appendChild","removeChild","nextSibling","find","nodeType","cssText","nativeListeners","special","nativeListener","customEvent","addSpecialEvent","hooks","logger.error","logger.info","delay","timer","args_1","array.toArray","locked","handler","debounce","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checked","checkbox","removeAt","dataBinding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","type_1","checkProp","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","LOADER_QUEUE","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","Yox","propTypes","events","methods","watchers","extensions","rule","isUndef","addComputed","method","$emitter","placeholder","el","root","model_1","template","transitions","components","partials","filters","$root","$parent","$context","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","snabbdom.create","plugin","install","templateCompiler.compile","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","modelKey","modelValue","$el","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","$keypath","defaultKeypath","scope","$item","logger.debug","$event","$data","lastScope","lastStack","concat","$length","myStack","runtimeKeypath","staticKeypath","vnodeList","lastVnode","config.DIRECTIVE_BINDING","componentName","renderSlots_1","defaultRender","fromValue","fromKeypath","toValue","afterHook_1","instance_1","$options_1","snabbdom.patch","instance_2","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","matchType","matched_1","required","config.HOOK_AFTER_CREATE","addEvent","loader_1","queue_1","formatValue","hasSlot"],"mappings":"AAGO,IAAMA,GAAO,EACPC,GAAQ,EACRC,EAAO,KACPC,OAAY,EAEZC,EAAW,OAOXC,EAAW,OACXC,EAAW,OAEXC,EAAa,SACbC,EAAc,UACdC,EAAgB,YAChBC,EAAgB,YAChBC,EAAiB,aAGjBC,EAAY,QACZC,EAAa,SACbC,EAAe,WACfC,EAAe,WACfC,EAAe,IAEfC,EAAiB,KACjBC,EARW,OAUXC,GAAiB,EAKjBC,EA5BgB,oBA4BAC,OAA2BA,OAASlB,EAKpDmB,EAjCgB,oBAiCEC,SAA6BA,SAAWpB,EAqC1DqB,EAAiB,aAOjBC,EAAeC,OAAOC,OAAO,IAK7BC,EAAcF,OAAOC,OAAO,IAK5BE,EAAe,cChGHC,GACvB,OAAOA,IAAWC,aCDKD,GACvB,OAAOA,IAAWC,WCKJC,EAAKC,GACnB,cAAcA,IAAUC,WASVC,EAAMF,GACpB,OAAOG,MAAMC,QAAQJ,YASPK,EAAOL,GAErB,OAAOA,IAAUM,GAA6B,iBAAVN,WAStBO,EAAOP,GACrB,MAAwB,iBAAVA,WASAQ,EAAOR,GACrB,MAAwB,iBAAVA,WASAS,EAAQT,GACtB,MAAwB,kBAAVA,WASAU,EAAQV,GACtB,OAAOQ,EAAOR,IACRO,EAAOP,KAAWW,MAAMC,WAAWZ,KAAWa,SAASb,mGC5DtCc,EAASC,EAAeC,GAC/C,GAAIC,EAAQH,GACV,OAAOI,EAASF,GACZF,EAAGK,MAAMJ,EAASC,GAClBI,EAAML,GACJD,EAAGO,KAAKN,EAASC,GACjBI,EAAMJ,GACJF,EAAGE,GACHF,ICdZ,iBAkCE,WAAYQ,EAAcC,GACxBC,KAAKF,KAAOA,EACZE,KAAKC,MAAQC,EAAYC,cACrBJ,IACFC,KAAKD,cAAgBA,GA0C3B,OAnCEG,2BAAA,WAEE,IADiBF,KACHI,YAAa,CACjB,IAAAL,EAFOC,mBAGXD,GACFA,EAAcM,iBAJDL,KAMNI,YAAcE,EAEzB,OARiBN,MAcnBE,4BAAA,WAEE,IADiBF,KACHO,SAAU,CACd,IAAAR,EAFOC,mBAGXD,GACFA,EAAcS,kBAJDR,KAMNO,SAAWD,EAEtB,OARiBN,MAWnBE,oBAAA,WACE,OAAOF,KAAKK,kBAGdH,iBAAA,WACE,OAAOF,KAAKQ,mBA3EAN,gBAAgB,EAEhBA,eAAe,EAEfA,iBAAiBO,OCAjC,SAAgBC,EACdhC,EACAiC,EACAC,GAEQ,IAAAC,WACR,GAAIA,EACF,GAAID,EACF,IAAK,IAAIE,EAAID,EAAS,EAAGC,GAAK,GACxBH,EAASjC,EAAMoC,GAAIA,EAAGD,KAAYE,EADPD,UAOjC,IAASA,EAAI,EAAGA,EAAID,GACdF,EAASjC,EAAMoC,GAAIA,EAAGD,KAAYE,EADZD,MASlC,SAASE,EAActC,EAAYuC,GACjCvC,EAAMA,EAAMmC,QAAUI,EAGxB,SAASC,EAAiBxC,EAAYuC,GACpCvC,EAAMyC,QAAQF,GAUhB,SAASG,EAAW1C,EAAYF,EAAgB6C,GAC1C3B,EAASlB,GACXkC,EACElC,EACA,SAAUyC,GACRI,EAAO3C,EAAOuC,KAKlBI,EAAO3C,EAAOF,YAUF8C,EAAQ5C,EAAYL,GAClC+C,EAAQ1C,EAAOL,EAAQ2C,YASTG,EAAWzC,EAAYL,GACrC+C,EAAQ1C,EAAOL,EAAQ6C,GAWzB,SAAgBK,EAAW7C,EAAYL,EAAWmD,GAChD,IAAIC,EAAShB,EAUb,OATAC,EACEhC,EACA,SAAUuC,EAAWS,GACnB,GAAIF,IAAWT,EAAYE,GAAQ5C,EAAS4C,IAAS5C,EAEnD,OADAoD,EAASC,EACFX,IAINU,WASOE,EAAQjD,GACd,IAAAmC,WACR,GAAIA,EAAS,EACX,OAAOnC,EAAMmC,EAAS,YAYVe,EAAOlD,GAErB,YAAa,EACX,OAAOA,EAAMkD,MAYjB,SAAgBC,EAAUnD,EAAYL,EAAWmD,GAC/C,IAAIC,EAAS,EAWb,OAVAf,EACEhC,EACA,SAAUuC,EAASS,IACbF,IAAWT,EAAYE,GAAQ5C,EAAS4C,IAAS5C,KACnDK,EAAMoD,OAAOJ,EAAO,GACpBD,MAGJnB,GAEKmB,EAWT,SAAgBM,EAAOrD,EAAYL,EAAWmD,GAC5C,OAAOD,EAAQ7C,EAAOL,EAAQmD,IAAW,WAS3BQ,EAAWtD,GACzB,OAAOgB,EAAShB,GACZA,EACAuD,EAAQC,EAAgBC,MAAOzD,YA6BrB0D,EAAK1D,EAAiB2D,GACpC,OAAO3D,EAAM0D,KAAKC,YASJC,EAAM5D,GACpB,OAAQgB,EAAShB,KAAWA,EAAMmC,6GA7BpC,SAAyBnC,EAAc6D,EAAqB/D,GAC1D,IAAIiD,EAAS,GAOb,OANAf,EACEhC,EACA,SAAUuC,GACRQ,EAAOc,EAAMtB,EAAKsB,GAAOtB,GAAQzC,GAASyC,IAGvCQ,oBChMHe,EAAkB,aAExBC,GAAmB,aAEnBC,GAAoB,SAEpBC,GAAwC,GAExCC,GAAyC,GAEzCC,GAA0C,YAQ1BC,GAASC,GASvB,OARKJ,GAAcI,KACjBJ,GAAcI,GAAOA,EAAIC,QACvBR,EACA,SAAUS,EAAIC,GACZ,OAAOC,GAAMD,MAIZP,GAAcI,YA2CPK,GAAKL,GACnB,OAAOT,GAAMS,GACTM,EACAN,EAAIK,OAWV,SAAgBjB,GAAMY,EAAaO,EAAeC,GAChD,OAAOC,EAAUD,GACbD,IAAUC,EACRF,EACAN,EAAIZ,MAAMmB,EAAOC,GACnBR,EAAIZ,MAAMmB,GAWhB,SAAgB/B,GAAQwB,EAAaU,EAAcH,GACjD,OAAOP,EAAIxB,QAAQkC,EAAM7D,EAAM0D,GAASA,EAAQ,GAWlD,SAAgBI,GAAYX,EAAaU,EAAcF,GACrD,OAAOR,EAAIW,YAAYD,EAAM7D,EAAM2D,GAAOA,EAAMR,EAAIlC,iBAUtC8C,GAAWZ,EAAaU,GACtC,OAA8B,IAAvBlC,GAAQwB,EAAKU,YAkBNG,GAAOb,EAAarB,GAClC,OAAOqB,EAAIa,OAAOlC,GAAS,YAMbmC,GAAOd,EAAarB,GAClC,OAAOqB,EAAIe,WAAWpC,GAAS,YAMjByB,GAAMJ,GACpB,OAAOA,EAAIgB,uBAMGC,GAAMjB,GACpB,OAAOA,EAAIkB,uBAUGlC,GAAIgB,EAAaU,GAC/B,OAAOlC,GAAQwB,EAAKU,IAAS,WASfnB,GAAMS,GACpB,OAAQmB,EAAUnB,KAASA,EAAIlC,4DArJPkC,GASxB,OARKH,GAAeG,KAClBH,GAAeG,GAAOA,EAAIC,QACxBP,GACA,SAAUQ,EAAIC,GACZ,MAAO,IAAMc,GAAMd,MAIlBN,GAAeG,wBASGA,GAOzB,OANKF,GAAgBE,KACnBF,GAAgBE,GAAOA,EAAIC,QACzBN,GACAS,KAGGN,GAAgBE,+EAyEAA,EAAaU,GACpC,IAAMU,EAASpB,EAAIlC,OAAS4C,EAAK5C,OACjC,OAAOsD,GAAU,GAAKT,GAAYX,EAAKU,KAAUU,2DCxI7CC,GAAa,MAEnBC,GAAkB,MAElBC,GAAwB,QAExBC,GAAuC,GAEvCC,GAAuC,GAE1BnC,GAAY,aASToC,GAAMC,EAAiBC,GACrC,OAAID,IAAYC,EACPA,EAAO9D,OAGT+D,GAAkBF,EADzBC,GAAUtC,IAENsC,EAAO9D,OACPJ,WASUC,GAAKgE,EAAiB/D,GAOpC,IAJA,IAAMkE,EAAOjF,EAAM2E,GAAWG,IAC1BH,GAAWG,GACVH,GAAWG,GAAWA,EAAQI,MAAMzC,IAEhCvB,EAAI,EAAGiE,EAAYF,EAAKhE,OAAS,EAAGC,GAAKiE,GAC5CpE,EAASkE,EAAK/D,GAAIA,IAAMiE,KAAehE,EADgBD,eAa/CsB,GAAK4C,EAAkBC,GACrC,OAAOD,GAAYC,EACfD,EAAW3C,GAAY4C,EACvBD,GAAYC,WAQFC,GAAQR,GACtB,OAAOS,GAAWT,EAASU,YASbC,GAAWX,EAAiBY,GAC1C,IAAIC,EAAQf,GAAac,GACzB,IAAKC,EAAO,CACV,IAAMxC,EAAMuC,EACTtC,QAAQoB,GAAY,OACpBpB,QAAQqB,GAAiB,UACzBrB,QAAQsB,GAAuB,cAClCiB,EAAQf,GAAac,GAAW,IAAIE,OAAO,IAAIzC,OAEjD,IAAMtB,EAASiD,EAAQD,MAAMc,GAC7B,GAAI9D,EACF,OAAOA,EAAO,GCtFlB,IAAMgE,GAA2B,CAC/BjH,MAAOF,YCWOoH,GAAK7G,GACnB,OAAOZ,OAAOyH,KAAK7G,GAGrB,SAAS8G,GAAaC,EAAWC,GAC/B,OAAOD,EAAE/E,OAASgF,EAAEhF,OAGtB,SAASiF,GAAcF,EAAWC,GAChC,OAAOA,EAAEhF,OAAS+E,EAAE/E,gBAUNkF,GAAKlH,EAAmBmH,GACtC,OAAON,GAAK7G,GAAQkH,KAClBC,EAAOF,GAAgBH,aAUXjF,GAAK7B,EAAmB8B,GACtC,IAAK,IAAI4B,KAAO1D,EACd,GAAI8B,EAAS9B,EAAO0D,GAAMA,KAASxB,EACjC,eAUUkF,GAAMpH,GACpB6B,GACE7B,EACA,SAAUqH,EAAG3D,UACJ1D,EAAO0D,cAUJ4D,GAAOC,EAAqBvH,GAO1C,OANA6B,GACE7B,EACA,SAAUL,EAAO+D,GACf6D,EAAS7D,GAAO/D,IAGb4H,WAQOC,GAAMC,EAA2BC,GAC/C,OAAOD,GAAWC,EACdJ,GAAOA,GAAO,GAAIG,GAAUC,GAC5BD,GAAWC,WAUDC,GAAK3H,EAAa4H,GAChC,IAAIhF,EAAS5C,EAwBb,OAvBIa,EAASb,GACP4H,GACFhF,EAAS,GACTiF,EACE7H,EACA,SAAUoC,EAAMS,GACdD,EAAOC,GAAS8E,GAAKvF,EAAMwF,MAK/BhF,EAAS5C,EAAOsD,QAGXwE,EAAU9H,KACjB4C,EAAS,GACTf,GACE7B,EACA,SAAUL,EAAO+D,GACfd,EAAOc,GAAOkE,EAAOD,GAAKhI,EAAOiI,GAAQjI,KAIxCiD,WAYOmF,GAAI/H,EAAa6F,GAyC/B,OAvCAmC,GACEnC,EACA,SAAUnC,EAAKuE,GAEb,GAAIjI,GAAUC,EA6BZ,OADAD,EAASP,EACFyC,EA1BP,IAAIvC,EAAQK,EAAO0D,GAInBwE,EAAWnH,EAAMpB,GAGbA,GAASiB,EAAQjB,EAAMoI,OACzBpI,EAAQA,EAAMoI,OAGZE,EACEC,GACFtB,GAAYjH,MAAQA,EACpBK,EAAS4G,IAGT5G,EAASP,EAIXO,EAASL,IAWVK,EAYT,SAAgBmI,GAAInI,EAAmB6F,EAAiBlG,EAAYyI,GAClEJ,GACEnC,EACA,SAAUnC,EAAKuE,GACb,GAAIA,EACFjI,EAAO0D,GAAO/D,OAEX,GAAIK,EAAO0D,GACd1D,EAASA,EAAO0D,OAEb,CAAA,IAAI0E,EAIP,OAAOlG,EAHPlC,EAASA,EAAO0D,GAAO,eAgBfR,GAAIlD,EAAmB0D,GAErC,OAAO3C,EAAMf,EAAO0D,aASND,GAAMzD,GACpB,OAAQ8H,EAAU9H,IACba,EAASb,KACR6G,GAAK7G,GAAQgC,qICxOIxC,EAAa6I,GACpC,OAAO7I,GAAUS,GAAYT,EAAO8I,SAChC9I,EAAO8I,WACPvH,EAAMsH,GACJA,EACA7D,ECLD,IAAM+D,GAAQ,EACRC,GAAO,EACPC,GAAO,EACPC,GAAQ,EACRC,GAAQ,EAKfC,GZDuB,oBYCgBC,QAAgCA,QAAU5I,EAKvF6I,GAAQ,MAAMC,KAAKT,GAASU,IAAuBT,GAAQE,GAK3DQ,GAAc,KAKd,SAASC,KACP,GAAIC,EAAY,CACd,IAAMC,EAAWD,EAA0B,cAC3C,GAAIC,GAAYb,IAASa,GAAYT,GACnC,OAAOS,EAGX,OAAON,GAGT,SAASO,GAASC,GAChB,MAAO,oBAAoBA,4EAQbC,GAAMC,EAAaC,GAC7Bb,IAAiBM,MAAcX,IACjCK,GAAcc,IAAIT,IAAeQ,GAAO,aAAcJ,GAAS,QAASG,YAS5DG,GAAKH,EAAaC,GAC5Bb,IAAiBM,MAAcV,IACjCI,GAAcc,IAAIT,IAAeQ,GAAO,YAAaJ,GAAS,WAAYG,YAS9DI,GAAKJ,EAAaC,GAC5Bb,IAAiBM,MAAcT,IACjCG,GAAcgB,KAAKX,IAAeQ,GAAO,YAAaJ,GAAS,QAASG,YAS5DK,GAAML,EAAaC,GAC7Bb,IAAiBM,MAAcR,IACjCE,GAAciB,MAAMZ,IAAeQ,GAAO,aAAcJ,GAAS,WAAYG,YASjEM,GAAMN,EAAaC,GACjC,GAAIP,MAAcP,GAChB,MAAM,IAAIoB,MAAM,KAAIN,GAAO,mBAAiBD,+HCvD9C,WAAYQ,GACV7I,KAAK6I,GAAKA,GAAM9H,EAChBf,KAAK8I,UAAY,GA0OrB,OAjOEC,iBAAA,SACEjJ,EACAN,EACAwJ,GAGA,IAAIC,EAAWjJ,KAEfkJ,aAAEC,SAAMN,OAERhE,EAAOoE,EAASH,UAAUK,GAE1BC,EAAa9I,EAEb,GAAIuE,EAAM,CAGRA,EAAOwE,GAAYxE,GAKnB,IAAMyE,EAAQ9J,GAAQA,EAAK,aAAcU,EACrCV,EAAK,GACLlB,EAEJoI,EACE7B,EACA,SAAU0E,EAAyBrD,GAGjC,GAAKsD,GAAeX,EAAIU,IAElBE,EAAU5E,EAAM0E,MAEhBP,GAAWA,EAAOlJ,EAAMN,EAAM+J,IAJpC,CAeID,IACFA,EAAMI,SAAWH,EAAQjK,IAG3B,IAAImC,EAASQ,EAAQsH,EAAQjK,GAAIiK,EAAQI,IAAKnK,GAwB9C,OAtBI8J,IACFA,EAAMI,SAAWpL,GAInBiL,EAAQK,IAAML,EAAQK,IAAOL,EAAQK,IAAM,EAAK,EAG5CL,EAAQK,MAAQL,EAAQM,KAC1BZ,EAASa,IAAIhK,EAAMyJ,EAAQjK,IAIzBgK,IACE7H,IAAWV,EACbuI,EAAMS,UAAUC,OAETV,EAAM/I,WACbkB,EAASV,IAITU,IAAWV,EACNqI,EAAarI,OADtB,KAQN,OAAOqI,GAUTL,eAAA,SACEjJ,EACA4J,GAGA,IAEEZ,EAFe9I,eAIjBuJ,EAA0B9J,EAAQiK,GAC9B,CAAEpK,GAAIoK,GACNA,EAEJ,GAAI/C,EAAU4C,IAAY9J,EAAQ8J,EAAQjK,IAAK,CACvC,IAAA4J,KATSlJ,WASPmJ,SAAMN,OACdU,EAAQV,GAAKA,EACboB,EACEnB,EAAUK,KAAUL,EAAUK,GAAQ,IACtCI,QAIFW,GAAa,8CAWjBnB,gBAAA,SACEjJ,EACA4J,GAGM,IAEJZ,EAFe9I,eAIjB,GAAIF,EAAM,CAEF,IAAAoJ,KANSlJ,WAMPmJ,SAAMgB,OAEdC,EAAgBC,GAAoBX,GAEpChJ,EAAO,SAAUmE,EAAwBsE,GACvCzC,EACE7B,EACA,SAAU0E,EAAyB7H,GAC7B0I,EAAcb,IAAYC,GAAeW,EAAIZ,IAC/C1E,EAAK/C,OAAOJ,EAAO,IAGvBpB,GAEGuE,EAAKhE,eACDiI,EAAUK,IAIjBA,EACEL,EAAUK,IACZzI,EAAKoI,EAAUK,GAAOA,GAGjBgB,GACPG,GAAYxB,EAAWpI,QA/BVV,KAqCN8I,UAAY,GAIfyB,UAAU1J,OAAS,GACrB2J,GAAY,gFAapBzB,gBAAA,SACEjJ,EACA4J,GAGA,IAEEZ,EAFa9I,eAIfkJ,KAJelJ,WAIbmJ,SAAMN,OAERpH,EAASnB,EAETmK,EAAgBJ,GAAoBX,GAEpChJ,EAAO,SAAUmE,GASf,OARA6B,EACE7B,EACA,SAAU0E,GACR,GAAIkB,EAAclB,IAAYC,GAAeX,EAAIU,GAC/C,OAAO9H,EAASV,IAIfU,GAYT,OATI0H,EACEL,EAAUK,IACZzI,EAAKoI,EAAUK,IAGVN,GACPyB,GAAYxB,EAAWpI,IAGjBe,QAYZ,SAASiJ,GAAe7B,EAAa/I,GAEnC,IAAM2B,EAAS,CACb0H,KAAMrJ,EACN+I,GAAIxF,GAGN,GAAIwF,EAAI,CACN,IAAMnH,EAAQiJ,GAAe7K,EAAM,KAC/B4B,GAAS,IACXD,EAAO0H,KAAOyB,GAAa9K,EAAM,EAAG4B,GACpCD,EAAOoH,GAAK+B,GAAa9K,EAAM4B,EAAQ,IAI3C,OAAOD,EAKT,SAASoJ,GAAUtB,GACjB,OAAOjJ,EAgBT,SAAS+J,GAAoBX,GAC3B,OAAOjK,EAAQiK,GACT,SAAUH,GACR,OAAOG,IAAaH,EAAQjK,IAE9BuL,GAaR,SAASrB,GAAesB,EAAmBvB,GACjC,IAAAV,OACR,OAAOA,GAAMiC,EACTjC,IAAOiC,EACPxK,cCjVmBjC,GACvB,OAAOoB,EAAQpB,IAAW,cAAcuJ,KAAKT,GAAS9I,WCI7C0M,eAAiBtM,GAAoBuM,GAASD,eAC5CA,aAgBb,IClBIE,aDOOC,iBAAmBzM,GAAoBuM,GAASE,gBAC9C,SAAU5L,GACnB,IAAM6L,EAAU,IAAID,eACpBC,EAAQC,MAAMC,UAAY/L,EAC1B6L,EAAQG,MAAMC,YAAY,IAIjBC,yBCCX,aACExL,KAAKyL,MAAQ,GAoEjB,OA9EgBC,SAAd,WACE,OAAOT,KAAWA,GAAS,IAAIS,IAejCA,mBAAA,SAAOnN,EAAgBgB,GACf,IAAA0J,EAAWjJ,KAAQyL,UACzBxB,EACEwB,EACA,CACEnM,GAAIf,EACJoL,IAAKpK,IAGY,IAAjBkM,EAAM5K,QACR8K,GACE,WACE1C,EAAS2C,SASjBF,oBAAA,SAAQnN,EAAgBgB,GAChB,IAAA0J,EAAWjJ,KAAQyL,UACzBI,EACEJ,EACA,CACEnM,GAAIf,EACJoL,IAAKpK,IAGY,IAAjBkM,EAAM5K,QACR8K,GACE,WACE1C,EAAS2C,SASjBF,kBAAA,WACE1L,KAAKyL,MAAM5K,OAAS,GAMtB6K,gBAAA,WACU,IAAAD,aACJA,EAAM5K,SACRb,KAAKyL,MAAQ,GACb/E,EACE+E,EACA,SAAUK,GACR7J,EAAQ6J,EAAKxM,GAAIwM,EAAKnC,cCtFnBoC,GAAY,MACZC,GAAc,OACdC,GAAiB,UACjBC,GAAc,QACdC,GAAiB,WACjBC,GAAgB,IAChBC,GAAgB,MAChBC,GAAiB,OAEjBC,GAAmB,SACnBC,GAAoB,WAEpBC,GAAc,EACdC,GAAc,EACdC,GAAe,EAEfC,GAAe,KACfC,GAAiB,OACjBC,GAAkB,QAClBC,GAAkB,QAClBC,GAAoB,UACpBC,GAAmB,IAEnBC,GAAqB,eACrBC,GAAoB,cCxB7BC,GAAO,ECEJ,IAAMC,GAAK,MAELC,GAAQ,SAERC,GAAU,WAEVC,GAAY,aAEZC,GAAU,oBCJPC,GAAOC,EAAUC,EAAcC,GAErC,IAAAC,SAAMC,gBAEdC,EAAiBH,GAAYA,EAASE,YAEtC,GAAIA,GAAeC,EAAgB,CAEjC,IAAMC,EAAWF,GAAeG,EAEhCC,EAAWH,GAAkBE,EAE7B5D,GACE2D,EACA,SAAUG,EAAiBjF,GACpBgF,EAAShF,IACTiF,EAAK5P,QAAU2P,EAAShF,GAAM3K,OAEjCmP,EAAIS,KAAKN,EAAM3E,EAAMiF,EAAK5P,SAKhC8L,GACE6D,EACA,SAAUjI,EAAciD,GACjB8E,EAAS9E,IACZwE,EAAIU,WAAWP,EAAM3E,eC3BfuE,GAAOC,EAAUC,EAAcC,GAErC,IAAAC,SAAMQ,gBAEdC,EAAiBV,GAAYA,EAASS,YAEtC,GAAIA,GAAeC,EAAgB,CAEjC,IAAMN,EAAWK,GAAeJ,EAEhCC,EAAWI,GAAkBL,EAE7B5D,GACE2D,EACA,SAAUO,EAAgBrF,GACnBgF,EAAShF,IACTqF,EAAKhQ,QAAU2P,EAAShF,GAAM3K,OAEjCmP,EAAIa,KAAKV,EAAM3E,EAAMqF,EAAKhQ,SAKhC8L,GACE6D,EACA,SAAUK,EAAgBrF,GACnB8E,EAAS9E,IACZwE,EAAIc,WAAWX,EAAM3E,EAAMqF,EAAKE,kBCzB1BhB,GAAOE,EAAcC,GAE3B,IAAAc,SAAMC,eAEdC,EAAgBhB,GAAYA,EAASe,WAErC,GAAIA,GAAcC,EAAe,CAE/B,IAAMC,EAAOH,EAAKI,KAAoBnB,EAAME,KAE5CkB,EAAkBnB,GAAYD,EAAMlJ,UAAYmJ,EAASnJ,QAEzDuJ,EAAWW,GAAcV,EAEzBC,EAAWU,GAAiBX,EAE5B5D,GACE2D,EACA,SAAUgB,EAAsB9F,GACxB,IAAAD,UAAEgG,SAAMC,SAAMC,WACfjB,EAAShF,IAGL+F,GACJD,EAAUzQ,QAAU2P,EAAShF,GAAM3K,OACnCwQ,KAECI,GACFA,EAAON,EAAMX,EAAShF,GAAO0E,GAE/BsB,EAAKL,EAAMG,EAAWrB,IATtBuB,EAAKL,EAAMG,EAAWrB,KAc5BtD,GACE6D,EACA,SAAUc,EAAsB9F,GAC9B,IAAK8E,EAAS9E,GAAO,CACX,IAAAiG,iBACJA,GACFA,EAAON,EAAMG,EAAWpB,gBAUpBhM,GAAO+L,GACb,IAAAgB,eACR,GAAIA,EAAY,CACd,IAAMS,EAAOzB,EAAMe,KAAKI,KAAoBnB,EAAME,KAClDxD,GACEsE,EACA,SAAUK,GACA,IAAAG,iBACJA,GACFA,EAAOC,EAAMJ,EAAWrB,eC7DlBF,GAAOE,EAAcC,GAE7B,IAAmDC,EAAnDa,SAAMW,QAAKC,UAAOC,UAAOC,UAAOlQ,YAEtC,GAAIqO,EAAM8B,aAIR,GAHA5B,EAAOa,EAAKI,IAGRlB,EAAU,CAKRjO,EAAM6P,KACHF,IACHA,EAAQ,IAEVA,EAAMzB,EAAK6B,QAAUF,GAGnBF,GACFzB,EAAK8B,WAAWL,GAGlB,IAAM9N,EAASoO,GAAaN,EAAOC,GAC/B/N,GACFqM,EAAKgC,YAAYrO,SAKrBqM,EAAOF,EAAME,KAGf,GAAIwB,EAAK,CACP,IAAMS,EAAOxQ,EAAQyQ,MACjBD,IACFA,EAAKT,GAAOxB,ICrBlB,SAASmC,GAAYrC,EAAcC,GACjC,OAAOD,EAAMtF,MAAQuF,EAASvF,KACzBsF,EAAMrL,MAAQsL,EAAStL,IAG9B,SAAS2N,GAAiBC,EAA0BC,EAAoBC,GAQtE,IANA,IAAI5O,EAEJmM,EAEArL,EAEO6N,GAAcC,IACnBzC,EAAQuC,EAAOC,MACD7N,EAAMqL,EAAMrL,OACnBd,IACHA,EAAS,IAEXA,EAAOc,GAAO6N,GAEhBA,IAGF,OAAO3O,GAAUyM,EAInB,SAASoC,GAAa3C,EAAU4C,EAAkBzC,EAAY0C,GACxDA,EACF7C,EAAI8C,OAAOF,EAAYzC,EAAM0C,GAG7B7C,EAAI+C,OAAOH,EAAYzC,GAI3B,SAAS6C,GAAgB/C,EAAcrE,GAErC,IAAMqH,GAAShD,EAAMiD,QAAUjD,EAAMrO,SAASoR,gBAAgBpH,EAASqE,GAQvE,OANAA,EAAMe,KAAKI,IAAmB6B,EAC9BhD,EAAMe,KAAKmC,IAAiB/P,EAE5BgQ,GAAiBnD,GACjBoD,GAAiBpD,GAEVgD,EAIT,SAASK,KACP,IAAMtC,EAAO,GAEb,OADAA,EAAKuC,MNzEI9D,GM0EFuB,EAGT,SAASwC,GAAYxD,EAAUC,GAEvB,IAAAtF,QAAKwF,SAAMa,SAAMe,gBAAa0B,cAAWC,WAAQC,YAASC,aAAUC,aAAUC,SAAMC,SAAMnS,YAEhG,IAAIuO,IAAQa,EAQZ,GAJAA,EAAOsC,KAEPrD,EAAMe,KAAOA,EAET0C,EACFzD,EAAME,KAAOH,EAAIgE,WAAWF,QAI9B,GAAIL,EACFxD,EAAME,KAAOH,EAAIiE,cAAcH,QAIjC,GAAI/B,EAAa,CAEf,IAAImC,EAA2CvT,EAG3CgK,GACF/I,EAAQuS,cACNxJ,EACA,SAAUiB,GACJwI,GAAWpD,EAAMmC,IAEfnC,EAAKmC,MAEHnC,EAAKqD,MACPpE,EAAQe,EAAKqD,WAENrD,EAAKqD,KAEdC,GACErE,EACA+C,GAAgB/C,EAAOrE,KAM3BsI,EAAmBtI,IAO3BqE,EAAME,KAAOH,EAAIiE,cAAcM,GAE3BL,EACFlB,GAAgB/C,EAAOiE,GAGvBlD,EAAKmC,IAAiBxQ,OAMxBwN,EAAOF,EAAME,KAAOH,EAAIwE,cAAcvE,EAAMtF,IAAesF,EAAMwE,OAE7DZ,EACFa,GAAU1E,EAAKG,EAAM0D,GAEdC,EACP9D,EAAI8D,KAAK3D,EAAiB2D,EAAMH,EAASC,GAElCG,GACP/D,EAAI+D,KAAK5D,EAAiB4D,EAAMJ,EAASC,GAG3Ce,GAAkB3E,EAAKC,GACvB2E,GAAkB5E,EAAKC,GACvBmD,GAAiBnD,GACjBoD,GAAiBpD,GAKrB,SAASyE,GAAU1E,EAAU4C,EAAkBJ,EAAiBC,EAAqBC,EAAmBI,GAEtG,IADA,IAAI7C,EAActK,EAAQ8M,GAAc,EAAG7M,EAAM3D,EAAMyQ,GAAYA,EAAqBF,EAAOtP,OAAS,EACjGyC,GAASC,GAEd4N,GAAYxD,EADZC,EAAQuC,EAAO7M,IAEfkP,GAAY7E,EAAK4C,EAAY3C,EAAO6C,GACpCnN,IAIJ,SAASkP,GAAY7E,EAAU4C,EAAkB3C,EAAc6C,GAErD,IAAA3C,SAAMa,SAAMpP,YAEpBkT,EAAY9E,EAAIkD,OAAO/C,GAYvB,GATI2C,EACF9C,EAAI8C,OAAOF,EAAYzC,EAAM2C,EAAO3C,MAGpCH,EAAI+C,OAAOH,EAAYzC,IAKpB2E,EAAW,CACd,IAAIC,EAAyBpU,EAC7B,GAAIsP,EAAM8B,YAAa,CACrB,IAAMiD,EAAYhE,EAAKI,IACnB4D,IACFD,EAAQ,WACNT,GAAWrE,EAAO+E,UAId/E,EAAMgF,UAAahF,EAAMyD,QAAWzD,EAAMwD,YAClDsB,EAAQ,WACNT,GAAWrE,KAGX8E,GAIFnT,EAAQsT,UAAUC,SAASC,QAAQL,IAMzC,SAASM,GAAarF,EAAU4C,EAAkBJ,EAA0BC,EAAqBC,GAE/F,IADA,IAAIzC,EAAqBtK,EAAQ8M,GAAc,EAAG7M,EAAM3D,EAAMyQ,GAAYA,EAAqBF,EAAOtP,OAAS,EACxGyC,GAASC,IACdqK,EAAQuC,EAAO7M,KAEb2P,GAAYtF,EAAK4C,EAAY3C,GAE/BtK,IAIJ,SAAS2P,GAAYtF,EAAU4C,EAAkB3C,GACvC,IAAAE,SACR,GAAIF,EAAMgF,UAAYhF,EAAMyD,QAAUzD,EAAMwD,UAC1CzD,EAAI9L,OAAO0O,EAAYzC,OAEpB,CAEH,IAKAoF,EALIC,EAAO,WACTC,GAAazF,EAAKC,GAClBD,EAAI9L,OAAO0O,EAAYzC,IAKzB,GAAIF,EAAM8B,eACRwD,EAAYtF,EAAMe,KAAKI,KAIrB,YADAoE,KA+FR,SAAoBvF,EAAcyF,EAAuBF,GAIjD,IAAAxE,SAAM2E,eACRD,IAAcC,IAEhBA,EAAcD,EAAUE,OAAiBD,YAE3C,GAAIA,EAAY,CACN,IAAAE,UACR,GAAIA,EAUF,YATAA,EACE5F,EAAME,KACNa,EAAK8E,IAAiB,WAChB9E,EAAK8E,MACPN,IACAxE,EAAK8E,IAAiBnV,KAQhC6U,IAnHEO,CAAW9F,EAAOsF,EAAWC,IAKjC,SAASC,GAAazF,EAAUC,GAgBtB,IAAAe,SAAM6C,aAAUX,WAAQ8C,SAOhC,GAAIA,GAAQ9C,GAAUA,EAAO0C,OAAQ,CAEnC,IAAM/D,EAAQqB,EAAOjK,IAAI+M,GAEzB,GAAInE,GAAS/F,EAAU+F,EAAO5B,GAC5B,OAIJ,GAAIA,EAAM8B,YAAa,CACrB,IAAMkE,EAAYjF,EAAKI,IACnB6E,GACFC,GAAiBjG,GACjBgG,EAAUE,WAGVnF,EAAKmC,IAAiB/P,OAIxB8S,GAAiBjG,GACb4D,GACF9K,EACE8K,EACA,SAAUZ,GACRwC,GAAazF,EAAKiD,KAW5B,SAASqB,GAAWrE,EAAcyF,GAI1B,IAAA1E,SAAM2E,eAMZ,GALID,IAAcC,IAEhBA,EAAcD,EAAUE,OAAiBD,YAE3CrR,EAAQ0M,EAAK8E,KACTH,EAAY,CACN,IAAAZ,UACR,GAAIA,EAIF,YAHAA,EACE9E,EAAME,OAqKd,SAAgBiG,GAAMpG,EAAUC,EAAcC,GAE5C,GAAID,IAAUC,EAAd,CAIQ,IAAAC,SAAMa,SAGd,IAAKsB,GAAYrC,EAAOC,GAAW,CAIjC,IAAM0C,EAAa5C,EAAIkD,OAAO/C,GAM9B,OALAqD,GAAYxD,EAAKC,QACb2C,IACFiC,GAAY7E,EAAK4C,EAAY3C,EAAOC,GACpCoF,GAAYtF,EAAK4C,EAAY1C,KAUjC,GALAD,EAAME,KAAOA,EACbF,EAAMe,KAAOA,EAITd,EAAS6B,aAAef,EAAKmC,IAC/BnC,EAAKqD,IAAepE,OAKtB,IAAIA,EAAMgF,WAAY/E,EAAS+E,SAA/B,CAIAN,GAAkB3E,EAAKC,EAAOC,GAC9B0E,GAAkB5E,EAAKC,EAAOC,GAC9BkD,GAAiBnD,EAAOC,GACxBmD,GAAiBpD,EAAOC,GAEhB,IAAA4D,SAAMC,SAAMF,aAAUF,YAASC,aAEvCyC,EAAUnG,EAAS4D,KACnBwC,EAAUpG,EAAS6D,KACnBwC,EAAcrG,EAAS2D,SAEnBtN,EAAUuN,GACRA,IAASuC,GACXrG,EAAI8D,KAAK3D,EAAM2D,EAAMH,EAASC,GAGzBrN,EAAUwN,GACbA,IAASuC,GACXtG,EAAI+D,KAAK5D,EAAiB4D,EAAMJ,EAASC,GAIpCC,GAAY0C,EACf1C,IAAa0C,GAzLrB,SAAwBvG,EAAU4C,EAAkBiB,EAAmB0C,GAerE,IAbA,IAUAC,EACAC,EAXIhE,EAAa,EACjBC,EAAWmB,EAAS3Q,OAAS,EAC7BwT,EAAa7C,EAASpB,GACtBkE,EAAW9C,EAASnB,GAEpBkE,EAAgB,EAChBC,EAAcN,EAAYrT,OAAS,EACnC4T,EAAgBP,EAAYK,GAC5BG,EAAcR,EAAYM,GAKnBD,GAAiBC,GAAepE,GAAcC,GAG9CgE,EAGKC,EAGAG,EAGAC,EAKDzE,GAAYoE,EAAYI,IAC/BV,GAAMpG,EAAK0G,EAAYI,GACvBJ,EAAa7C,IAAWpB,GACxBqE,EAAgBP,IAAcK,IAIvBtE,GAAYqE,EAAUI,IAC7BX,GAAMpG,EAAK2G,EAAUI,GACrBJ,EAAW9C,IAAWnB,GACtBqE,EAAcR,IAAcM,IAOrBvE,GAAYqE,EAAUG,IAC7BV,GAAMpG,EAAK2G,EAAUG,GACrBnE,GACE3C,EACA4C,EACAkE,EAAc3G,KACdH,EAAIgH,KAAKD,EAAY5G,OAEvBwG,EAAW9C,IAAWnB,GACtBoE,EAAgBP,IAAcK,IAKvBtE,GAAYoE,EAAYK,IAC/BX,GAAMpG,EAAK0G,EAAYK,GACvBpE,GACE3C,EACA4C,EACAmE,EAAY5G,KACZ2G,EAAc3G,MAEhBuG,EAAa7C,IAAWpB,GACxBsE,EAAcR,IAAcM,KAMvBL,IACHA,EAAgBjE,GAAiBgE,EAAaK,EAAeC,IAS3D5U,EALJwU,EAAWC,EAAW9R,IAClB4R,EAAcE,EAAW9R,KACzBjE,IAIFyV,GAAMpG,EAAK0G,EAAYH,EAAYE,IACnCF,EAAYE,GAAsB9V,GAIlC6S,GAAYxD,EAAK0G,GAGnB7B,GAAY7E,EAAK4C,EAAY8D,EAAYI,GAEzCJ,EAAa7C,IAAWpB,IAvExBsE,EAAcR,IAAcM,GAH5BC,EAAgBP,IAAcK,GAH9BD,EAAW9C,IAAWnB,GAHtBgE,EAAa7C,IAAWpB,GAqFxBmE,EAAgBC,EAClBnC,GACE1E,EACA4C,EACAiB,EACApB,EACAC,EACAmB,EAASnB,EAAW,IAGfD,EAAaC,GACpB2C,GACErF,EACA4C,EACA2D,EACAK,EACAC,GAkEAI,CAAejH,EAAKG,EAAM0D,EAAU0C,GAI/B1C,IACHtN,EAAU8P,IAAY9P,EAAU+P,KAClCtG,EAAI8D,KAAK3D,EAAMzK,EAAkBiO,GAEnCe,GAAU1E,EAAKG,EAAM0D,IAGd0C,EACPlB,GAAarF,EAAKG,EAAMoG,IAGjBhQ,EAAU8P,IAAY9P,EAAU+P,KACvCtG,EAAI8D,KAAK3D,EAAMzK,EAAkBiO,iBCzjBZjT,EAAa6I,GACpC,OAAO2N,EAAWxW,IACbA,EACDuB,EAAMsH,GACJA,EACA,ECLD,IAAM4N,GAAU,EAKVC,GAAa,EAKbC,GAAS,EAKTC,GAAQ,EAKRC,GAAS,EAKTC,GAAU,EAKVC,GAAQ,EAKRC,GAAS,EAKTC,GAAO,ECfpB,SAAgBC,GAAaC,EAAYC,EAAkBC,EAAaC,GACtE,MAAO,CACL7V,KAAM8V,GACND,MACAH,OACAC,WACAC,SAaJ,SAASG,GAAsBF,EAAaxM,EAAc2M,EAAiB3R,GACzE,MAAO,CACLrE,KAAMiW,GACNJ,MACAxM,OACA2M,SACA3R,UAIJ,SAAS6R,GAAkBL,EAAaM,EAAYvR,EAAwBwR,EAAsBJ,EAAiB3R,GACjH,MAAO,CACLrE,KAAMqW,GACNR,MACAM,OACAvR,UACAwR,QACAJ,SACA3R,UAIJ,SAAgBiS,GAAiBT,EAAaxM,EAAckN,GAE1D,IAAIP,EAASxV,EAAU6D,EAAS,EAgBhC,OAdIgF,IAASmN,GACRnN,IAASoN,IAEZT,EAAS/U,EACLoI,IAASoN,IACXpS,EAAS,GAEXgF,EAAO9F,GAOFgT,EACHG,GAAcrN,EAAMwM,GACpBE,GAAsBF,EAAKxM,EAAM2M,EAAQ3R,YAI/BqS,GAAchY,EAAYmX,GACxC,MAAO,CACL7V,KAAM2W,GACNd,MACAnX,kBA0CYkY,GAAqBf,EAAaO,GAEhD,IAAIS,EAAYT,EAAMU,QAEpB/V,WAEFiV,EAASxV,EAET6D,EAAS,EAGT,GAAItD,EAAS,EAAG,CAOd,IAAIgW,EAAYvW,EAAUwW,EAAwB,GAAIC,EAAuB,GA+C7E,GA7CArQ,EACEwP,EACA,SAAUpI,GACR,GAAIA,EAAKhO,OAAS2W,GAAkB,CAElC,IAAMO,EAAUlJ,EAEhB,GAAIkJ,EAAQrB,MAAQY,EAElB,YADApS,GAAU,GAIR6S,EAAQrB,MAAQW,GAClBrM,EACE6M,EACA3P,GAAS6P,EAAQxY,aAMrBqY,EAAY9V,EAGdkJ,EACE8M,EACAjJ,KAmBF6I,EAAU7W,OAASiW,GAAqB,CAE1C,IAAMkB,EAAaN,EAEnBb,EAASmB,EAAWnB,OACpB3R,GAAU8S,EAAW9S,OAErB,IAAIgF,EAAO8N,EAAW9N,KAGlBA,GACF0C,EAAciL,EAAa3N,GAO3BwN,EAHEE,EAGUhB,GADZ1M,EAAO+N,EAAWJ,EAAaK,IACShO,EAAM2M,EAAQ3R,GAI1C6R,GAAkBL,EAAKgB,EAAWrY,EAAeyY,EAAcjB,EAAQ3R,QAOnFwS,EADEE,EACUb,GACVL,EACAgB,EACAO,EAAWJ,EAAaK,IACxB7Y,EACAwX,EACA3R,GAMU6R,GACVL,EACAgB,EACArY,EACAyY,EACAjB,EACA3R,GAOR,OAAOwS,EChQF,IAAMS,GAAQ,CACnBC,IAAK/W,EACLgX,IAAKhX,EACLiX,IAAKjX,EACLkX,IAAKlX,EACLmX,KAAMnX,GAIKoX,GAAS,CACpBC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLR,IAAK,GACLC,IAAK,GACLQ,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,KAAM,GACNC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,KAAM,EACNC,KAAM,YCbQC,GAAQC,GACtB,IAAKxT,GAAMwT,GAAU,CACnB,IAAMC,EAAS,IAAIC,GAAOF,GAC1BxT,GAAMwT,GAAWC,EAAOE,YAAYC,IAEtC,OAAO5T,GAAMwT,GAGf,kBAUE,WAAYA,GACJ,IAAmBlY,WAARb,KACR0B,MAAQjB,EADAT,KAERuD,IAAM1C,EAFEb,KAGRoZ,KAAOD,GAHCnZ,KAIR+Y,QAAUA,EAJF/Y,KAKRqZ,KAk2Bb,OA51BEJ,eAAA,SAAGK,GAEG,IAAmB5X,EAAR1B,WAAeuD,EAAfvD,UAEf0B,GAAS4X,GAAQ,IAEJ,GAAK5X,EAAQ6B,GAJXvD,KAKJoZ,KAAOG,GALHvZ,KAK0B+Y,QAASrX,GALnC1B,KAMJ0B,MAAQA,IANJ1B,KASJoZ,KAAOD,GATHnZ,KAUJ0B,MAAQA,EAAQ,EAAIjB,EAAoB8C,IAQrD0V,iBAAA,SAAKK,GAEH,IAAuB1Y,EAAW0Y,GAAQA,EAAO,EAIjD,GAJiBtZ,KAIJoZ,OAASD,GAAU,CAC9B,IAAM/E,EALSpU,KAKW0B,MAG1B,GARe1B,KAMNqZ,GAAGC,IAEPE,GARUxZ,KAQYoZ,MAEzB,YAVapZ,KASJqZ,GAAGjF,EATCpU,KASmB0B,YAO/B,IAAK8X,GAhBOxZ,KAgBeoZ,MAC9B,OAKF,KAAO9Y,GAAU,CACf,IAAIkZ,GAvBWxZ,KAuBWoZ,MAGrB,CACCxY,GA3BSZ,KA4BFqZ,KAEX,MA9BarZ,KAwBJqZ,GAAGC,KAelBL,eAAA,SAAGG,GACD,OAAOpZ,KAAKoZ,OAASA,GAQvBH,iBAAA,SAAK7I,EAAoBC,GACvB,OAAOzF,GAAa5K,KAAK+Y,QAAS3I,EAAYxQ,EAAMyQ,GAAYA,EAAWrQ,KAAK0B,QAMlFuX,sBAAA,WAEQ,IF5GkB/C,EAAeP,EE4GdyD,EAARpZ,UAAc0B,EAAd1B,WAEjB,GAAIyZ,GAAkBL,GACpB,OAHepZ,KAGC0Z,SACdhY,EACA,CALa1B,KAMF2Z,eAAejY,KAI9B,GAAIkY,GAAQR,GACV,OAXepZ,KAWC6Z,WAAWnY,GAG7B,OAAQ0X,GAEN,KAAKD,GACH,OAGF,KAAKW,GACL,KAAKC,GACH,OAtBa/Z,KAsBG0Z,SACdhY,EACA,CAxBW1B,KAyBAga,WAAWtY,EAAO0X,KAKjC,KAAKa,GAEH,OAhCaja,KA+BJqZ,KACFO,GAhCM5Z,KAgCWoZ,MAhCXpZ,KAiCA6Z,WAAWnY,GAjCX1B,KAkCAka,SAASxY,GAGxB,KAAKyY,GAEH,OAvCana,KAsCJqZ,KAtCIrZ,KAuCGkZ,YAAYkB,IAG9B,KAAKC,GACH,OA3Cara,KA2CG0Z,SACdhY,EACA,EFzJkBwU,EE4GPlW,KA+CEsa,UAAU5Y,EAAO6Y,IF3JG5E,EE4GtB3V,KAgDEwa,KAAK9Y,GF3JnB,CACL5B,KAAM2a,GACN9E,MACAO,YE8JE,KAAKwE,GACH,OAvDa1a,KAuDG2a,WAAWjZ,GAK/B,IAAM+T,EA5DWzV,KA4DS4a,aAAalZ,GACvC,GAAI+T,GAAYoF,GAAkBpF,GAAW,CAC3C,IAAM3H,EA9DS9N,KA8DOkZ,cACtB,GAAIpL,EAAM,CACR,GAAIA,EAAKhO,OAAS2W,GAAkB,CAClC,IAAMjY,EAASsP,EAAiBtP,MAChC,GAAIgF,EAAUhF,GAGZ,OArESwB,KAoEA8a,KAAKra,GACPsa,IACHvc,EAtEKwB,KAuEEwa,KAAK9Y,IAMpB,OA7Ea1B,KA4EJ8a,KAAKra,GFpFtB,SAA4BgV,EAAkB3H,EAAY6H,GACxD,MAAO,CACL7V,KAAMkb,GACNrF,MACAF,WACA3H,QEgFWmN,CACLxF,EACA3H,EA/EW9N,KAgFFwa,KAAK9Y,IAhFH1B,KAoFJ2I,MAAMjH,EAAO,qBAc5BuX,uBAAA,SAAW7I,GAIT,IAFA,IAovBcgJ,EACTQ,GADSR,EApvBGpZ,KAEQoZ,OAmvBHA,IAASa,IArvBdja,KAGNqZ,KAGX,IAAM1D,EANW3V,KAMIwa,KAAKpK,GAG1B,GAAIyE,EAAWc,GACb,OAAOoF,IAAuBpF,EAAKA,GAVpB3V,KAcN2I,MAAMyH,EAAY,cAa/B6I,uBAAA,SAAW7I,EAAoB8K,GAI7BC,EAAM,KAAO7a,GAOX,OATeN,KAONqZ,KAPMrZ,KASEoZ,MAGf,KAAKgC,GAZQpb,KAaFqZ,KACT,MAEF,KAAK6B,EAhBQlb,KAiBFqZ,KACT,MAAM8B,EAER,KAAKhC,GApBQnZ,KAsBA2I,MAAMyH,EAAY,kBAE7B,MAAM+K,EAOZ,IAAMxF,EA/BW3V,KA+BIwa,KAAKpK,GAC1B,OAAO2K,GACL,IAAIM,SAAS,UAAU1F,EAAvB,GACAA,IAUJsD,uBAAA,SAAW7I,GAET,IAAiFtC,EAA5DpI,EAAiB,GAAI4V,EAAiB,GAAIC,EAAQjb,EAAxDN,KAGNqZ,KAET8B,EAAM,KAAO7a,GAEX,OAPaN,KAOIoZ,MAEf,KAAKoC,GATMxb,KAUAqZ,KAEH3T,EAAK7E,SAAWya,EAAOza,QAZpBb,KAaI2I,MAAMyH,EAAY,4BAG/B,MAAM+K,EAER,KAAKhC,GAlBMnZ,KAoBE2I,MAAMyH,EAAY,iBAE7B,MAAM+K,EAGR,KAAKM,GAzBMzb,KA0BAqZ,KACTkC,EAAQxa,EACR,MAGF,KAAK2a,GA/BM1b,KAgCAqZ,KACTkC,EAAQjb,EACR,MAEF,QAIE,GADAwN,EAvCS9N,KAuCOkZ,cACZqC,GACF,GAAIzN,EAGF,GA5CK9N,KA2CI8a,OACLhN,EAAKhO,OAASiW,GAChB9L,EAAWvE,EAAOoI,EAAoB3E,UAEnC,CAAA,GAAI2E,EAAKhO,OAAS2W,GAGlB,CAlDAzW,KAoDQ2I,MAAMyH,EAAY,sBAE7B,MAAM+K,EANNlR,EAAWvE,EAAOoI,EAAiBtP,YAUpC,CAAA,IAAIsP,EAKJ,CA/DI9N,KAiEI2I,MAAMyH,EAAY,WAE7B,MAAM+K,EAnECnb,KA4DE8a,OACT7Q,EAAWqR,EAAQxN,IAW3B,OFlRJ,SAA6BpI,EAAgB4V,EAAgB3F,GAC3D,MAAO,CACL7V,KAAM6b,GACNhG,MACAjQ,OACA4V,UE6QOM,CAAqBlW,EAAM4V,EAxEnBtb,KAwEoCwa,KAAKpK,KAU1D6I,sBAAA,SAAU7I,EAAoB8K,GAE5B,IAAyCpN,EAApBoI,EAAgB,GAAtBlW,KAGNqZ,KAET8B,EAAM,KAAO7a,GACX,OANaN,KAMIoZ,MAEf,KAAK8B,EARMlb,KASAqZ,KACT,MAAM8B,EAER,KAAKhC,GAZMnZ,KAcE2I,MAAMyH,EAAY,qBAE7B,MAAM+K,EAER,KAAKO,GAlBM1b,KAmBAqZ,KACT,MAEF,SAKEvL,EA3BS9N,KA2BOkZ,iBA3BPlZ,KA+BE8a,OACT7Q,EAAWiM,EAAOpI,IAK1B,OAAOoI,GAYT+C,qBAAA,SAAS7I,GAOP,IALA,IAAyCjH,EAApB+M,EAAgB,GAK9B5V,IAGL6I,EAAOmN,EARMtW,KAWA6b,GAAG5B,MAXHja,KAYFqZ,KACTlQ,EAAOoN,GAGTtM,EACEiM,EACA4F,GAAyB3S,EAAMA,EAAM+M,EAAMrV,OAAS,IAlBzCb,KAsBA6b,GAAGE,MAjBD,CAqBb,GA1BW/b,KAuBFqZ,KAGL2C,GA1BOhc,KA0BmBoZ,MAK5B,OAJAnP,EACEiM,EA5BOlW,KA6BE2Z,eA7BF3Z,KA6B0B0B,MAAOpB,IA7BjCN,KA+BO0Z,SAAStJ,EAAY8F,GAElC,IAjCMlW,KAiCO6b,GAAG5B,IAKhB,CAtCMja,KAyCE2I,MAAMyH,EAAY,aAE7B,MA3CSpQ,KAmCAqZ,OA0BjBJ,qBAAA,SAAS7I,EAAoB8F,GAE3B,IAAqBpI,EF/cE3E,EAAY3J,EAAcmW,EE0djDwF,EAAM,KAAO7a,GAEX,OAbaN,KAaIoZ,MAGf,KAAKe,GACHjE,EAAQ,EFheS/M,EEkeb8S,GAnBKjc,KAmBiCwa,KAAKpK,GAAa8F,GFle/B1W,EE+cpBQ,KAoBIsa,UApBJta,KAoBuB0B,MAAO0Y,IFneIzE,EE+clC3V,KAqBIwa,KAAKpK,GFnenB,CACLtQ,KAAMoc,GACNvG,MACAxM,OACA3J,UEkeM,MAGF,KAAKya,GAIH,GA/BSja,KA4BAqZ,KAGL2C,GA/BKhc,KA+BqBoZ,MAAO,CAEnCnP,EACEiM,EAlCKlW,KAmCI2Z,eAnCJ3Z,KAmC4B0B,MAAOpB,IAE1C,MArCON,KAyCI2I,MAAMyH,EAAY,gBAE7B,MAAM+K,EAIV,KAAKd,GAOH,GAtDSra,KAkDAqZ,KAETvL,EApDS9N,KAoDOkZ,YAAYqB,IAElB,CACRtQ,EAAWiM,EAAOpI,GAClB,MAxDO9N,KA4DI2I,MAAMyH,EAAY,aAE7B,MAAM+K,EAGV,QACE,MAAMA,EAMZ,OAAOc,GAxEQjc,KAwE8Bwa,KAAKpK,GAAa8F,IAWjE+C,2BAAA,SAAe7I,EAAoBiG,GAIjC,KAAO2F,GAFUhc,KAEgBoZ,OAFhBpZ,KAGNqZ,KAGX,IAAM1D,EANW3V,KAMIwa,KAAKpK,GAE1B,OAAQiG,GAAUtE,GAAWoK,GAAiBxG,GAC1CoF,GAAsBoB,GAAgBxG,GAAKnX,MAAOmX,GAClDmG,GAAyBnG,EAAKA,EAAKU,IASzC4C,yBAAA,SAAa7I,GAIX,OAFiBpQ,KAEAoZ,MAGf,KAAKgD,GACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GAKL,KAAKC,GAbUxc,KAcJqZ,KACT,MAGF,KAAKoD,GAlBUzc,KAmBJqZ,KAnBIrZ,KAsBE6b,GAAGY,KAtBLzc,KAuBA2I,MAAMyH,EAAY,UAG/B,MAGF,KAAKsM,GA7BU1c,KA8BJqZ,KA9BIrZ,KAiCE6b,GAAGa,KAjCL1c,KAkCA2I,MAAMyH,EAAY,UAG/B,MAGF,KAAKuM,GAxCU3c,KAyCJqZ,KAzCIrZ,KA0CA6b,GAAGc,IA1CH3c,KA2CFqZ,KA3CErZ,KA6CK6b,GAAGe,MA7CR5c,KA8CFqZ,KA9CErZ,KA+CE6b,GAAGe,KA/CL5c,KAgDAqZ,MAGb,MAGF,KAAKwD,GAtDU7c,KAuDJqZ,KAvDIrZ,KAwDA6b,GAAGgB,KAxDH7c,KAyDFqZ,KAEX,MAGF,KAAKyD,GA9DU9c,KA+DJqZ,KA/DIrZ,KAgEA6b,GAAGiB,KAhEH9c,KAiEFqZ,KAEX,MAGF,KAAKuD,GAtEU5c,KAuEJqZ,KAvEIrZ,KAwEA6b,GAAGe,KAxEH5c,KAyEFqZ,KAzEErZ,KA0EE6b,GAAGe,KA1EL5c,KA2EAqZ,MA3EArZ,KAgFF2I,MAAMyH,EAAY,iBAE7B,MAGF,KAAK2M,GArFU/c,KAsFJqZ,MAtFIrZ,KAuFA6b,GAAGe,KAvFH5c,KAwFC6b,GAAGkB,MAxFJ/c,KA0FFqZ,KAEX,MAGF,KAAK2D,GA/FUhd,KAgGJqZ,KAhGIrZ,KAiGA6b,GAAGe,IAjGH5c,KAkGFqZ,KAlGErZ,KAoGK6b,GAAGmB,MApGRhd,KAqGFqZ,KArGErZ,KAsGE6b,GAAGmB,KAtGLhd,KAuGAqZ,MAMjB,GA7GiBrZ,KA6GJ0B,MAAQ0O,EACnB,OA9GepQ,KA8GCwa,KAAKpK,IAQzB6I,uBAAA,SAAW7I,GAqBT,IAjBA,IAKA6M,EAEAvb,EAEA+T,EAEAyH,EAEAC,EAEAC,EAZAC,EAAgB,GAcT/c,GAAU,CAQf,GAzBaN,KAmBJ8a,OAET7Q,EAAWoT,EArBErd,KAqBe0B,OAE5Bub,EAvBajd,KAuBIsd,YAEN,CAWT,GATArT,EAAWoT,EAAQJ,GAEnBhT,EAAWoT,EA7BArd,KA6BiB0B,OA7BjB1B,KA+BF8a,QAETrF,EAjCWzV,KAiCS4a,aAjCT5a,KAiC+B0B,UAGzBwb,EAAqBK,GAAmB9H,IAAY,EAO9D0H,EAAeE,EAJpB3b,EAAQ2b,EAAOxc,OAAS,MAKlBuc,EAAyBG,GAAmBJ,KAC7CC,GAA0BF,GAE7BG,EAAOvb,OACLJ,EAAQ,EACR,EACA8b,GACEH,EAAO3b,EAAQ,GACfyb,EACAE,EAAO3b,EAAQ,GArDZ1B,KAsDMwa,KAAK6C,EAAO3b,EAAQ,GAAI2b,EAAO3b,EAAQ,MAKtDuI,EAAWoT,EAAQ5H,GAEnB,SAIAA,EAAWnX,OAMTmX,GAvEOzV,KAwEA2I,MAAMyH,EAAY,SAK/B,MAMF,KAAO9P,GAAU,CAEf,KAAI+c,EAAOxc,QAAU,GAcnB,OAAOwc,EAAO,GAbd3b,EAAQ2b,EAAOxc,OAAS,EACxBwc,EAAOvb,OACLJ,EAAQ,EACR,EACA8b,GACEH,EAAO3b,EAAQ,GACf2b,EAAO3b,GACP2b,EAAO3b,EAAQ,GA7FR1B,KA8FEwa,KAAK6C,EAAO3b,EAAQ,GAAI2b,EAAO3b,EAAQ,QAgB1DuX,wBAAA,SAAYiC,GASOlb,KAER8a,OAET,IAIA2C,EAEAC,EANIhc,EAJa1B,KAII0B,MAErBkG,EANiB5H,KAMD2d,WAAWjc,GA6C3B,OAnDiB1B,KAYJ6b,GAAG+B,MAZC5d,KAcNqZ,KACToE,EAfezd,KAeA2d,WAAWjc,GAfX1B,KAiBF6b,GAAGJ,MAjBDzb,KAmBJqZ,KACTqE,EApBa1d,KAoBC2d,WAAWjc,IAGvBkG,GAAQ6V,GAAOC,GAvBJ1d,KAyBJ8a,KAAKra,GACdmH,EF5vBR,SAA8BA,EAAY6V,EAAWC,EAAU/H,GAC7D,MAAO,CACL7V,KAAM+d,GACNlI,MACA/N,OACA6V,MACAC,MEsvBWI,CACLlW,EAAM6V,EAAKC,EA3BA1d,KA4BFwa,KAAK9Y,KA5BH1B,KAgCJ2I,MAAMjH,EAAO,cAKtB9B,EAAMsb,KArCOlb,KAsCN8a,OAtCM9a,KAuCF6b,GAAGX,GAvCDlb,KAwCJqZ,KAxCIrZ,KA4CJ2I,MACPjH,EACA,eAAeqc,OAAOC,aAAa9C,YAA2B6C,OAAOC,aA9C1Dhe,KA8CgFoZ,YAK1FxR,GAITqR,kBAAA,SAAM3V,EAAe2a,GAEjB/T,GAAa,gCAAgClK,KAAK+Y,eAAckF,SAMhE1Y,GAAQ,GAEd4T,GAAW,EACXc,GAAW,GACXyB,GAAa,GACbK,GAAa,GACbX,GAAiB,GACjBtB,GAAc,GACdC,GAAc,GACdI,GAAc,GACdC,GAAc,GACdC,GAAc,GACdE,GAAc,GACdG,GAAc,IACdc,GAAc,IACdoC,GAAgB,GAChBnC,GAAa,GAEbgB,GAAY,GACZC,GAAa,GACbF,GAAgB,GAChBJ,GAAc,GACdC,GAAc,GACdC,GAAY,IACZO,GAAW,GACXC,GAAU,IACVP,GAAW,GACXI,GAAW,GACXI,GAAY,GACZH,GAAa,GACbI,GAAa,GAObb,GAA+C,GAsB/C,SAAS3C,GAAaJ,GACpB,OAAQA,EAAO,GAAKA,EAAO,IAAgB,MAATA,EAMpC,SAASQ,GAAQR,GACf,OAAOA,EAAO,IAAMA,EAAO,GAa7B,SAASK,GAAkBL,GACzB,OAAgB,KAATA,GACO,KAATA,GACCA,EAAO,IAAMA,EAAO,KACpBA,EAAO,IAAMA,EAAO,GAM5B,SAAS4C,GAAiB5C,GACxB,OAAOK,GAAkBL,IAASQ,GAAQR,GAnD5C+C,GAAgB+B,GAAgB,CAAE1f,MAAO8B,GACzC6b,GAA6B,MAAI,CAAE3d,MAAOuC,GAC1Cob,GAA4B,KAAI,CAAE3d,MAAOM,GACzCqd,Q7B/6B6B,G6B+6BQ,CAAE3d,MAAOF,GCv7BvC,IAAM6f,GAAU,EAKVC,GAAY,EAKZC,GAAY,EAKZC,GAAW,EAKXC,GAAO,EAKPC,GAAK,EAKLC,GAAU,EAKVC,GAAO,EAKPC,GAAO,EAKPC,GAAU,GAKVC,GAAS,GAKTC,GAAa,GAKbC,GAAS,GC1DTC,GAAc,GAEdC,GAAe,GAEfC,GAAY,GAEzBF,GAAYG,GACZH,GAAYI,GAEZH,GAAwB,IACxBA,GAAwB,IACxBA,GAAaE,GAAgB7e,EAE7B4e,GAAc,GAAIG,GAClBH,GAAgB,KAAII,GACpBJ,GAAmB,QAAIK,YCIPC,GAAgBrW,GAC9B,MAAO,CACLrJ,KAAM2f,GACN7M,SAAUtS,EACV6I,iBAIYuW,GAAgB7W,EAAYM,EAAc3K,EAAmCmhB,EAAuBnO,GAClH,MAAO,CACL1R,KAAM8f,GACN/W,KACAM,OACA5G,IAAKsd,GAAiBhX,EAAIM,GAC1B3K,QACAmhB,OACAnO,qBAIYsO,GAAe3W,EAAcuF,EAAiBlQ,EAAmCmhB,EAAuBnO,GACtH,MAAO,CACL1R,KAAMigB,GACNnN,SAAUtS,EACV6I,OACAuF,OACAlQ,QACAmhB,OACAnO,YAIJ,SAAgBwO,GAAWC,EAAsBC,EAA2BC,EAAgBze,GAC1F,MAAO,CACL5B,KAAMwf,GACNW,OACAC,KACAC,QACAze,QACA0e,UAAW9f,YA6ECqR,GAAWF,GACzB,MAAO,CACL3R,KAAMugB,GACN5O,OACAmB,SAAUtS,EACVggB,OAAQhgB,GC7GZ,IAAMigB,GAAkB,EAGxBC,GAAkB,EAGlBC,GAAoB,EAGpBjc,GAAe,GAGfkc,GAAqB,IAGrBC,GAAe,qBAGfC,GAAwB,sCAIxBC,GAAmB,+BAGnBC,GAAe,gBAGfC,GAAa,4BAGbC,GAAiB,mBAGjBC,GAAqB,kBAGrBC,GAAsB,iBAItBC,GAAmB,oCAGnBC,GAAuB,YAGvBC,GAAwB,aAGxBC,GAAsB,yDAAyDxc,MAAM,KAGrFyc,GAAc,6NAA6Nzc,MAAM,KAIjP0c,GAAqB,wJAAwJ1c,MAAM,KAGnL2c,GAAqB,wEAAwE3c,MAAM,KAGnG4c,GAAsB,4HAA4H5c,MAAM,KAGxJ6c,GAAY,GAgBZ,SAASC,GAAY7e,EAAa4B,GAChC,OAAOkd,GAAYjX,GAAa7H,EAAK4B,EAAO9D,kBAG9BiY,GAAQC,GA40CtB,IA10CA,IAOA+I,EAEAC,EAwBA3I,EAEA4I,EAnCIC,EAAqB,GAEzBC,EAAsB,GAGtBC,EAAkB,GAMlBthB,EAASkY,EAAQlY,OAGjBa,EAAQ,EAGR0gB,EAAY,EAGZC,EAAiB,EAGjBC,EAAkB,EAGlBC,EAAYhC,GAGZiC,EAAwB,GAExBC,EAAsB,GAMtB9Z,EAAQ,SAAUN,GAEd6B,GAAa,mBAAmBkV,QAAsBrG,SAAc1Q,IAexEqa,EAAgC,SAAUC,GACxC,IAAMC,EAAWC,EAAWX,GAC5B,GAAIU,GAAYA,EAAS9iB,OAASgjB,GAAkB,CAClD,IAAMC,EAAUH,EACZG,EAAQza,MAAQqa,GACflZ,EAAU6X,GAAqByB,EAAQza,MAE1C0a,EAASD,EAAQjjB,KAAMijB,EAAQza,OAKrC0a,EAAW,SAAUljB,EAAcmjB,GAEjC,IAAMnV,EAAOoV,EAAUhB,GAEvB,GAAIpU,GAAQA,EAAKhO,OAASA,EAAM,CAEtB,IAAA0R,aAGRZ,EAAQY,GAAgC,IAApBA,EAAS3Q,QAAgB2Q,EAAS,GAEtD2R,EAAYrjB,IAASgjB,GAErBM,EAActjB,IAAS2f,GAEvB4D,EAAavjB,IAASigB,GAEtBuD,EAAcxjB,IAAS8f,GAEjB2D,EAAgBV,EAAWX,GAqB/B,GAnBEqB,IACEA,EAAc3Q,WAAa9E,EAAK8E,WAClC2Q,EAAc3Q,SAAW7R,GAEtBwiB,EAAcnD,YACbtS,EAAKsS,WAAa+C,EACpBI,EAAcnD,UAAY9f,EAGnBwhB,GACJA,IAAmByB,IAClBH,GAAeC,GAAcC,KAEjCC,EAAcnD,UAAY9f,KAM1B6iB,EAAW,CACb,IAAMJ,EAAUjV,EACZmV,GAAWF,EAAQza,MAAQ2a,GAC7Bta,EAAM,QAAQsa,YAAiBF,EAAQza,KAO7C,GAAIsI,EAEF,OAAQA,EAAM9Q,MAEZ,KAAKugB,GAGC8C,IAGKC,EACPI,EAA2B1V,EAAmB8C,GAEvCyS,EACPI,EAA0B3V,EAAkB8C,GAErC0S,GACPI,EAA2B5V,EAAmB8C,IAEhD,MAEF,KAAK+S,GACCR,EACFS,EAA+B9V,EAAiB8C,GAEzCwS,EACPS,EAAiC/V,EAAmB8C,GAE7CyS,EACPS,EAAgChW,EAAkB8C,GAE3C0S,GACPS,EAAiCjW,EAAmB8C,QAOnDY,EAEH8R,EACFU,IAGQlC,IACRmC,EAAczS,GACTA,EAAS3Q,SACZiN,EAAK0D,SAAWlT,IAMbwjB,IACHsB,EACFc,EAA8BpC,EAAgBhU,GAEvCuV,EACPc,EAA6BrC,EAAgBhU,GAEtCwV,GACPc,EAA8BtC,EAAgBhU,IAiBlD,OAbIhO,IAASwf,GACX+E,EAAUvW,GAEHhO,IAASyf,GAChB+E,EAAaxW,GAENqV,EACPoB,EAAazW,GAENgU,GAAkBsB,GAAeoB,EAAc1C,EAAgBhU,IACtE2W,EAAgB3C,EAAgBhU,GAG3BA,EAKPnF,EAAM,cAIVsb,EAAgB,SAAUzS,GAMxB,IAAIkT,EAAYjkB,EAEhBkkB,EAAWthB,EAEXuhB,EAAankB,EAEbokB,EAAYxhB,EAEZqD,EACE8K,EACA,SAAUZ,EAAalP,GACrB,GAAIkP,EAAM9Q,OAASugB,GACjB,GAAIuE,GAAc,EAAG,CAGnB,IAFAD,EAAY/T,EAAea,KAEpBwP,GAAmBrZ,KAAK+c,IAC7BA,EAAWnf,OAAOtC,GAClBwhB,EAAYhjB,EAGVgjB,GAAa,IAKXC,IACDnT,EAASkT,GAAoBjT,KAAOkT,EACrCD,KAEEG,IACDrT,EAASoT,GAAqBnT,KAAOoT,EACtCD,KAGFpT,EAAS1P,OAAO4iB,EAAWE,EAAaF,EAAY,GAEpDA,EAAYE,EAAankB,QAM3B,IAFAokB,EAAajU,EAAea,KAErByP,GAAoBtZ,KAAKid,IAC9BA,EAAYrf,OAAOtC,GACnB0hB,EAAaljB,GAKrBpB,IAIJ0jB,EAAgC,WAM5Brb,EAAM,qBAIVib,EASiC,SAAUb,EAAkBnS,GAEtDmS,EAAQrT,aAAgBqT,EAAQpP,MAAS/C,EAAMkU,OAClD/B,EAAQrR,KAAOd,EAAM+O,KACrBoD,EAAQvR,SAAWlT,IAKvB6lB,EAA+B,SAAUpB,EAAkBvU,GAErDA,EAAKE,OAASqW,GAChBvW,EAAKhQ,MAAQ8B,EAIb0kB,GAAaxW,IAKjBiV,EAA4B,SAAUjV,EAAgBoC,GAE5C,IAAAa,SAEJjD,EAAKE,OAASuW,GAChBzW,EAAKhQ,MAAQ0mB,GAASzT,GAEfjD,EAAKE,OAASqW,GACrBvW,EAAKhQ,MAAQiT,IAASyM,GAAgBzM,IAASjD,EAAKrF,KAGpDqF,EAAKhQ,MAAQiT,EAGfjD,EAAKgD,SAAWlT,GAIlBwlB,EAAkC,SAAUtV,EAAgBoC,GAElD,IAAA+O,SAERnR,EAAKmR,KAAOA,EACZnR,EAAKgD,SAAWlT,EAKZqhB,EAAK7f,OAASqlB,KAChB3W,EAAK4W,QAAU9kB,IAKnB4jB,EAAgC,SAAUnB,EAAkB3U,GAElD,IAAAjF,SAEJqb,EAAczB,EAAS3U,GAEvBzF,EAASQ,aAIJ4Z,EAAQrT,YACftB,EAAK5P,MAAQ8B,EAIb8N,EAAK5P,MAAQoG,GAAkBuE,EAAM,SACjC9F,EACA8F,GAKRqa,EAA6B,SAAUpV,EAAiBwC,GAEtDxC,EAAK5P,MAAQoS,EAAMa,KACnBrD,EAAKoD,SAAWlT,GAIlBulB,EAAmC,SAAUzV,EAAiBwC,GAEpD,IAAA+O,SAERvR,EAAKuR,KAAOA,EACZvR,EAAKoD,SAAWlT,EAKZqhB,EAAK7f,OAASqlB,KAChB/W,EAAKgX,QAAU9kB,IAKnB8jB,EAAgC,SAAUrB,EAAkB9T,GAE1DA,EAAUzQ,MAAQ8B,GAIpBojB,EAA6B,SAAUzU,EAAsB2B,GAEnD,IAeJ+O,EAfIlO,SAGR4T,EAAUpW,EAAUpG,KAAOyc,GAG3BC,EAAStW,EAAUpG,KAAO2c,GAG1BC,EAAUxW,EAAUpG,KAAO6c,GAG3BC,EAAW1W,EAAUpG,KAAO+c,GAK5B,IACEjG,EAAOkG,GAAqBpU,GAE9B,UAEA,GAAIkO,EAAM,CAIE,IAAAhK,QAEJ4P,GACE5F,EAAK7f,OAASgmB,KACZtiB,EAAWmc,EAA2BnhB,QACtCmhB,EAA2BnhB,OAAS,IAExCmK,EAAM,cAAcgN,mBAKfgK,EAAK7f,OAASimB,GAChBpG,EAAwBxW,KAAKrJ,OAASqlB,IACzCxc,EAAM,2BAMD8c,IACF9E,GAAa/Y,KAAK+N,IAASiL,GAAsBhZ,KAAK+N,GAGlDmM,GACJA,EAAepS,aACfT,EAAU9F,OAASwM,GAEtBhN,EAAM,iBANNA,EAAM,2CAUN0c,GAAW1F,EAAK7f,OAASqlB,IAC3Bxc,EAAM,oBAAoBgN,OAK9B1G,EAAU0Q,KAAOA,EAEjB1Q,EAAUzQ,MAAQmhB,EAAK7f,OAASgmB,GAC3BnG,EAA2BnhB,MAC5BiT,OAKGkU,GACHhd,EAASsG,EAAUpG,kBAAiB4I,OAGxCxC,EAAUzQ,MAAQiT,EAGpBxC,EAAUuC,SAAWlT,GAIvBylB,EAAmC,SAAU9U,EAAsB2B,GAG/DjI,EAAM,kBA2CV0b,EAAY,SAAU3jB,GAEfA,EAAK8Q,UACRwT,GAAatkB,IAIjB4jB,EAAe,SAAU0B,GAElBA,EAAQxU,UACXwT,GAAagB,IAIjBzB,EAAe,SAAUxB,GAEf,IAAAza,QAAK2d,UAAOtS,SAAMnC,aAAsB0U,EAAa5d,IAAQ8W,EAoBrE,GAjBM8G,IACEnD,EAAQxgB,IACVoG,EAAM,sBAECoa,EAAQzT,IACf3G,EAAM,sBAECsd,EACPtd,EAAM,uBAEEgL,GACRhL,EAAM,gCAMRud,GAAcvS,IAASnC,EACzBwT,GAAajC,QAGV,GAAIza,IAAQ6W,GAAiB4D,EAAQ5Z,KAQrC,CACH,IAAIgd,EAAUplB,EAAWqlB,EAAWrlB,EAChCklB,GACFvf,EACEuf,EACA,SAAU7X,GAER,IAAMjF,EAAOiF,EAAKtO,OAASigB,GACtB3R,EAAkBjF,KACnB7K,EAES,SAAT6K,EACFgd,EAAU7lB,EAEH6I,IAASkd,IAChBD,EAAW9lB,KAMfyiB,EAAQzR,UAAY6U,EACtBlc,EACE8Y,EAAQkD,QAAUlD,EAAQkD,MAAQ,IAClCK,GAAuB,OAAQC,GAAoB,aAItC,WAARje,GAAqB8d,IAC5BrD,EAAQxR,SAAWjR,QApCrByiB,EAAQ5Z,KAAOqd,IA0CnB/B,EAAkB,SAAU1B,EAAkB3U,GAEpC,IAAAjF,SAAM3K,UAGdioB,EAAwBtd,IAASud,GAAgBvd,IAASgW,EAIpD0D,EAAWX,KAAea,GAC5Bpa,EAASQ,gBAGP3K,IAAU6E,EACZsF,EAASQ,gBAEFsd,GAAyBE,GAAanoB,IAC7CmK,EAASQ,kBAIb4Z,EAAQ5Z,GAAQsd,EAAwBjoB,EAAQ4P,EAChD4W,GAAa5W,IAIfoW,EAAgB,SAAUzB,EAAkB3U,GAC1C,OAAOwY,GAAoBxY,EAAKjF,OAC3B4Z,EAAQza,MAAQ6W,GAAgB/Q,EAAKjF,OAASud,GAGrD1B,GAAe,SAAU6B,EAAeC,GAEtC,IAEAC,EAEAliB,EAEAnD,EANI6hB,EAAgBV,EAAWX,IAU7Brd,EAFE0e,GACFwD,EAASjF,GAAkBA,IAAmByB,GAEzCA,EAA0B0C,MAC3B1C,EAAc/R,SAGXyQ,KAIPvgB,EAAQslB,EAAcniB,EAAMgiB,KACf,IACPC,EACFjiB,EAAKnD,GAASolB,GAGdjiB,EAAK/C,OAAOJ,EAAO,GACf6hB,IAAkB1e,EAAKhE,SACrBkmB,SACMxD,EAA0B0C,MAGlC1C,EAAc/R,SAAWlT,MASrC2oB,GAAW,SAAUnZ,GAYdgU,GACHY,IAGF,IAAM5iB,EAAOgO,EAAKhO,KAAMyjB,EAAgBV,EAAWX,GAGnD,GAAIpiB,IAASonB,IAAiBpnB,IAASqnB,GAAkB,CAEvD,IAAMvE,EAAgBM,EAAUf,GAE5BS,GAGD9U,EAAasZ,KAAOxE,EAGjBA,EAAS9iB,OAASqnB,IAAoBvE,EAAS9iB,OAASuf,IAC1DuD,EAASjO,KAAO7G,EAChBkV,EAASJ,EAAS9iB,MAClBmK,EAAWkY,EAASrU,IAIlBnF,EAFK7I,IAASqnB,GAER,uBAIF,iBAIRxe,EAAM,oBAONsB,EADEsZ,EAOAzB,GAAkByB,EAAczjB,OAASgjB,GACrChB,EAAemE,QAAUnE,EAAemE,MAAQ,IAChD1C,EAAc/R,WAAa+R,EAAc/R,SAAW,IAK/CyQ,EAJTnU,GAOAhO,IAASuf,KAINyC,IACFhU,EAAYuZ,KAAO/mB,GAEtB2J,EAAWkY,EAASrU,IAOpBA,EAAKwS,OAGHiD,IACEA,EAAc3Q,WAAa9E,EAAK8E,WAClC2Q,EAAc3Q,SAAW7R,IAGtBwiB,EAAcnD,WAAatS,EAAKsS,YACnCmD,EAAcnD,UAAY9f,IAK9B2J,EAAWiY,EAAWpU,IAK1BwZ,GAAe,SAAU7V,IAWvBA,EAAOA,EAAKzO,QAAQ6d,GAAkBxd,KAEpC4jB,GACEM,GAAmB9V,KAKzB+V,GAAc,CACZ,SAAUzO,GACR,IAAK+I,EAAgB,CACnB,IAAMrd,EAAQsU,EAAQtU,MAAMsc,IAG5B,GAAItc,GAAyB,IAAhBA,EAAM/C,MAAa,CAC9B,IAAM4G,EAAM7D,EAAM,GAClB,GAAiB,MAAbA,EAAM,GAQRie,EAA8Bpa,GAC9B0a,EAASF,GAAkBxa,OAExB,CAYD,GAAIA,IAAQ8W,EAAkB,CAC5B,IAAMwD,EAAWC,EAAWX,GACvBU,GAAcA,EAAqBlT,aACtC/G,EAAM,wBAKZ,IAAMmF,ED33BlB,SAA8BxF,EAAa8J,EAAgB1C,GAMzD,OAHI0C,IACF1C,EAAc3O,GAET,CACLjB,KAAMgjB,GACNxa,MACA8J,QACAd,QAAiB,UAARhJ,EAETiJ,SAAUxQ,EACV2O,cACAkD,UAAWlD,GAAepH,IAAQ6W,GC62BbsI,CACXnf,EACAmB,EAAU8X,GAAajZ,GACvB8Y,GAAqBxZ,KAAKU,IAG5B2e,GAASnZ,GACTgU,EAAiBhU,EAEnB,OAAOrJ,EAAM,MAKnB,SAAUsU,GACR,IAAMtU,EAAQsU,EAAQtU,MAAM4c,IAC5B,GAAI5c,EAaF,OAVIqd,IAAmBC,IAGJ,MAAbtd,EAAM,IACRue,EAASlB,EAAehiB,KAAMgiB,EAAexZ,KAG/CwZ,EAAiBxjB,GAGZmG,EAAM,IAIjB,SAAUsU,GAER,GAAI+I,IAAmBC,EAAkB,CACvC,IAAMtd,EAAQsU,EAAQtU,MAAM0c,IAC5B,GAAI1c,EAAO,CAKHA,EAAM,IACRkE,EAAM,iBAIV,IAAImF,SAAwC3E,EAAO1E,EAAM,GAEzD,GAAI0E,IAASmc,IAA0Bnc,IAASue,EAC9C5Z,EAAO6Z,GACLC,GAAgBze,GAChB9F,QAIC,GAAIuB,GAAkBuE,EAAM0e,GAAsBnH,IAAqB,CAC1E,IAAMoH,EAAQlG,GAAYzY,EAAM0e,GAAsBnH,IAE/CoH,GACHnf,EAAM,UAGVmF,EAAO6Z,GACLjC,GACAkC,GAAgBE,SAMf,GAAIljB,GAAkBuE,EAAMqc,IAAwB,CACvD,IAAIuC,EAAOnG,GAAYzY,EAAMqc,IACzB5gB,GAAkBmjB,EAAMrH,MAC1BqH,EAAOnG,GAAYmG,EAAMrH,KAE3B5S,EAAO6Z,GACLnC,GACAuC,EAAOH,GAAgBG,GAAQ1kB,QAI9B,GAAIuB,GAAkBuE,EAAMyc,GAA0BlF,IAAqB,CAC9E,IAAMsH,EAASpG,GAAYzY,EAAMyc,GAA0BlF,IAEpDsH,GACHrf,EAAM,aAGVmF,EAAO6Z,GACL/B,GACAgC,GAAgBI,SAKlB,GAAIlG,EAAepS,YACjB5B,EAAOma,GACLL,GAAgBze,QAIf,CAGH,IAAM+e,EAAYC,GAAahf,GAI7B2E,EADEsa,GAAmBtG,EAAexZ,MAAQwZ,EAAe1P,MACpD6V,GAAwB9e,GAGxBM,EAAU+X,GAAoB0G,GAC9B5B,GACL3E,GAAUuG,IAAcA,EACxB3B,IAGK9c,EAAUgY,GAAoByG,GAC9B5B,GACL3E,GAAUuG,IAAcA,EACxBjD,IAGKxb,EAAUiY,GAAqBwG,GAC/B5B,GACL3E,GAAUuG,IAAcA,EACxBnD,IAKKkD,GAAwB9e,GAmBrC,OAbA8d,GAASnZ,IAGTkU,EAAavd,EAAM,IAIjBsd,EAAmBjU,EAGnBkV,EAASlV,EAAKhO,MAGT2E,EAAM,MAInB,SAAUsU,GAER,IAAItH,EAAqBhN,EAuEzB,OApEIsd,GAAoBC,GAEtBvd,EAAQsU,EAAQtU,MAAMD,GAAawd,KAAgBxd,GAAawd,GAAc,IAAIxc,OAAOwc,OAIvFvQ,EAAO7G,GAAamO,EAAS,EAAGtU,EAAM/C,OACtC4lB,GAAa7V,GAEbA,GAAQuQ,EAKHD,EAAiBvQ,UACpByV,GACEM,GAAmBlkB,IAIvB2f,EAASjB,EAAiBjiB,MAC1BiiB,EAAmBzjB,GAKZikB,IAAchC,GAErB+G,GADA7V,EAAOsH,GAIPpQ,EAASoZ,EAAiB5Y,kBAOpB2Y,GAwBFD,GAAY9I,IACdpQ,EAAM,IAAImZ,EAAexZ,uBAG7BmJ,EAAOsH,IAzBPtU,EAAQsU,EAAQtU,MAAMsc,MAIpBtP,EAAO7G,GAAamO,EAAS,EAAGtU,EAAM/C,SAEpC4lB,GACE7V,EAAKzO,QAAQge,GAAgB3d,IAMjCikB,IADA7V,EAAOsH,GAEA/V,QAAQge,GAAgB3d,IAa5BoO,IAIX4W,GAAe,CAEb,SAAUC,GACR,GAAI1jB,GAAkB0jB,EAAQC,IAAqB,CAE3CzG,GACFnZ,EACEoZ,EACI,iBACA,iBAKV,IAAMyG,GADNF,EAAS1G,GAAY0G,EAAQC,KACRvlB,QAAQ,OAAQK,GAAkByB,MAAM,KAC7D,GAAI0jB,EAAM,GAAI,CACZ,IAAMxR,EAAU6K,GAAY2G,EAAM,IAElCC,EAAQ5G,GAAY2G,EAAM,IAE1B/jB,EAAQuS,EAAQvS,MAAMqc,IAEtB,GAAIrc,EAAO,CACT,IAAMikB,EAAQ1R,EAAQlS,MAAMgc,IAC5Bb,EAAO4F,GAAqB6C,EAAM,IAClCxI,EAAK2F,GAAqB6C,EAAM,IAChC,GAAIzI,GAAQC,EACV,OAAOyI,GACL1I,EACAC,EAC0B,OAA1B2B,GAAYpd,EAAM,IAClBgkB,OAID,CACH,IAAM9I,EAAOkG,GAAqB7O,GAClC,GAAI2I,EACF,OAAOgJ,GACLhJ,EACArhB,EACAyC,EACA0nB,IAMN9f,EAAM,cAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQM,IAAuB,CAEnD,GADAN,EAAS1G,GAAY0G,EAAQM,IACjB,CACV,IAAK9G,EACH,MD7mCH,CACLhiB,KAAM+oB,GACN1f,KC2mCoCmf,ED1mCpClI,UAAW9f,EACXggB,OAAQhgB,GC4mCAqI,EACEoZ,EACI,mBACA,mBAKRpZ,EAAM,gBAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQQ,IAAwB,CAEpD,GADAR,EAAS1G,GAAY0G,EAAQQ,IACjB,CACV,IAAKhH,EACH,MDznCH,CACLhiB,KAAMyf,GACNpW,KCunCqCmf,EDtnCrClI,UAAW9f,GCynCHqI,EACEoZ,EACI,oBACA,oBAKRpZ,EAAM,iBAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQS,IAAmB,CAE/C,IAAMpJ,EAAOkG,GADbyC,EAAS1G,GAAY0G,EAAQS,KAE7B,GAAIpJ,EACF,gBD/pCeA,GACvB,MAAO,CACL7f,KAAMuf,GACNM,QC4pCaqJ,CAAiBrJ,GAGxBhX,EAAM,YAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQW,IAAwB,CAEpD,IAAMtJ,EAAOkG,GADbyC,EAAS1G,GAAY0G,EAAQW,KAE7B,GAAItJ,EACF,gBD5rCmBA,GAC3B,MAAO,CACL7f,KAAMqnB,GACNxH,QCyrCauJ,CAAqBvJ,GAG5BhX,EAAM,iBAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQa,IAAqB,CAEjD,IAAKtH,GADLyG,EAAS1G,GAAY0G,EAAQa,KAE3B,MD7sCD,CACLrpB,KAAMonB,IC+sCAve,EAAM,uBAKZ,SAAU2f,GACR,GAAI1jB,GAAkB0jB,EAAQc,IAAuB,CAEnD,IAAMzJ,EAAOkG,GADbyC,EAAS1G,GAAY0G,EAAQc,KAE7B,GAAIzJ,EAAM,CACR,GAAImC,GAAkBA,EAAepS,YACnC,gBD9qCiBiQ,EAAsByF,GACjD,MAAO,CACLtlB,KAAMupB,GACN1J,OACAyF,UACA9E,OAAQhgB,GCyqCOgpB,CACL3J,EACAA,EAAK7f,OAASqlB,IAIhBxc,EAAM,gBAIRA,EAAM,gBAKZ,SAAU2f,GACR,IAAKiB,GAAsB3hB,KAAK0gB,GAAS,CAEvC,IAAM3I,EAAOkG,GADbyC,EAASzG,GAAYyG,IAErB,GAAI3I,EACF,gBDnuCuBA,EAAsBmF,GACrD,MAAO,CACLhlB,KAAM6jB,GACNhE,OACAmF,OACAxE,OAAQhgB,GC8tCKkpB,CAAyB7J,EAAM4C,IAAc/B,IAGpD7X,EAAM,qBAMd8gB,GAAY,SAAUrQ,GACpB,KAAOA,GACL1S,EACE8gB,GACA,SAAUkC,GACR,IAAMjlB,EAAQilB,EAAMtQ,GACpB,GAAI3U,EAEF,OADA2U,EAAOxO,GAAawO,EAAM3U,EAAM5D,QACzBE,KAOjB4oB,GAAa,SAAUvQ,GACrB,GAA4B,MAAxBwQ,GAAcxQ,GAAe,CAS/BsJ,IAEA,IAAMvZ,EAAOyB,GAAawO,EAAM,GAE5BtZ,EAAO+pB,GAAiB1gB,GAAO2gB,EAAc/oB,EACjD,GAAIjB,IAASuf,GAAa,CACxB,IAAMvQ,EAAOoU,EAAUf,GACnBrT,GACFhP,EAAOgP,EAAKhP,KACZgqB,EAAcxpB,GAGdqI,EAAM,gBAIV,IAAMmF,EAAYkV,EAASljB,GACvBgO,GAAQgc,GA1xBC,SAAUC,GAUzB,IARA,IAEAC,EAEAC,EAEAC,EANIC,EAAmBJ,EAQhBzpB,IACD6pB,EAAY3Y,WACT0Y,GACCC,EAAYxV,aACPwV,EAAYxV,KAGvBsV,EAAcC,EAAU5pB,GAE1B0pB,EAAWG,EAAY/C,cAId+C,EAAY/C,KACnB+C,EAAcH,EAQbC,GACHjF,GAAamF,GA0vBXC,CAAetc,QAKjBpH,EACE2hB,GACA,SAAUqB,GACR,IAAM5b,EAAO4b,EAAMtQ,GACnB,GAAItL,EAEF,OADAmZ,GAASnZ,GACF/M,KAOjBspB,GAAa,WAOX,OAHA3oB,EAAQ4gB,EAAkB,IAGbzhB,GAEPa,EAAQb,GAA4C,MAAlC+oB,GAAc7Q,EAASrX,GACvC6gB,IAAc9B,GAChB2B,EAAY1gB,EAAQ,EAGpBiH,EAAM,iBAIJ4Z,IAAc/B,GAChB4B,EAAY1gB,EAGZiH,EAAM,iBAIVua,EAAUV,GAGV8H,GAAShI,GAETD,EAAiB1X,GAAeoO,EAAS,KAAMqJ,IAC/CE,EAAkB3X,GAAeoO,EAAS,KAAMqJ,KAGzBA,IACjBC,EAAiB,GAAKC,EAAkBD,GAErCgI,UAHT,GASO/pB,GAKXgqB,GAAW,SAAU5oB,GACd8gB,EAAW3hB,QACdoJ,EAAWwY,EAAW/gB,IAQnBpB,IACLgqB,GAASlI,IACTC,EAAiB1X,GAAeoO,EAAS,KAAMqJ,KACzBA,IAWpB,GATAG,EAAY/B,GAGZ8J,GAASjI,IAGTA,GAAkB,GAGGxhB,EAanB,GAZ+C,MAA3C+oB,GAAc7Q,EAASsJ,KACzBE,EAAY9B,GACZ4B,KAGFiI,GAASjI,GAETiI,GAAS/H,GAGTtY,EAAWuY,EAAYliB,GAEnB+hB,EAAiBxhB,EAInB,IAFAyhB,EAAkB3X,GAAeoO,EAAS,KAAMsJ,KAEzBA,GAGrB,KADAD,EAAYzX,GAAeoO,EAAS,KAAMsJ,IAC1B,GAAKC,EAAkBF,IACjCiI,KACF,WAKJ1hB,EAAM,iBAIRA,EAAM,qBAIRA,EAAM,eASZ,IAAK,IAAI7H,GAAI,EAAGypB,GAAS9H,EAAU5hB,OAAQC,GAAIypB,GAAQzpB,IAAK,EAC1DY,EAAQ+gB,EAAU3hB,KAGlBuhB,EAAiBI,EAAU3hB,GAAI,KAE7B2oB,GACE7e,GAAamO,EAASrX,EAAO2gB,IAKjCA,EAAiBI,EAAU3hB,GAAI,GAC/ByhB,EAAYE,EAAU3hB,GAAI,IAC1BwhB,EAAkBG,EAAU3hB,GAAI,KAG9BsY,EAAOyI,GACLjX,GAAamO,EAASsJ,EAAgBC,MAKtCqH,GAAWvQ,IAKbmJ,EAAYhC,GACZkJ,GACE7e,GAAamO,EAASrX,KAyB5B,OApBIwgB,EAAUrhB,SAOZ6hB,IAGMR,EAAUrhB,QACZ8H,EAAM,YAKRsZ,EAASphB,OAAS,GACpBojB,EAAchC,GAGTA,EA98CTN,GAAe,IAAI,UACnBA,GAAiB,MAAI,YACrBA,GAAqB,UAAI,YACzBA,GAAiB,MAAI,gBACrBA,GAAsB,WAAI,aAC1BA,GAAoB,SAAI,WACxBA,GAAoB,SAAI,WACxBA,GAAqB,UAAI,YACzBA,GAAqB,UAAI,YC5GlB,IAAMplB,GAAO,KAEPC,GAAQ,KAERguB,GAAQ,IAERC,GAAQ,IAERC,GAAO,IAEPC,GAAM,KAENC,GAAW,IAEXC,GAAM,IAENC,GAAQ,cA2BLC,GAASC,GACvB,MAAO,IAAI9T,EAAW8T,EAAQR,iBAGhBxoB,GAAQipB,GACtB,MAAO,IAAI/T,EAAW+T,EAAOT,iBAGfU,GAAO/hB,EAAc3J,GACnC,OAAU2J,MAAQ+N,EA/BpB,SAAkBrS,GAEhB,IAAIrF,EAAiB,GAAI2rB,EAAY7qB,EAgBrC,OAdAoG,EACE7B,EACA,SAAUumB,GACJxrB,EAAMwrB,IACRD,EAAYpqB,EACZ8K,EAAcrM,EAAM4rB,IAEZD,GACRtf,EAAcrM,EAAMhD,KAGxB8D,GAGKd,EAasB6rB,CAAS7rB,GAAOgrB,iBAG/BrjB,GAAS3I,GACvB,OAAO8sB,KAAKC,UAAU/sB,GCTxB,IAsDIgtB,GAGJC,GAzDMC,GAAuB,GAG7BC,GAAmC,GAEnCC,GAAgB,GAEhBC,GAA+B,IAE/BC,GAAmC,IAEnCC,GAAmC,IAEnCC,GAAyB,IAEzBC,GAAoB,IAEpBC,GAAyB,IAEzBC,GAAwB,IAExBC,GAAoB,IAEpBC,GAA0B,IAE1BC,GAAuB,IAEvBC,GAAqB,IAErBC,GAA4B,IAE5BC,GAA0B,IAE1BC,GAAyB,IAEzBC,GAAsB,IAEtBC,GAAuB,IAEvBC,GAAc,IAEdC,GAAiB,IAEjBC,GAAgB,IAEhBC,GAAc,IAEdC,GAAY,IAEZC,GAAY,IAEZC,GAAc,UAQd,SAASC,KA4BP,OA3BK5B,KACHA,GAAa,YACXtU,EAAW,CACT2U,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACCI,SACAF,IAEA3B,GAGT,SAAS8B,GAAiB3N,EAAsB4N,EAAkBC,EAAqBC,GACrF,gBC7HcC,EACd5f,EACA6f,EACAC,EACAC,EACAC,EACAP,EACAC,EACAC,EACAM,GAGA,IAAIvvB,EAEJwvB,EAAgBjtB,EAEhBktB,EAAoB,SAAUngB,GAC5B,OAAO4f,EACL5f,EACA6f,EACAC,EACAC,EACAC,EACAP,EACAC,EACAC,EACAntB,IAIJ,OAAQwN,EAAKhO,MAEX,KAAK2W,GACHjY,EAAQ0vB,GAAoBpgB,EAAiBtP,OAC7C,MAEF,KAAKwc,GACHxc,EAASsP,EAAe2H,SAAWwY,EAAmBngB,EAAeA,MACrE,MAEF,KAAK8H,GACHpX,EAAQyvB,EAAmBngB,EAAgB0H,MACtC1H,EAAgB2H,SACjBwY,EAAmBngB,EAAgB4H,OACvC,MAEF,KAAKmI,GACHrf,EAAQyvB,EAAmBngB,EAAiBlG,MACxCumB,GACAF,EAAmBngB,EAAiB2P,KACpC2Q,GACAH,EAAmBngB,EAAiB4P,IACxC,MAEF,KAAKjD,GAEHjc,EAAQ6vB,GADOvgB,EAAmBoI,MAAMoY,IAAIL,IAE5C,MAEF,KAAKtS,GACH,IAAM4S,EAAmB,GACzB7nB,EACGoH,EAAoBpI,KACrB,SAAUnD,EAAab,GACrBuI,EACEskB,EACAL,GAAmB3rB,GACjB6rB,GACAH,EAAmBngB,EAAoBwN,OAAO5Z,OAItDlD,EAAQgwB,GAAmBD,GAC3B,MAEF,KAAKxY,GACHiY,EAAgB1tB,EAEhB,IAAM2W,EAAanJ,EAEnBtP,EAAQiwB,GACNd,EACA,CACEO,GAAmBjX,EAAW9N,MAC9B8N,EAAWnB,OAAS4Y,GAAiBpwB,EACrC2Y,EAAW9S,OAAS,EAAI+pB,GAAmBjX,EAAW9S,QAAU7F,EAChEivB,EAASmB,GAAiBpwB,EAC1BkvB,EAAYkB,GAAiBpwB,EAC7BmvB,GAAgBnvB,IAGpB,MAEF,KAAK6X,GACH6X,EAAgB1tB,EAEV,IAAA4I,IAAE+M,SAAMvR,YAASwR,UAAOJ,WAAQ3R,WAEtCwqB,EAA2BzY,EAAQA,EAAMoY,IAAIL,GAAqB,GAIhEzvB,EAFEyX,EAAKnW,OAASiW,GAER0Y,GACNd,EACA,CACEc,GACEb,EACA,CACEM,GAAoBjY,EAAoB9M,MACxCklB,GAAkBM,KAGtB7Y,EAAS4Y,GAAiBpwB,EAC1B6F,EAAS,EAAI+pB,GAAmB/pB,GAAU7F,EAC1CivB,EAASmB,GAAiBpwB,EAC1BkvB,EAAYkB,GAAiBpwB,EAC7BmvB,GAAgBnvB,IAOZmwB,GACNZ,EAJK3X,EAKL,CACE+X,EAAkBhY,GAClB3X,EACA+vB,GAAkBM,GAClBpB,EAASmB,GAAiBpwB,GAS5B,CACE2vB,EAAkBhY,GAClBiY,GAAmBxpB,GACnBpG,EACAivB,EAASmB,GAAiBpwB,IAKhC,MAEF,QACE0vB,EAAgB1tB,EACR,IAAAd,SACRhB,EAAQiwB,GACNX,EACA,CACEG,EAAmBngB,EAAc3E,MACjC3J,EAAKqB,OACDwtB,GAAkB7uB,EAAK8uB,IAAIL,IAC3B3vB,EACJivB,EAASmB,GAAiBpwB,IAOlC,OAAKivB,EAKDQ,EACKC,EACHxvB,EAAQ,IAAM6nB,EACd7nB,EAICwvB,EACHxvB,EACAgwB,GAAmB,CAACnI,EAAgB+H,GAAkB5vB,IAbjDA,ED1CFowB,CACLjP,EACAkM,GACAC,GACAC,GACAC,GACAuB,EACAC,EACAC,GAIJ,SAASoB,GAAgBC,GACvB,IAAM9D,EAAmB,GAYzB,OAXA1gB,GACEwkB,EACA,SAAUtwB,EAAY+D,GAChB3C,EAAMpB,IACRyL,EACE+gB,EACAkD,GAAmB3rB,GAAO6rB,GAAkB5vB,KAK7CgwB,GAAmBxD,GAG5B,SAAS+D,GAAkBttB,EAAuB2pB,GAChD,OAAU3sB,OAAoB2sB,GAAO/nB,SAAqB5B,GAAU4B,OAGtE,SAAS2rB,GAAe5V,GACtB,MAAO,IAAIA,MAGb,SAAS6V,GAAoBtP,EAAsBxY,GACjD,IAAM3I,EAAQ8uB,GAAiB3N,GAC/B,OAAOxY,EACHsnB,GACAxB,GACA,CACEzuB,IAGFA,EAYN,SAAS0wB,GAAuBvP,GAC9B,OAAO2N,GAAiB3N,EAAM5e,EAAWA,EAAWmsB,IAGtD,SAASiC,GAAe3wB,EAAYmhB,EAA6BnO,GAC/D,OAAI5R,EAAMpB,GACD0vB,GAAmB1vB,GAGxBmhB,EACKsP,GAAoBtP,GAGzBnO,GACFia,GAAmBja,EAAS3Q,OAAS,EAC9BuuB,GAAkB5d,SAF3B,EAMF,SAAS4d,GAAkB5d,EAAkB4O,GAK3C,IAAMiP,EAAS7d,EAAS3Q,OAAS,IAAMuf,EAEvCnW,EAAWyhB,GAAW2D,GACtB,IAAM7wB,EAAQ0Y,EACZ1F,EAAS8c,IACP,SAAU1d,GACR,OAAOgb,GAAchb,EAAM9Q,MAAM8Q,KAGrCye,EAASC,GAAiBjC,IAI5B,OAFAnK,EAAUwI,IAEHltB,EAIT,SAAS+wB,GAA2B/d,EAAyB4O,GAC3D,GAAI5O,EAAU,CACZ,IAAM/P,EAAS2tB,GAAkB5d,EAAU4O,GAC3C,OAAO5O,EAAS3Q,OAAS,GAAKuf,EAC1B4O,GAAevtB,GACfA,GAiER,SAAS+tB,GAAc7gB,EAAcrG,EAAoB2d,EAAsBwJ,EAAuBjgB,GACpG,OAAOif,GACL7B,GACA,CAACje,EAAMrG,EAAK2d,EAAOwJ,EAAQjgB,IEjS/B,SAASkgB,GAAQrxB,EAAa8K,EAAc5G,EAAa/D,IAC1CH,EAAO8K,KAAU9K,EAAO8K,GAAQ,KACxC5G,GAAO/D,EF4VdotB,GAAc9I,IAAoB,SAAUhV,GAEpC,IAIN6hB,EAIAC,EAEAC,EAVMvnB,QAAKoH,gBAAa0C,UAAOd,YAASC,aAAUqB,aAAUwN,cAAWjX,SAAMmG,QAAK/M,QAAKmP,SAAMuU,UAAOzU,aAEpG7C,EAAkB,GAIlBmhB,EAAwB,GAMxB,GAAIxnB,IAAQ6W,EAAc,CACxB,IAAM3f,EAAO,CAAC0uB,GAAmB6B,GAA0B5mB,IAS3D,OARIqI,GACFvH,EACEzK,EACAuvB,GACEK,GAAkB5d,EAAUlR,KAI3BmuB,GAAiB5B,GAAartB,GA2EvC,OAxEAyK,EAAW0hB,GAAc5qB,GAErBklB,GACFvf,EACEuf,EACA,SAAU7X,GACRnE,EACE6lB,EACAlE,GAAcxd,EAAKtO,MAAMsO,MAON,KAAvBmL,GAAcjR,GAChBqnB,EAAYzB,GAAmBtjB,GAAatC,EAAK,IAGjDqG,EAAKrG,IAAM4lB,GAAmB5lB,GAG5B8J,IACFzD,EAAKyD,MAAQsc,IAGXpd,IACF3C,EAAK2C,QAAUod,IAGbnd,IACF5C,EAAK4C,SAAWmd,IAGd9b,IACFjE,EAAKiE,SAAW8b,IAGdpf,IACFX,EAAKW,IAAM6f,GAAe7f,EAAI9Q,MAAO8Q,EAAIqQ,KAAMrQ,EAAIkC,WAGjDjP,IACFoM,EAAKpM,IAAM4sB,GAAe5sB,EAAI/D,MAAO+D,EAAIod,KAAMpd,EAAIiP,WAGjDE,IACF/C,EAAK+C,KAAOud,GAAoBvd,EAAMpR,IAGpCoP,GACFf,EAAKe,YAAcgf,GACfld,IACFma,GAAaA,GAAa9qB,OAAS,GAAKP,EACxCuvB,EA1IN,SAA2Bre,GAEzB,IAAM/P,EAAiC,GAEvC+N,EAAgC,GAEhCwgB,EAAU,SAAU7mB,EAAc+M,GAE3B+Z,EAAY/Z,IAEfjM,EACEuF,EAFFrG,EAAO4mB,GAA0B5mB,KAEfqG,EAAMrG,GAAQ,IAC9B+M,IAuCN,GAjCAxP,EACE8K,EACA,SAAUZ,GAER,GAAIA,EAAM9Q,OAASgjB,GAAkB,CACnC,IAAMC,EAAUnS,EAChB,GAAImS,EAAQpP,KAOV,YANAqc,EACEjN,EAAQpP,KACRoP,EAAQza,MAAQ8W,EACZ2D,EAAQvR,SACR,CAACuR,IAOXiN,EAAQxJ,GAA0B,CAAC5V,MAKvCtG,GACEkF,EACA,SAAUgC,EAAerI,GAEvB1H,EAAO0H,GAAQ4lB,GACbK,GAAkB5d,EAAUlR,OAK7B4vB,GAAazuB,GAChB,OAAOotB,GAAgBptB,GAsFP0uB,CAAkB3e,KAG3BA,IACPia,GAAmBnrB,EACnBqrB,GAAaA,GAAa9qB,OAAS,GAAKuf,EACxCwP,EAAeR,GAAkB5d,EAAU4O,GACvCA,EACFwP,EAAeb,GAAkBa,IAGjCjhB,EAAK8C,KAAOme,EACZA,EAAetxB,IAInB4kB,EAAUyI,IAEH6D,GACLX,GAAgBlgB,GAChBghB,EACAM,EAAYH,GACRxxB,EACAywB,GACE7X,EAAW4Y,EAAazC,KAE9BuC,EACAC,IAKJjE,GAAcnM,IAAsB,SAAU3R,GAE5C,IAAMtP,EAAQsP,EAAKsX,QACfqJ,GACAnC,GACA,CACE4B,GAAmBpgB,EAAK3E,MACxBmkB,GAAiBxf,EAAK6R,KAAwBrf,EAAUA,KAG1D6uB,GAAerhB,EAAKtP,MAAOsP,EAAK6R,KAAM7R,EAAK0D,UAE/C,OAAOid,GACLvC,GACA,CACEgC,GAAmBpgB,EAAK3E,MACxB3K,KAMNotB,GAAc7L,IAAqB,SAAUjS,GAE3C,IAAMtP,EAAQsP,EAAKsX,QACfqJ,GACAnC,GACA,CACE4B,GAAmBpgB,EAAK3E,MACxBmkB,GAAiBxf,EAAK6R,KAAwBrf,EAAUA,GACxD4tB,GAAmBpgB,EAAKY,QAG1BygB,GAAerhB,EAAKtP,MAAOsP,EAAK6R,KAAM7R,EAAK0D,UAE/C,OAAOid,GACLtC,GACA,CACE+B,GAAmBpgB,EAAK3E,MACxB+kB,GAAmBpgB,EAAKY,MACxBlQ,KAMNotB,GAAchM,IAAsB,SAAU9R,GAEpC,IAAAjF,OAAIM,SAAM5G,QAAK/D,UAAOmhB,SAE9B,GAAI9W,IAAO2c,GACT,OAAOiJ,GACLrC,GACA,CAAC8B,GAAmB/kB,GAAO+kB,GAAmB1vB,KAIlD,GAAIqK,IAAO6e,EACT,OAAO+G,GACLpC,GACA,CAAC6B,GAAmB1vB,KAKxB,GAAIqK,IAAOyc,GACT,OAAOmJ,GACLlC,GACA,CACEe,GAAiB3N,EAAwBrf,EAAUA,KAKzD,IAAI8vB,EAAa1D,GAEjBltB,EAA+B,CAC7B0uB,GAAmB/kB,GACnB+kB,GAAmB3rB,GACnB2rB,GAAmB1vB,IA8DrB,OApDImhB,IAGEA,EAAK7f,OAASimB,IACZld,IAAO6c,KACT0K,EAAa5D,IAGfviB,EACEzK,EACA0uB,GAAqBvO,EAAwBxW,KAA8BA,OAGxE8mB,EAAatQ,EAAwBngB,OAExCyK,EACEzK,EACAuvB,GACE5B,GAAckB,GAAmB1O,EAAwBngB,KAAK8uB,IAAIY,KAClEhC,MAMCrkB,IAAO6c,IACd0K,EAAa3D,GACbxiB,EACEzK,EACA0uB,GAAmBvO,EAAKhK,OAGnB9M,IAAO+c,IAIVjG,EAAK7f,OAASgmB,KAChB7b,EAAWzK,EAAMlB,GACjB2L,EAAWzK,EAAMlB,GACjB2L,EACEzK,EACAuvB,GACE5B,GAAc+B,GAAuBvP,GACrCuN,OASHuB,GAAiB2B,EAAY5wB,IAItCosB,GAAcvC,IAAmB,SAAUvb,GACzC,OAAO2gB,GACL9B,GACA,CACEW,GAAiBxf,EAAK6R,KAAMrf,EAAUwN,EAAKsX,YAKjDwG,GAAcvL,IAAiB,SAAUvS,GAEvC,IAAMrM,EAASysB,GAAmBpgB,EAAK2D,MAEvC,OAAIoR,EAAW8I,MAAkB9I,EAAW6I,IACnC+C,GACLxC,GACA,CAACxqB,IAIEA,GAGTmqB,GAAcjI,IAAuB,SAAU7V,GAK7C,OAAI+U,EAAW8I,MAAkB9I,EAAW6I,KAtdZ/L,EAwd5B7R,EAAK6R,KAvdF8O,GACLxC,GACA,CACEgD,GAAoBtP,EAqdpB8L,OAIGwD,GACLnhB,EAAK6R,KACL8L,IA/dJ,IAAkC9L,GAoelCiM,GAAcvM,IAAe,SAAUvR,GACrC,OA1aF,SAASuiB,EAAYviB,EAAmBuZ,GAEhC,IAMN3J,EAEAjc,EARM+P,aAAU4O,cAAWzL,SAE3B/M,EAAOqnB,GAAoBnhB,EAAK6R,MAEhClC,EAAM8R,GAA2B/d,EAAU4O,GAqB3C,GAfIzL,EACF+I,EAAK/I,EAAK7U,OAASonB,GACfqI,GAA2B5a,EAAKnD,SAAUmD,EAAKyL,WAC/CiQ,EAAY1b,EAAgB0S,GAGzBA,IACP3J,EAAK8R,GACHX,GAAgB,CACdzd,UAAWsd,GACXjd,KAAM6e,OAKR1wB,EAAM6d,IAAQ7d,EAAM8d,GAAK,CAE3B,IAAM2R,EAASxM,EAAW6I,IAsB1B,OApBI2D,IACGzvB,EAAM6d,KACTA,EAAM6S,IAEH1wB,EAAM8d,KACTA,EAAK4S,KAWP7uB,EAPG7B,EAAM8d,GAGD9d,EAAM6d,GAIL7V,EAAOumB,GAAqB1Q,EAAM2Q,GAAkB1Q,EAHpD6S,GAAgB3oB,EAAO4oB,GAAgB9S,EAHvC9V,EAAO4oB,GAAgB/S,EAU3B4R,EACHL,GAAevtB,GACfA,EAIN,OAAO6uB,GAiXAD,CAAYviB,EAAMA,EAAKuZ,OAGhCuE,GAActM,IAAiB,SAAUxR,GAEvC,OAAO2gB,GACLzB,GACA,CAEE+B,GACEK,GAAkBthB,EAAK0D,SAAoB1D,EAAKsS,YAElDkN,GAAiBxf,EAAKmS,KAAM3f,GAC5BwN,EAAKoS,GAAKoN,GAAiBxf,EAAKoS,GAAI5f,GAAYhC,EAChDwP,EAAKqS,MAAQuO,GAAiBpwB,EAC9BwP,EAAKpM,MAAQwsB,GAAmBpgB,EAAKpM,OAASpD,KAMpDstB,GAAcrM,IAAoB,SAAUzR,GAE1C,OAAO2gB,GACL3B,GACA,CACEoB,GAAmBpgB,EAAK3E,MAExB4lB,GACEK,GAAkBthB,EAAK0D,SAAoB1D,EAAKsS,eAOxDwL,GAAc/C,IAAmB,SAAU/a,GAEzC,OAAO2gB,GACL1B,GACA,CACEmB,GAAmBpgB,EAAK3E,SG5rB9B,kBA2EE,WACEzE,EACA+rB,EACAlrB,EACAmrB,EACAC,EACAC,EACAC,GAGA,IAAM5nB,EAAWjJ,KAEjBiJ,EAASvE,QAAUA,EACnBuE,EAAS1D,MAAQA,EAEjB0D,EAASynB,KAAOA,EAEhBznB,EAAS1J,QAAUoxB,EAASpxB,QAC5B0J,EAAS0nB,SAAWA,EACpB1nB,EAAS2nB,OAASA,EAClB3nB,EAAS4nB,OAASA,EAElB5nB,EAAS6nB,OAAS,GAElB7nB,EAAS8nB,QAAU,SAAU9tB,EAASC,EAAS8tB,GAI7C,IAAMC,EAAWhoB,EAASzK,MAC1B0yB,EAAWjoB,EAASrC,IAAItG,GAEpB4wB,IAAaD,GACfN,EAASQ,KAAKzsB,EAASwsB,EAAUD,IAKrChoB,EAASmoB,eAAiB,CACxBX,OACAM,QAAS9nB,EAAS8nB,UAGhB9nB,EAASooB,OAASpB,EAAYS,KAChChqB,EACEgqB,EACA,SAAUY,GACRX,EAASY,MACPD,EACAroB,EAASmoB,kBAkHrB,OAlOSI,QAAP,SAAa9sB,EAAiBisB,EAA6BpnB,GAEzD,IAMAqnB,EAEAC,EARItrB,EAAQjF,EAEZmwB,EAAOnwB,EAEPowB,EAAiB,GA4BjB,GAtBIjxB,EAAQ8J,GACVqnB,EAASrnB,EAEF5C,EAAU4C,KACbkoB,EAAWloB,EAAQhE,SACrBA,EAAQgE,EAAQhE,OAEdksB,EAAWloB,EAAQknB,QACrBA,EAAOlnB,EAAQknB,MAGb/wB,EAAS6J,EAAQmnB,QACnBA,EAAOrnB,GAAYE,EAAQmnB,OAEzBjxB,EAAQ8J,EAAQ3C,OAClBgqB,EAASrnB,EAAQ3C,KAEfnH,EAAQ8J,EAAQvC,OAClB6pB,EAAStnB,EAAQvC,MAIjB4pB,EACF,OAAO,IAAIY,EAAS9sB,EAAS+rB,EAAMlrB,EAAOmrB,EAAMC,EAAUC,EAAQC,IA0FtEW,gBAAA,SAAIE,GAEI,IAEJd,EAFe5wB,YAEPT,EAFOS,aAKjB,GALiBA,KAKHuF,OAKT,GAAImsB,IAAU3f,GAVF/R,KAUuBqmB,GAGtC,GAbermB,KAaFqxB,MAbErxB,KAcJxB,MAAQyD,EAAQ2uB,EAAQrxB,OAE9B,CAhBUS,KAmBJoP,SAGT,IAAMuiB,EAAeH,EAASI,QAC9BJ,EAASI,QAvBI5xB,KAAAA,KAyBJxB,MAAQyD,EAAQ2uB,EAAQrxB,GAzBpBS,KA4BJmP,OAETqiB,EAASI,QAAUD,QA9BN3xB,KAMNxB,MAAQyD,EAAQ2uB,EAAQrxB,GA6BnC,OAnCiBS,KAmCDxB,OAGlBgzB,gBAAA,SAAIhzB,GACI,IAAEqyB,cAAQtxB,eACZsxB,GACFA,EAAOhxB,KAAKN,EAASf,IAWzBgzB,gBAAA,SAAIF,GACFtxB,KAAK8wB,OAAOQ,GAAOhxB,GAMrBkxB,iBAAA,WAEQ,IAAEV,cAAQJ,YAAMC,gBAAUS,sBAEhC9mB,GACEwmB,EACA,SAAU5qB,EAAQorB,GAChBrnB,EAAWymB,EAAMY,GACjBX,EAASY,MACPD,EACAF,KAONpxB,KAAK8wB,OAAS,IAOhBU,mBAAA,WAEQ,IAAEd,YAAMC,gBAAUI,eAExBrqB,EACEgqB,EACA,SAAUY,GACRX,EAASkB,QAAQP,EAAKP,IAExBzwB,GAGFowB,EAAK7vB,OAAS,oBC/OOixB,EAAkBptB,GAEzC,IAAIjD,EAgBJ,OAdAiF,EACEorB,EACA,SAAUntB,GACR,IAAM9D,EAASkxB,GAAkBrtB,EAASC,GAC1C,GAAI9D,GAAU,EAKZ,OAJAY,EAAS,CACP0H,KAAMxE,EACN6J,KAAM5D,GAAalG,EAAS7D,IAEvBE,IAKNU,cC1BgB6mB,EAAa5jB,GAEpC,GAAI4jB,GAAUxpB,GAAY4F,IAAYrB,EACpC,OAAOilB,EAGT,IAAM7mB,EAASuwB,GAAW1J,EAAQ5jB,GAClC,OAAIjD,EACKA,EAAOjD,WADhB,WCFsByzB,GACtBvtB,EACAwsB,EACAD,EACAiB,EACAvxB,GAGA,IAAMwwB,EAAO,SAAUgB,EAAoBC,EAAkBC,GAE3D,GAAID,IAAgBC,EAAa,CAE/B,IAAMC,EAAazS,GAAiBnb,EAASytB,GAE7CzrB,EACEwrB,EACA,SAAUK,GACJ3yB,EAAM4yB,GAAuBF,EAAYC,KAC3C5xB,EACE4xB,EAAcD,EAAYF,EAAaC,KAM/CJ,GAAcK,EAAYF,EAAaC,EAAaH,EAAoBvxB,eCtB5EuwB,EACAD,EACAtwB,GAGA,IAAM8xB,EAAcvuB,EAAUgtB,GAE9BwB,EAAcxuB,EAAU+sB,GAExB,GAAIwB,GAAeC,EAMjB,OALA/xB,EACEgyB,EACAF,EAAcvB,EAASrwB,OAASvC,EAChCo0B,EAAczB,EAASpwB,OAASvC,GAE3BgC,GDaTsyB,CAAW1B,EAAUD,EAAUE,aE5B/BD,EACAD,EACAtwB,GAGA,IAAMkyB,EAAanzB,EAASwxB,GAE5B4B,EAAapzB,EAASuxB,GAEtB,GAAI4B,GAAcC,EAAY,CAE5B,IAAMC,EAAYF,EAAa3B,EAASrwB,OAASvC,EAEjD00B,EAAYF,EAAa7B,EAASpwB,OAASvC,EAE3CqC,EACEgyB,EACAI,EACAC,GAGF,IAAK,IAAIlyB,EAAI,EAAGD,EAASoyB,KAAKppB,IAAIkpB,GAAa,EAAGC,GAAa,GAAIlyB,EAAID,EAAQC,IAC7EH,EACE,GAAKG,EACLowB,EAAWA,EAASpwB,GAAKxC,EACzB2yB,EAAWA,EAASnwB,GAAKxC,GAI7B,OAAOgC,GFAJ4yB,CAAUhC,EAAUD,EAAUE,aG5BnCD,EACAD,EACAtwB,GAGA,IAAMwyB,EAAcxsB,EAAUuqB,GAE9BkC,EAAczsB,EAAUsqB,IAEpBkC,GAAeC,KAEjBlC,EAAWiC,EAAcjC,EAAWhjB,EACpC+iB,EAAWmC,EAAcnC,EAAW/iB,EAEhCilB,GACF7oB,GACE4mB,EACA,SAAU1yB,EAAY+D,GAChB/D,IAAUyyB,EAAS1uB,IACrB5B,EAAS4B,EAAK/D,EAAOyyB,EAAS1uB,MAMlC6wB,GACF9oB,GACE2mB,EACA,SAAUzyB,EAAY+D,GAChB/D,IAAU0yB,EAAS3uB,IACrB5B,EAAS4B,EAAK2uB,EAAS3uB,GAAM/D,MHDlC60B,CAAWnC,EAAUD,EAAUE,eI/BpCzsB,EACAwsB,EACAD,EACAF,EAAiBuC,EACjB3yB,GAGA,IAAI4yB,EAGJjpB,GACEymB,EACA,SAAU7qB,EAAGstB,GAGX,GAAIC,GAAoBD,GAOlB5zB,EAAM4yB,GAAuB9tB,EAAS8uB,IACxC7yB,EACE6yB,EAAc9uB,EAASwsB,EAAUD,GAG5BqC,IACHC,EACFtpB,EACEspB,EACAC,GAIFD,EAAgB,CAACC,QApBvB,CA6BA,IAAM3yB,EAASkxB,GAAkByB,EAAc9uB,GAC/C,GAAI7D,GAAU,EAAG,CAEf,IAAMsxB,EAAavnB,GAAa4oB,EAAc3yB,GAC9CuxB,EAAcsB,GAAUxC,EAAUiB,GAClCE,EAAcqB,GAAUzC,EAAUkB,GAE9BC,IAAgBC,GAClB1xB,EACE6yB,EAAcA,EAAcpB,EAAaC,OAY/CkB,GACFtB,GAAcvtB,EAASwsB,EAAUD,EAAUsC,EAAe5yB,eCpErCuF,EAAW1G,EAAoB+J,GAEtD,GAAIA,EAAQoqB,OAASn0B,EASnB,OAHA+J,EAAQoqB,QAGDn0B,EAAK,KAAOA,EAAK,GCX5B,IAAMo0B,GAAgC,CACpC7C,QAASlpB,eAQc0B,EAA+CsqB,GAEtE,OAAIp0B,EAAQ8J,IACVqqB,GAAc7C,QAAUxnB,EACxBqqB,GAAcC,UAAYA,IAAcvzB,EACjCszB,IAGLrqB,GAAYA,EAA2BwnB,QAClCxnB,OAIPW,GAAa,2CCejB,kBAoBE,WAAYyE,EAAkBpP,GAEXS,KAER2O,KAAOA,GAAQ,GAFP3O,KAGRT,QAAUA,GAHFS,KAAAA,KAIR8S,SAAW,IAAIpH,GAJP1L,KAMR8zB,YAAc,IAAI/qB,GANV/I,KAOR+zB,aAAe,IAAIhrB,GAPX/I,KAQRg0B,aAAe,GAogB5B,OAxfEC,gBAAA,SACEvvB,EACAwC,EACAsmB,GAGM,IAiBF/rB,EAA4BpD,EAfhC61B,EAAkB1C,GAASI,QAEzBjjB,EAJe3O,UAITm0B,EAJSn0B,cAICo0B,EAJDp0B,0BAOjB,GAAI0E,IAAYrB,EACd,OAAOsL,EAWT,GANIulB,IAAoB1G,GACtB0G,EAAgBG,IAAI3vB,GAKlByvB,EAAU,CAEZ,GADA91B,EAAS81B,EAASzvB,GAEhB,OAAOrG,EAAOuI,MAEhB,GAAIwtB,EAAsB,CACxB,IAAM3vB,EAAQ6vB,GAAUF,EAAsB1vB,GAC1CD,GAASA,EAAM+J,OACjB/M,EAASuwB,GACPmC,EAAS1vB,EAAM0E,MAAMvC,MACrBnC,EAAM+J,QAUd,OAJK/M,IACHA,EAASuwB,GAAWrjB,EAAMjK,IAGrBjD,EAASA,EAAOjD,MAAQ0I,GAUjC+sB,gBAAA,SACEvvB,EACAlG,GAGA,IAAMyK,EAAWjJ,KAEf2O,SAAMwlB,aAAUC,yBAElBG,EAAW,SAAUrD,EAAexsB,GAElC,IAAMusB,EAAWhoB,EAASrC,IAAIlC,GAC9B,GAAIwsB,IAAaD,EAAjB,CAIA,IAAI5yB,EAEJ,GAAI81B,KACF91B,EAAS81B,EAASzvB,KAEhBrG,EAAO2I,IAAIkqB,GAETkD,GAAsB,CACxB,IAAM3vB,EAAQ6vB,GAAUF,EAAsB1vB,GAC9C,GAAID,GAASA,EAAM+J,OACjBnQ,EAAS81B,EAAS1vB,EAAM0E,OACZ,CACV,IAAMqrB,EAAcn2B,EAAOuI,MACvBD,EAAU6tB,IACZC,GAAWD,EAAa/vB,EAAM+J,KAAM0iB,IAOzC7yB,GACHo2B,GAAW9lB,EAAMjK,EAASwsB,GAG5BjoB,EAASkoB,KAAKzsB,EAASwsB,EAAUD,KAI/B/sB,EAAUQ,GACZ6vB,EAAS/1B,EAAOkG,GAETiC,EAAUjC,IACjB4F,GAAY5F,EAAsB6vB,IAYtCN,iBAAA,SACEvvB,EACAwsB,EACAD,GAGA,IAAMhoB,EAAWjJ,KAEf8zB,gBAAaC,iBAAcC,iBAO7BV,EAAyC,KAA3B/Z,GAAc7U,GAE5BgwB,GACEhwB,EAASwsB,EAAUD,EACnB6C,EAAYhrB,UAAWwqB,EACvB,SAAUE,EAAsB9uB,EAAiBwsB,EAAeD,GAC9D6C,EAAYa,KAAKnB,EAAc,CAACtC,EAAUD,EAAUvsB,MAgBxDgwB,GACEhwB,EAASwsB,EAAUD,EACnB8C,EAAajrB,UAAWwqB,EACxB,SAAUE,EAAsB9uB,EAAiBwsB,EAAeD,GAE9DvqB,EACEqtB,EAAajrB,UAAU0qB,GACvB,SAAUvyB,GACPA,EAAK0yB,UAIF,IAAAiB,gDACHnrB,EAAUmrB,EAAUpB,IACvBvpB,EAAW2qB,EAAUpB,GAGlBvqB,EAAS4rB,UACZ5rB,EAAS4rB,QAAUv0B,EACnB2I,EAAS6J,SAASpC,OAChB,WACMzH,EAAS4rB,UACX5rB,EAAS4rB,QAAUv2B,EACnB2K,EAAS6rB,mBAavBb,sBAAA,WAEQ,IAAAhrB,EAAWjJ,KAEf+zB,iBAAcC,iBAEhB/qB,EAAS+qB,aAAe,GAExB1pB,GACE0pB,EACA,SAAUe,EAAqBrwB,GAE7B,IAAMlF,EAAO,CAACyJ,EAASrC,IAAIlC,GAAUqwB,EAAOv2B,MAAOkG,GAKnDgC,EACEquB,EAAOH,SACP,SAAUpB,GACRO,EAAaY,KAAKnB,EAAch0B,EAAMw1B,SAehDf,wBAAA,SACEvvB,EACA6E,GAGA,IAEA4qB,EAAW3C,GAASyD,MAAMvwB,EAFT1E,KAE4BuJ,GAE7C,GAAI4qB,EASF,OAben0B,KAMDm0B,WANCn0B,KAOJm0B,SAAW,IAPPn0B,KAUNm0B,SAASzvB,GAAWyvB,EAVdn0B,KAWNo0B,qBAAuBc,GAXjBl1B,KAWsCm0B,SAAU7zB,GAExD6zB,GAWXF,2BAAA,SACEvvB,GAGM,IAEJyvB,EAFen0B,cAIbm0B,GAAYpiB,GAAWoiB,EAAUzvB,YAC5ByvB,EAASzvB,GALD1E,KAMNo0B,qBAAuBc,GAAYf,EAAU7zB,KAY1D2zB,kBAAA,SACEvvB,EACAqsB,EACA8C,GAGA,IAAM5qB,EAAWjJ,KAEfT,YAASu0B,gBAAaC,iBAExB5kB,EAAO,SAAUzK,EAAiB6E,GAEhC,IAAM4rB,EAAU5rB,EAAQknB,KAAOqD,EAAcC,EAG7CrqB,EAA2B,CACzBpK,GAAIiK,EAAQwnB,QACZpnB,IAAKpK,EACLo0B,MAAO,GAGLpqB,EAAQ2F,OACVxF,EAASG,IAAM,GAGjBsrB,EAAQC,GAAG1wB,EAASgF,GAEhBH,EAAQsqB,WACV5xB,EACEsH,EAAQwnB,QACRxxB,EACA,CACE0J,EAASrC,IAAIlC,GACbpG,EACAoG,KAOJR,EAAUQ,GACZyK,EACEzK,EACA2wB,GAAqBtE,EAAS8C,IAKlCvpB,GACE5F,EACA,SAAU6E,EAAwC7E,GAChDyK,EAAKzK,EAAS2wB,GAAqB9rB,OAYzC0qB,oBAAA,SACEvvB,EACAqsB,GAEA/wB,KAAK8zB,YAAYhqB,IAAIpF,EAASqsB,GAC9B/wB,KAAK+zB,aAAajqB,IAAIpF,EAASqsB,IAWjCkD,mBAAA,SAAOvvB,GACL,IAAMlG,GAASwB,KAAK4G,IAAIlC,GAExB,OADA1E,KAAKgH,IAAItC,EAASlG,GACXA,GAYTy1B,qBAAA,SAASvvB,EAAiB4U,EAAezP,GACvC,IAAMrL,EAAQ0mB,GAASllB,KAAK4G,IAAIlC,GAAU,IAAM4U,GAAQ,GACxD,IAAK9V,EAAUqG,IAAQrL,GAAUqL,EAE/B,OADA7J,KAAKgH,IAAItC,EAASlG,GACXA,GAaXy1B,qBAAA,SAASvvB,EAAiB4U,EAAegc,GACvC,IAAM92B,EAAQ0mB,GAASllB,KAAK4G,IAAIlC,GAAU,IAAM4U,GAAQ,GACxD,IAAK9V,EAAU8xB,IAAQ92B,GAAU82B,EAE/B,OADAt1B,KAAKgH,IAAItC,EAASlG,GACXA,GAWXy1B,mBAAA,SAAOvvB,EAAiBzD,EAAWS,GAEjC,IAAImD,EAAO7E,KAAK4G,IAAIlC,GAGZ7D,GAFRgE,EAAQnF,EAASmF,GAAawE,GAAYxE,GAAjB,WAGzB,GAAInD,IAAUpB,GAAYoB,IAAUb,EAClCgE,EAAKvD,KAAKL,QAEP,GAAIS,IAAUX,GAAuB,IAAVW,EAC9BmD,EAAK1D,QAAQF,OAEV,CAAA,KAAIS,EAAQ,GAAKA,EAAQb,GAI5B,OAHAgE,EAAK/C,OAAOJ,EAAO,EAAGT,GAQxB,OAFAjB,KAAKgH,IAAItC,EAASG,GAEXvE,GAUT2zB,mBAAA,SAAOvvB,EAAiBzD,GACtB,OAAOjB,KAAKu1B,OAAO7wB,EAASzD,EAAMX,IASpC2zB,oBAAA,SAAQvvB,EAAiBzD,GACvB,OAAOjB,KAAKu1B,OAAO7wB,EAASzD,EAAMF,IASpCkzB,qBAAA,SAASvvB,EAAiBhD,GACxB,IAAImD,EAAO7E,KAAK4G,IAAIlC,GACpB,GAAIhF,EAASmF,IACRnD,GAAS,GACTA,EAAQmD,EAAKhE,OAKhB,OAHAgE,EAAOwE,GAAYxE,IACd/C,OAAOJ,EAAO,GACnB1B,KAAKgH,IAAItC,EAASG,GACXvE,GAUX2zB,mBAAA,SAAOvvB,EAAiBzD,GACtB,IAAI4D,EAAO7E,KAAK4G,IAAIlC,GACpB,GAAIhF,EAASmF,IAEP2wB,EADJ3wB,EAAOwE,GAAYxE,GACI5D,GAErB,OADAjB,KAAKgH,IAAItC,EAASG,GACXvE,GAWb2zB,iBAAA,SAAQtlB,EAASlI,GACf,OAAO4C,GAAYsF,EAAMlI,IAM3BwtB,oBAAA,WACmBj0B,KACR8zB,YAAYhqB,MADJ9J,KAER+zB,aAAajqB,MAFL9J,KAGR8S,SAAS7M,QAClBwvB,GAJiBz1B,YCrjBjB01B,GAAY,cAIhBC,GAAc,SAAUC,GACtB,IAAM9nB,EAAQ+nB,EAA0BC,cAAcF,GACtD,GAAI9nB,EACF,OAAOA,GAIXioB,GAAmB,SAAUjoB,EAAuChO,EAAc4J,GAChFoE,EAAKioB,iBAAiBj2B,EAAM4J,EAAU3I,IAGxCi1B,GAAsB,SAAUloB,EAAuChO,EAAc4J,GACnFoE,EAAKkoB,oBAAoBl2B,EAAM4J,EAAU3I,IAI3Ck1B,GAAW,SAAUnoB,EAAmBooB,GACtCpoB,EAAKqoB,UAAU9B,IAAI6B,IAGrBE,GAAc,SAAUtoB,EAAmBooB,GACzCpoB,EAAKqoB,UAAUt0B,OAAOq0B,IAGxBG,GAAc,SAAUvO,EAAYha,GAClC,OAAOga,GAIP,GAAI+N,IAGGA,EAAaS,gBAAgBH,YAChCF,GAAW,SAAUnoB,EAAmBooB,GACtC,IAAMK,EAAUzoB,EAAKooB,UAAUpxB,MAAM0xB,IAChC/sB,EAAU8sB,EAASL,KACtBjsB,EAAWssB,EAASL,GACpBpoB,EAAKooB,UAAYhf,EAAWqf,EAASC,MAGzCJ,GAAc,SAAUtoB,EAAmBooB,GACzC,IAAMK,EAAUzoB,EAAKooB,UAAUpxB,MAAM0xB,IACjChB,EAAae,EAASL,KACxBpoB,EAAKooB,UAAYhf,EAAWqf,EAASC,QAQpCX,EAAaE,kBAAkB,CAIlCA,GAAmB,SAAUjoB,EAAWhO,EAAc4J,GjDZnC,UiDab5J,EACFi2B,GACEjoB,EALkB,iBAQlBpE,EAAS+sB,IAAW,SAAU3O,GACxBA,EAAM4O,eAAiBrQ,KACzByB,EAAQ,IAAI5nB,EAAY4nB,IAClBhoB,KjDrBG,QiDsBTmC,EAAQyH,EAAU1J,KAAM8nB,MjDjBd,WiDsBThoB,GAA6B62B,GAAa7oB,GACjDioB,GACEjoB,EjDlCa,QiDoCbpE,EAAS+sB,IAAW,SAAU3O,IAC5BA,EAAQ,IAAI5nB,EAAY4nB,IAClBhoB,KjD5BM,SiD6BZmC,EAAQyH,EAAU1J,KAAM8nB,KAK5Bha,EAAK8oB,YAAY,KAAK92B,EAAQ4J,IAIlCssB,GAAsB,SAAUloB,EAAWhO,EAAc4J,GjD3CtC,UiD4Cb5J,GACFk2B,GAAoBloB,EAnCA,iBAmCuBpE,EAAS+sB,YAC7C/sB,EAAS+sB,KjDzCA,WiD2CT32B,GAA6B62B,GAAa7oB,IACjDkoB,GAAoBloB,EjDtDL,QiDsD4BpE,EAAS+sB,YAC7C/sB,EAAS+sB,KAGhB3oB,EAAK+oB,YAAY,KAAK/2B,EAAQ4J,IAIlC,IAAMitB,GAAe,SAAU7oB,GAC7B,MAAwB,UAAjBA,EAAKmV,UACQ,UAAdnV,EAAKhO,MAAkC,aAAdgO,EAAKhO,OAGhCg3B,cAQJ,WAAYhP,EAAc/E,GAExBgU,GAAc/2B,KAAM8nB,GAEpB9nB,KAAKg3B,cAAgBjU,EACrB/iB,KAAK3B,OAASypB,EAAMmP,YAAclU,EAClC/iB,KAAKD,cAAgB+nB,EAYzB,OAREoP,2BAAA,WACEl3B,KAAKD,cAAco3B,YAAcp2B,GAGnCm2B,4BAAA,WACEl3B,KAAKD,cAAcq3B,aAAe92B,QAMtCo1B,GAAY,YAEZW,GAAc,SAAUvO,EAAO/E,GAC7B,OAAO,IAAI+T,GAAQhP,EAAO/E,IAG5B4S,GAAc,SAAUC,GAEa,KAA/Brc,GAAcqc,EAAU,GAC1BA,EAAWhrB,GAAagrB,EAAU,GAGlC1rB,GAAa,4DAEf,IAAM4D,EAAQ+nB,EAA0BwB,eAAezB,GACvD,GAAI9nB,EACF,OAAOA,GAWnB,IAAM0oB,GAAkB,IAKxBC,GAAU,WAmBVa,GAAa,CACXC,IAAKC,8BAKPC,GAAmD,GAEnDC,GAAc,CAEZvlB,cAAA,SAAc7J,EAAa8J,GACzB,OAAOA,EACFyjB,EAA0B8B,gBAAgBL,GAAWC,IAAKjvB,GAC1DutB,EAA0B1jB,cAAc7J,IAG/CqJ,WAAA,SAAWF,GACT,OAAQokB,EAA0B+B,eAAenmB,IAGnDG,cAAA,SAAcH,GACZ,OAAQokB,EAA0BjkB,cAAcH,IAGlDjD,KAAA,SAAKV,EAAmB3E,EAAc3K,GACpC,GAAIoB,EAAMpB,GACRi2B,GAAW3mB,EAAM3E,EAAM3K,EAAOuC,OAE3B,CACH,IAAMwsB,EAASyE,GAAWlkB,EAAM3E,GAChC,GAAIokB,EACF,OAAOA,EAAO/uB,QAKpBiQ,WAAA,SAAWX,EAAmB3E,EAAcuF,GAC1C+lB,GACE3mB,EACA3E,EACAuF,IAASqW,GACLhkB,EACAsC,EACJtC,IAIJqN,KAAA,SAAKN,EAAmB3E,EAAc3K,GACpC,GAAIoB,EAAMpB,GACRsP,EAAK+pB,aAAa1uB,EAAM3K,OAErB,CAEH,IAAMs5B,EAAQhqB,EAAKiqB,aAAa5uB,GAChC,GAAI2uB,GAASh5B,EACX,OAAOg5B,IAKbzpB,WAAA,SAAWP,EAAmB3E,GAC5B2E,EAAKkqB,gBAAgB7uB,IAGvBsH,OAAA,SAAOF,EAAkBzC,EAAYmqB,GACnC1nB,EAAWD,aAAaxC,EAAMmqB,IAGhCvnB,OAAA,SAAOH,EAAkBzC,GACvByC,EAAW2nB,YAAYpqB,IAGzB9K,QAAA,SAAQuN,EAAkBzC,EAAY+Y,GACpCtW,EAAWyU,aAAalX,EAAM+Y,IAGhChlB,OAAA,SAAO0O,EAAkBzC,GACvByC,EAAW4nB,YAAYrqB,IAGzB+C,OAAA,SAAO/C,GACG,IAAAyC,eACR,GAAIA,EACF,OAAOA,GAIXoE,KAAA,SAAK7G,GACK,IAAAsqB,gBACR,GAAIA,EACF,OAAOA,GAIXC,KAAM1C,GAENrtB,IAAA,SAAIwF,GACF,GAAsB,IAAlBA,EAAKwqB,SACP,OAAOnQ,GAAcra,EAAqBmV,UAI9CxR,KAAA,SAAK3D,EAAY2D,EAAeH,EAAmBC,GACjD,IAAI3R,EAAM6R,GAiBR,OAAO3D,EAAK4nB,IAfNpkB,GAAWS,GAAWjE,EAvHpB,cAwHJA,EAAgB,WAAEyqB,QAAU9mB,GAGxBF,IACDzD,EAA2BtP,MAAQiT,GAEtC3D,EAAK4nB,IAAajkB,IAY1BC,KAAA,SAAK5D,EAAe4D,EAAeJ,EAAmBC,GACpD,IAAI3R,EAAM8R,GAiBR,OAAO5D,EAAc,UAffwD,GAAWS,GAAWjE,EA7IpB,cA8IJA,EAAgB,WAAEyqB,QAAU7mB,GAGxBH,IACDzD,EAA2BtP,MAAQkT,GAEtC5D,EAAc,UAAI4D,IAY1BukB,YAEAG,eAEAhB,GAAA,SAAGtnB,EAAuChO,EAAc4J,GAEtD,IAAMyrB,EAAmBrnB,EAAK2oB,MAAa3oB,EAAK2oB,IAAW,IAAI1tB,IAE/DyvB,EAAkBrD,EAAQqD,kBAAoBrD,EAAQqD,gBAAkB,IAGxE,IAAKA,EAAgB14B,GAAO,CAG1B,IAAM24B,EAAUhB,GAAc33B,GAG9B44B,EAAiB,SAAU5Q,GAEzB,IAAM6Q,EAAc7Q,aAAiB5nB,EACjC4nB,EACA,IAAI5nB,EAAY4nB,EAAMhoB,KAAMu2B,GAAYvO,EAAOha,IAE/C6qB,EAAY74B,OAASA,IACvB64B,EAAY74B,KAAOA,GAGrBq1B,EAAQR,KAAK70B,EAAM,CAAC64B,KAItBH,EAAgB14B,GAAQ44B,EAEpBD,EACFA,EAAQrD,GAAGtnB,EAAM4qB,GAGjB3C,GAAiBjoB,EAAMhO,EAAM44B,GAKjCvD,EAAQC,GAAGt1B,EAAM4J,IAGnBI,IAAA,SAAIgE,EAAuChO,EAAc4J,GAEjD,IAAAyrB,EAAmBrnB,EAAK2oB,IAE5B3tB,cAAW0vB,oBAMb,GAHArD,EAAQrrB,IAAIhK,EAAM4J,GAGd8uB,IAAoBrD,EAAQpzB,IAAIjC,GAAO,CAEzC,IAAM24B,EAAUhB,GAAc33B,GAE9B44B,EAAiBF,EAAgB14B,GAE7B24B,EACFA,EAAQ3uB,IAAIgE,EAAM4qB,GAGlB1C,GAAoBloB,EAAMhO,EAAM44B,UAG3BF,EAAgB14B,GAIrBowB,GAAapnB,KACfgF,EAAK2oB,IAAWn4B,IAKpBs6B,gBAAA,SAAgB94B,EAAc+4B,GAEtBpB,GAAc33B,IAChBg5B,GAAa,kBAAkBh5B,mBAEjCi5B,GAAY,kBAAkBj5B,oBAEhC23B,GAAc33B,GAAQ+4B,gBC1aDv5B,EAAc05B,EAAenF,GAEpD,IAAIoF,EAEJ,OAAO,WAEL,IAAKA,EAAO,CAEV,IAAMC,EAAOC,EAAc5uB,WACvBspB,GACF5xB,EAAQ3C,EAAIhB,EAAe46B,GAG7BD,EAAQztB,WACN,WACEytB,EAAQ36B,EACHu1B,GACH5xB,EAAQ3C,EAAIhB,EAAe46B,IAG/BF,KD2ZRvB,GAA6B,MAAI,CAC/BrC,GAAA,SAAGtnB,EAAuCpE,GACxC,IAAI0vB,EAASr4B,EACb22B,GAAOtC,GAAGtnB,EAxPM,mBAwPmBpE,EAA0B,iBAAI,WAC/D0vB,EAAS94B,IAEXo3B,GAAOtC,GAAGtnB,EAtPI,iBAsPmBpE,EAAwB,eAAI,SAAUoe,GACrEsR,EAASr4B,EACT2I,EAASoe,KAEXiO,GAAiBjoB,EjDpYM,QiDoYiBpE,EAAwB,MAAI,SAAUoe,GACvEsR,GACH1vB,EAASoe,MAIfhe,IAAA,SAAIgE,EAAuCpE,GACzCguB,GAAO5tB,IAAIgE,EAtQK,mBAsQoBpE,EAA0B,kBAC9DguB,GAAO5tB,IAAIgE,EAlQG,iBAkQoBpE,EAAwB,gBAC1DssB,GAAoBloB,EjD7YG,QiD6YoBpE,EAAwB,OACnEA,EAA0B,iBAC1BA,EAAwB,eACxBA,EAAwB,MAAIpL,IEpchC,IAAM2Q,GAA4B,CAChCE,KAAA,SAAKrB,EAAyBmB,EAAsBrB,GAE5C,IAAAzE,SAAMkwB,YAAyBtR,SAErC,GAAKsR,EAAL,CAIA,GAAItR,EAAM,CAER,IAAMvpB,EAAQupB,EAAK5e,IAAS4e,EAAK1kB,GAE7B7E,IAAU8B,EACZ6I,EnD2CoB,SmDzCb3K,EAAQ,IACf66B,EAAUC,GACRD,EACA76B,EnD4BiB,UmDzBjB2K,GnDoBe,QmDpBaA,IAM9ByE,EAAM8B,aAEP5B,EAAasnB,GAAGjsB,EAAMkwB,GACvBzrB,EAAMe,KAAKM,EAAU1M,KAAO,WACzBuL,EAAahE,IAAIX,EAAMkwB,MAM1B1rB,GAAIynB,GAAGtnB,EAAqB3E,EAAMkwB,GAClCzrB,EAAMe,KAAKM,EAAU1M,KAAO,WAC1BoL,GAAI7D,IAAIgE,EAAqB3E,EAAMkwB,OAOzCjqB,OAAA,SAAOtB,EAAyBmB,EAAsBrB,GACpD3L,EAAQ2L,EAAMe,KAAKM,EAAU1M,QClCjC,SAASg3B,GAAiBj6B,EAAcyoB,GAEtC,OAAOA,GAAQA,IAASznB,EACpBg5B,GAASh6B,EAAIyoB,GACbzoB,EAGN,IAAMk6B,GAA8B,CAClCxyB,IAAA,SAAI8G,EAAwBtP,GAC1BsP,EAAKtP,MAAQ2I,GAAS3I,IAExBiyB,KAAA,SAAK3iB,EAAwBpJ,EAAiBnF,GAC5CA,EAAQyH,IAAItC,EAASoJ,EAAKtP,QAE5B2K,KAAMkd,GAyCRoT,GAA+B,CAC7BzyB,IAAA,SAAI8G,EAAyBtP,GAC3BkI,EACEyyB,EAAcrrB,EAAKvE,SACnBuE,EAAK4rB,SACD,SAAUC,GACVA,EAAOC,SAAWnwB,EAAUjL,EAAOm7B,EAAOn7B,MAAOuC,IAEjD,SAAU44B,EAA2Bj4B,GACrC,GAAIi4B,EAAOn7B,OAASA,EAElB,OADAsP,EAAK+rB,cAAgBn4B,EACdX,KAKjB0vB,KAAA,SAAK3iB,EAAyBpJ,EAAiBnF,GACrC,IAAAgK,YACR,GAAIuE,EAAK4rB,SAAU,CACjB,IAAMI,EAAmB,GACzBpzB,EACEyyB,EAAc5vB,GACd,SAAUowB,GACJA,EAAOC,UACT3vB,EACE6vB,EACAH,EAAOn7B,SAKfe,EAAQyH,IAAItC,EAASo1B,QAGrBv6B,EAAQyH,IACNtC,EACA6E,EAAQuE,EAAK+rB,eAAer7B,QAIlC2K,KAAMkd,GAGR0T,GAAa,CACXC,MAlF4B,CAC5BhzB,IAAA,SAAI8G,EAAwBtP,GAC1BsP,EAAKmsB,QAAUnsB,EAAKtP,QAAU2I,GAAS3I,IAEzCiyB,KAAA,SAAK3iB,EAAwBpJ,EAAiBnF,GACxCuO,EAAKmsB,SACP16B,EAAQyH,IAAItC,EAASoJ,EAAKtP,QAG9B2K,KAAM,WA0EN+wB,SAvE+B,CAC/BlzB,IAAA,SAAI8G,EAAwBtP,GAC1BsP,EAAKmsB,QAAUv6B,EAASlB,GACpBiL,EAAUjL,EAAOsP,EAAKtP,MAAOuC,KAC3BvC,GAERiyB,KAAA,SAAK3iB,EAAwBpJ,EAAiBnF,GAC5C,IAAMf,EAAQe,EAAQqH,IAAIlC,GACtBhF,EAASlB,GACPsP,EAAKmsB,QACP16B,EAAQmR,OAAOhM,EAASoJ,EAAKtP,OAG7Be,EAAQ46B,SACNz1B,EACAsiB,EAAcxoB,EAAOsP,EAAKtP,MAAOuC,IAKrCxB,EAAQyH,IAAItC,EAASoJ,EAAKmsB,UAG9B9wB,KAAM,YAmDR8F,GAA4B,CAE1BC,KAAM5O,EAEN6O,KAAA,SAAKrB,EAAyBmB,EAAsBrB,GAE5C,IAMN5G,EAEAypB,EAEArhB,EAVM7P,YAASwoB,SAAMrY,gBAErB0qB,EAAcnrB,EAAUmW,QAExBiV,EAAYtS,IAASA,EAAKzC,KAA2ByC,EAAK1kB,IAQ1D,GAAIqM,EAAa,CAEf,IAAIiD,EAAY7E,EAEhBwsB,EAAc3nB,EAAUhD,OAExB3I,EAAM,SAAUkqB,GACVlqB,GACF2L,EAAU3L,IAAIszB,EAAapJ,IAI/BT,EAAO8I,GACL,SAAUrI,GACR3xB,EAAQyH,IAAIozB,EAAalJ,IAE3BmJ,GAGFjrB,EAAS,WACPuD,EAAUkf,QAAQyI,EAAa7J,IAGjC9d,EAAU4e,MAAM+I,EAAa7J,OAG1B,CAEH,IAAI8J,EAAUzsB,EAEd0sB,EAAwB,WAAd5sB,EAAMtF,IACZmxB,GACAD,GAGJiB,EpDjHsB,SoDmHtB,GAAID,IAAYhB,GAAc,CAC5B,IAAMkB,EAAQ5sB,EAA0BhO,KACpCi6B,GAAWW,GACbF,EAAUT,GAAWW,GAKdL,IAAc/5B,IACrBm6B,EpDvHiB,SoD2HrBzzB,EAAM,SAAUkqB,GACVlqB,GACFwzB,EAAQxzB,IAAIuzB,EAASrJ,IAIzBT,EAAO8I,GACL,WACEiB,EAAQ/J,KAAK8J,EAASH,EAAa76B,IAErC86B,GAGFjrB,EAAS,WACPzB,GAAI7D,IAAIywB,EAASE,EAAWhK,IAG9B9iB,GAAIynB,GAAGmF,EAASE,EAAWhK,GAE3B+J,EAAQxzB,IAAIuzB,EAAS3sB,EAAM6B,OAK7BlQ,EAAQgyB,MAAM6I,EAAapzB,GAE3B4G,EAAMe,KAAKM,EAAU1M,KAAO,WAC1BhD,EAAQsyB,QAAQuI,EAAapzB,GAC7BA,EAAM1I,EACN8Q,MAKJA,OAAA,SAAOtB,EAAyBmB,EAAsBrB,GACpD3L,EAAQ2L,EAAMe,KAAKM,EAAU1M,QC5N3B0M,GAA4B,CAEhCC,KAAM5O,EAEN6O,KAAA,SAAKrB,EAAyBmB,EAAsBrB,GAIlD,IAAIwX,EAAUnW,EAAUmW,QAExBlgB,EAAUuuB,GAAoBrO,GAE9B2L,EAA+B,SAAUG,EAAehrB,EAAQxB,GAE9D,GAAIqsB,EAAS,CACX,IAAM5nB,EAAOjE,EACTstB,GAAuB9tB,EAAS0gB,GAChCnW,EAAU9F,KAEd,GAAIyE,EAAM8B,YAAa,CACrB,IAAM2D,EAAYvF,EAClBuF,EAAUsnB,UAAUxxB,EAAM+nB,GAC1B7d,EAAUrM,IAAImC,EAAM+nB,QAEbtxB,EAAMqP,EAAUP,MACvBf,GAAIa,KAAKV,EAAqB3E,EAAM+nB,GAGpCvjB,GAAIS,KAAKN,EAAqB3E,EAAM+nB,KAM1CtjB,EAAMrO,QAAQgyB,MAAMnM,EAAS2L,GAE7BnjB,EAAMe,KAAKM,EAAU1M,KAAO,WAC1BqL,EAAMrO,QAAQsyB,QAAQzM,EAAS2L,GAC/BA,EAAUzyB,IAKd8Q,OAAA,SAAOtB,EAAyBmB,EAAsBrB,GACpD3L,EAAQ2L,EAAMe,KAAKM,EAAU1M,QCZjC,IAAMq4B,GAAmB,GAEzBC,GAAoB,GAEpBC,GAAmB,GAEnBC,GAAiB,GAEjBC,GAAgB,GAEhBC,GAAe,GAEfC,GAAe,SAEfC,GAAoB,IAAM/b,EAE1Bgc,GAAkB,8BAgKhB,WAAY7xB,GAEV,IAAMN,EAAWjJ,KAAMq7B,EAAuB9xB,GAAW2E,EAGzDjM,EAAQo5B,EAASC,IAA4BryB,EAAUoyB,GACvDp5B,EAAQs5B,EAAID,IAA4Bh9B,EAAe+8B,GAEvDpyB,EAASoyB,SAAWA,EAGlB,IAAA1sB,SACAY,UACAisB,cACArH,aACAsH,WACAC,YACAC,aACAC,eAKIrsB,GAAS5I,EAAUgI,IACrBzE,GAAa,uCAIb0xB,GACF7E,GAAc9tB,EAAU2yB,GAI1B,IAAMtT,EAAS/Y,EAAQlG,GAAYkG,GAAS,GACxCisB,GACFlxB,GACEkxB,EACA,SAAUK,EAAgBt5B,GACxB,IAAI/D,EAAQ8pB,EAAO/lB,GAEjBo4B,GAAUp4B,EAAK/D,EAAOq9B,GAEpBC,EAAQt9B,IAENoB,EADJpB,EAAQq9B,EAAKr9B,SAEX8pB,EAAO/lB,GAAOs5B,EAAK/7B,OAASrB,EACxBD,EACAiB,EAAQjB,GACLA,IACDA,KAShB,IAAMmyB,EAAW1nB,EAAS4J,UAAY,IAAIohB,GAAS3L,EAAQrf,GAEvDkrB,GACF7pB,GACE6pB,EACA,SAAU5qB,EAAwC7E,GAChDisB,EAASoL,YAAYr3B,EAAS6E,KAMpC,IAAMpD,EAAS1G,EAAQkP,GAAQ1M,EAAQ0M,EAAM1F,EAAUM,GAAWoF,EAC9DhI,EAAUR,IACZmE,GACEnE,EACA,SAAU3H,EAAO+D,GAETwP,GAAWuW,EAAQ/lB,IACrBiI,GAAY,IAAIjI,qEAGpB+lB,EAAO/lB,GAAO/D,IAKhBk9B,GACFpxB,GACEoxB,EACA,SAAUM,EAAkB7yB,GAEpBF,EAASE,IACXe,GAAa,WAAWf,4CAG5BF,EAASE,GAAQ6yB,IAOvB/yB,EAASgzB,SAAW,IAAIlzB,GAAQzI,GAE5Bm7B,GACFxyB,EAASmsB,GAAGqG,GAKR,IAAAS,EAA2B59B,EAG7B69B,OACAvuB,UACAwuB,SACAC,UACAxrB,WACAtR,YACAyD,YACAs5B,aACAC,gBACAC,eACA5tB,eACA6tB,aACAC,YACAltB,UA+BF,GA5BI6sB,IACFpzB,EAAS0G,OAAS0sB,GAIhB7sB,GACFunB,GAAczO,EAAQ9Y,GAIpBtL,EAAUo4B,GAERlB,GAAgBxzB,KAAK00B,MACvBJ,EAAcxE,GAAOW,KAAKiE,KAExBA,EAAW5E,GAAOhmB,KAAKwqB,GACvBA,EAAc59B,GAGd4L,GAAa,IAAIoyB,oBAKrBA,EAAWh+B,EAIT69B,EAAI,CAEN,GAAIj4B,EAAUi4B,GAAK,CACjB,IAAMvG,EAAWuG,EACbf,GAAgBxzB,KAAKguB,IACvBsG,EAAcxE,GAAOW,KAAKzC,KAGtB1rB,GAAa,IAAI0rB,mBAKrB1rB,GAAa,0CAIfgyB,EAAcC,EAGXn5B,GACH00B,GAAOhnB,OACLwrB,EACAA,EAAcxE,GAAO9lB,cAAcvO,IA6BzC,GAtBI+4B,IACFnzB,EAAS0zB,MAAQP,GAGfvrB,IACF5H,EAAS2zB,QAAU/rB,GAIjBtR,IACF0J,EAAS4zB,SAAWt9B,GAGtBu9B,GAAmB7zB,EAAUye,EAAoB6U,GACjDO,GAAmB7zB,EAAUiJ,EAAmBsqB,GAChDM,GAAmB7zB,EAAU8zB,EAAmBnuB,GAChDkuB,GAAmB7zB,EAAU+zB,EAAiBP,GAC9CK,GAAmB7zB,EAAUg0B,EAAgBP,GAKzCJ,EAAU,CAGZ,IAAMY,EAAcvB,EAChBtyB,GAAYsyB,GACZ,GAqDJ,OAnDAuB,EAAY/B,IAAqB,CAE/B1K,KAAMnwB,EACNywB,QAAS,SAAUnjB,GACjB3E,EAASyE,OAAOE,EAAO3E,EAASsK,UAKpCod,EAASoL,YACPZ,GACA,CAEE1K,KAAM1vB,EACN6F,IAAK,WACH,OAAOqC,EAASk0B,YAKtBC,GAAgBn0B,EAAUi0B,GAO1Bj0B,EAASo0B,UAAY9B,EAAIziB,QAAQwjB,GAE5B1uB,IAGIsuB,GACHhyB,GAAa,mBAIjB0D,E9BuGV,SAAuBD,EAAUG,EAAYvO,EAAcmF,GACzD,MAAO,CACL4D,IAAKqF,EAAIrF,IAAIwF,GACba,KAAMsC,KACNnD,OACAvO,UACAmF,W8B7Gc44B,CACN5F,GACAwE,EACAjzB,EACA5F,SAKJ4F,EAASyE,OACPzE,EAASrC,IAAIu0B,IACbvtB,IAOEsuB,GAAetuB,IACjB1D,GAAa,wBAMnBkzB,GAAgBn0B,EAAU0yB,GAylB9B,OAn9BgBJ,MAAd,SAAkBgC,GAChBA,EAAOC,QAAQjC,IAMHA,WAAd,SAAuBzvB,EAAgBvM,GACrCmM,GAAST,SAASyF,OAAO5E,EAAMvM,IAMnBg8B,UAAd,SAAsBe,EAAkB/Q,GAGlC,InB8kBC3mB,GmB9kBmC03B,EnB8kBXlP,MmB9kBsB,CAE7C,IAAK6N,GAAaqB,GAAW,CAC3B,IAAMpmB,EAAQunB,GAAyBnB,GAEhB,IAAjBpmB,EAAMrV,QACRqJ,GAAa,iDAGjB+wB,GAAaqB,InBgkBAxuB,EmBhkBuCoI,EAAM,GnBikB7DkX,KAAkBxB,GAAc9d,EAAKhO,MAAMgO,GAAQ,KmB9jBlD,GADAwuB,EAAWrB,GAAaqB,GACpB/Q,EACF,OAAO+Q,EAIb,OAAO,IAAIjhB,SAAS,UAAUihB,EAAvB,OnBwjBYxuB,GmBjjBTytB,YAAd,SACEpyB,EACA8F,GAGE,GAAI/K,EAAUiF,KAAU8F,EACtB,OAAOyuB,GAAY9C,GAAkBzxB,GAEvCw0B,GAAY/C,GAAkBzxB,EAAM8F,IAI1BssB,aAAd,SACEpyB,EACAmK,GAGE,GAAIpP,EAAUiF,KAAUmK,EACtB,OAAOoqB,GAAY7C,GAAmB1xB,GAExCw0B,GAAY9C,GAAmB1xB,EAAMmK,IAI3BioB,YAAd,SACEpyB,EACAkK,GAGE,GAAInP,EAAUiF,KAAUkK,EACtB,OAAOqqB,GAAY5C,GAAkB3xB,GAEvCw0B,GAAY7C,GAAkB3xB,EAAMkK,IAI1BkoB,UAAd,SACEpyB,EACA6c,GAGE,GAAI9hB,EAAUiF,KAAU6c,EACtB,OAAO0X,GAAY3C,GAAgB5xB,GAErCw0B,GAAY5C,GAAgB5xB,EAAM6c,EAASuV,EAAIziB,UAIrCyiB,SAAd,SACEpyB,EACAH,GAGE,GAAI9E,EAAUiF,KAAUH,EACtB,OAAO00B,GAAY1C,GAAe7xB,GAEpCw0B,GAAY3C,GAAe7xB,EAAMH,IAgSrCuyB,wBAAA,SACE72B,EACAyvB,GAEA,OAAOn0B,KAAK6S,UAAUkpB,YAAYr3B,EAASyvB,IAM7CoH,2BAAA,SACE72B,GAEA1E,KAAK6S,UAAU+qB,eAAel5B,IAMhC62B,gBAAA,SACE72B,EACAwC,EACAsmB,GAEA,OAAOxtB,KAAK6S,UAAUjM,IAAIlC,EAASwC,EAAcsmB,IAMnD+N,gBAAA,SACE72B,EACAlG,GAIQ,IAAAqU,iBACJA,GACFA,EAAU7L,IAAItC,EAASlG,IAO3B+8B,eAAA,SACEz7B,EACA4J,GAEA,OAAOm0B,GAAU79B,KAAMF,EAAM4J,IAM/B6xB,iBAAA,SACEz7B,EACA4J,GAEA,OAAOm0B,GAAU79B,KAAMF,EAAM4J,EAAUpJ,IAMzCi7B,gBAAA,SACEz7B,EACA4J,GAGA,OADA1J,KAAKi8B,SAASnyB,IAAIhK,EAAM4J,GACjB1J,MAMTu7B,iBAAA,SACEz7B,EACA6O,EACAmvB,GAOA,IAMA10B,EAJA0e,EAAQhoB,aAAgBI,EAAcJ,EAAO,IAAII,EAAYJ,GAE7DN,EAAc,CAACsoB,GAkBf,GAbKA,EAAMzpB,SACTypB,EAAMzpB,OAVO2B,MAcX2G,EAAUgI,GACZ1E,EAAWzK,EAAMmP,GAEVA,IAASrO,IAChBw9B,EAAWx9B,GAGb8I,EArBepJ,KAqBOi8B,SAAStH,KAAK7M,EAAMhoB,KAAMN,GAChC,CACN,IAAAo9B,EAvBK58B,aAuBI+9B,EAvBJ/9B,eAwBT89B,EACEC,IACFjW,EAAM7nB,MAAQC,EAAY89B,eAC1Bt3B,EACEq3B,EACA,SAAUntB,GACR,OAAOxH,EAAawH,EAAM+jB,KAAK7M,EAAOnZ,EAAMrO,MAK3Cs8B,IACP9U,EAAM7nB,MAAQC,EAAY+9B,aAC1B70B,EAAawzB,EAAQjI,KAAK7M,EAAOnZ,IAIrC,OAAOvF,GAOTmyB,kBAAA,SACE72B,EACAqsB,EACA8C,GAGA,OADA7zB,KAAK6S,UAAU0e,MAAM7sB,EAASqsB,EAAS8C,GAChC7zB,MAMTu7B,oBAAA,SACE72B,EACAqsB,GAGA,OADA/wB,KAAK6S,UAAUgf,QAAQntB,EAASqsB,GACzB/wB,MASTu7B,0BAAA,SAAcpyB,EAAcxI,GAEnBmR,GAAc9R,KAAKk+B,YAAa/0B,EAAMxI,KACpBmR,GAAcgpB,GAAkB3xB,EAAMxI,IAGvDm4B,GAAa,cAAc3vB,uBAarCoyB,4BAAA,SAAgBhyB,EAAqBqE,IAKjCrE,EAAUF,GAAYE,IACd6yB,KAHSp8B,KAGO28B,OAHP38B,KAIjBuJ,EAAQsH,OAJS7Q,KAKjBuJ,EAAQhK,QAAUqO,EAAMrO,QACxBgK,EAAQqE,MAAQA,EAChBrE,EAAQvG,QAAU1C,EAEZ,IAAAiP,UAAOC,UAEb2uB,EAAW50B,EAAQkG,OAAS4W,EAE5B+X,EAAaxwB,EAAM6B,MAEnBlG,EAAQkG,MAAQ0uB,EAEZv+B,EAAMw+B,KACH7uB,IACHA,EAAQ,IAEVA,EAAM4uB,GAAYC,GAGhB7uB,IACFhG,EAAQgG,MAAQA,GAGdC,IACFjG,EAAQiG,MAAQA,GAGlB,IAAMoB,EAAQ,IAAI2qB,EAAIhyB,GAEtBU,EAlCiBjK,KAmCN+9B,YAnCM/9B,KAmCiB+9B,UAAY,IAC5CntB,GAGF,IAAM9C,EAAO8C,EAAMytB,IAQnB,OAPIvwB,EACFF,EAAME,KAAOA,EAGb5D,GAAa,kCAAkC0D,EAAMtF,uBAGhDsI,GAOX2qB,sBAAA,SACEpyB,EACA8F,GAGQ,IAAmBqvB,EAARt+B,iBACjB,GAAIkE,EAAUiF,KAAU8F,EACtB,OAAOyuB,GAAYY,EAAan1B,EAAgBoyB,EAAItsB,WAEtD0uB,GACEW,IALet+B,KAKUs+B,YAAc,IACvCn1B,EACA8F,IAKNssB,uBAAA,SACEpyB,EACAmK,GAGQ,IAAmBirB,EAARv+B,kBACjB,GAAIkE,EAAUiF,KAAUmK,EACtB,OAAOoqB,GAAYa,EAAcp1B,EAAgBoyB,EAAIjoB,YAEvDqqB,GACEY,IALev+B,KAKWu+B,aAAe,IACzCp1B,EACAmK,IAKNioB,sBAAA,SACEpyB,EACAkK,GAGQ,IAAmB6qB,EAARl+B,iBACjB,GAAIkE,EAAUiF,KAAUkK,EACtB,OAAOqqB,GAAYQ,EAAa/0B,EAAgBoyB,EAAIloB,WAEtDsqB,GACEO,IALel+B,KAKUk+B,YAAc,IACvC/0B,EACAkK,IAKNkoB,oBAAA,SACEpyB,EACA6c,GAGQ,IAAmBwY,EAARx+B,eACjB,GAAIkE,EAAUiF,KAAU6c,EACtB,OAAO0X,GAAYc,EAAWr1B,EAAgBoyB,EAAIvV,SAEpD2X,GACEa,IALex+B,KAKQw+B,UAAY,IACnCr1B,EACA6c,EACAuV,EAAIziB,UAKVyiB,mBAAA,SACEpyB,EACAH,GAGQ,IAAmBy1B,EAARz+B,cACjB,GAAIkE,EAAUiF,KAAUH,EACtB,OAAO00B,GAAYe,EAAUt1B,EAAgBoyB,EAAIvyB,QAEnD20B,GACEc,IALez+B,KAKOy+B,SAAW,IACjCt1B,EACAH,IASNuyB,wBAAA,SAAY5sB,GAGF,IAEJ4E,EAFevT,YAEP6S,EAFO7S,eAIfm0B,aAEF,GAAI5gB,GAAU4gB,EAAU,CAEtB,IAAMmI,EAAWnI,EAASgH,IAE1BlK,EAAWqL,EAAS11B,MAEhB+H,GAZW3O,KAaJgH,IAAI2H,GAIfkE,EAAUC,SAASlH,MAGd+C,GAAQsiB,IAAaqL,EAAS11B,OApBpB5G,KAqBJ0N,OACP4uB,EAAS11B,IAAItG,GACbiT,KAUVgoB,mBAAA,WAEI,IjBv0BJh8B,EACA+8B,EACAI,EACAD,EACA7tB,EACA2tB,EAOAhpB,EAJImrB,EAEJC,EAIAC,EAEAC,EAEAC,EA4EAC,EAyCAC,EAMAC,EAmBAC,EASAC,EAIAC,EAIAC,EASAC,EAsBAC,EAkBAC,EAmBAC,EAmBAC,EA8BAC,EAqCAC,EAwDAC,EAmBAC,EAQAC,EAeAC,EAYAC,EA2BAC,EAKAC,EAqCAC,EAsCAC,EiBoSI,OjBx0BJ9gC,EiBu0BqBS,KjBt0BrBs8B,EiBs0BqBt8B,KAGNq9B,UjBx0BfX,EiBy0BM7sB,GAJe7P,KAIOy+B,SAAUzD,IjBx0BtCyB,EiBy0BM5sB,GALe7P,KAKOw+B,UAAWzD,IjBx0BvCnsB,EiBy0BMiB,GANe7P,KAMOs+B,YAAa1D,IjBx0BzC2B,EiBy0BM1sB,GAPe7P,KAOOu+B,aAAc1D,IjBp0B1C8D,EAAS,CAFLD,EAAoB,CAAE4B,SAAUj9B,IAMpCu7B,EAAwB,GAExBC,EAA0C,GAE1CC,EAAY,SAAUrR,EAAc/rB,EAAea,EAAauT,EAAiB0X,EAAqB+S,GAEpG,IAAIC,EAAQ/S,EAAM/rB,GAAQgD,EAAUmb,GAAiB2gB,EAAMF,SAAU/9B,GAAM/D,EAAaivB,EAAOF,EAAS9nB,GA6BxG,GA1BIq2B,EAAQyE,KACVA,EAAiB77B,GAIf9E,EAAM4gC,EAAMj+B,IACd/D,EAAQgiC,EAAMj+B,GAIP3C,EAAM4gC,EAAMC,SACnBD,EAAQA,EAAMC,MAMVl+B,IAAQc,EACV7E,EAAQgiC,EAGDA,GAAS1hC,GAAYc,EAAM4gC,EAAMj+B,MACxC/D,EAAQgiC,EAAMj+B,KAId/D,IAAUivB,IAEZjvB,EAAQe,EAAQqH,IAAIlC,EAAS+oB,EAAOD,MACtBC,EAAO,CAEnB,GAAI3X,GAAUpU,EAAQ,EAIpB,OAFEg/B,GAAa,eAAeh8B,0BAEvBo6B,EAAUrR,EAAO/rB,EAAQ,EAAGa,EAAKuT,EAAQ0X,EAAW+S,GAI7D,IAAM9+B,EAASuwB,GAAW0K,EAASn6B,GASnC,OARId,GACF8rB,EAAS9rB,GACFiD,QAAUnC,GAGjBgrB,EAAO/uB,MAAQF,EACfivB,EAAO7oB,QAAU67B,GAEZhT,EAQX,OAHAA,EAAO/uB,MAAQA,EACf+uB,EAAO7oB,QAAUA,EAEV6oB,GAeTwR,EAAuB,SACrB51B,EACA3J,EACAiuB,GAEA,OAAO,SAAU3F,EAAoBnZ,GAEnC,IAAMqtB,EAASz8B,EAAQ4J,GAEvB,GAAI2e,aAAiB5nB,EAAa,CAEhC,IAAIuB,EAAcnD,EAElB,GAAIkB,EAAM,CACR,IAAMghC,EAAQ3d,EAAW4K,GACrB+S,IACFA,EAAMG,OAAS7Y,EACf0Y,EAAMI,MAAQjyB,EACdlN,EAASQ,EAAQ+5B,EAAQz8B,EAASC,EAAKiuB,IACvC+S,EAAMG,OACNH,EAAMI,MAAQtiC,QAIhBmD,EAASQ,EAAQ+5B,EAAQz8B,EAASoP,EAAO,CAACmZ,EAAOnZ,GAAQmZ,GAG3D,OAAOrmB,EAIPQ,EACE+5B,EACAz8B,EACAC,EAAOA,EAAKiuB,GAASnvB,KAO7B0gC,EAAe,SAAUpO,EAAkBnD,GACzC,OAAO,WACL,OAAOmD,EAAOnD,KAqXlB2S,EAAc,SACZ1S,EACAzsB,EACAsB,EACAmC,EACAhD,EACAb,GAGA,IAAMggC,EAAYnC,EAAQoC,EAAYnC,EAGtCD,EAAS,CAAE4B,SAAU57B,GACrBi6B,EAASmC,EAAUC,OAAOrC,GAGtB9+B,EAAMiB,KACR69B,EAAOsC,QAAUngC,GAIfa,IACFg9B,EAAOh9B,GAASa,GAKbmC,IACHg6B,EAAO+B,MAAQx/B,GAGjBysB,IAEAgR,EAASmC,EACTlC,EAASmC,GAmGJxE,EAhQPuD,EAA6B,SAC3B12B,EACA2M,EACA3R,EACAopB,EACAC,EACAC,GAEA,IAAMwT,EAAUxT,GAASkR,EACzBl9B,EAASq9B,EACPmC,EACAA,EAAQpgC,SAAWsD,GAAU,GAAK,GAClCgF,EACA2M,EACA0X,GAEF,OAAOD,EAAS9rB,EAASA,EAAOjD,OAGlCshC,EAAgC,SAC9B7oB,EACAiqB,GAGA,OADAr1B,EAAcq1B,EAAgBjqB,GACvBC,EAAWgqB,EAAgB/pB,KAGpC4oB,EAAgC,SAC9BvhC,EACA2iC,EACAD,EACA3T,GAEI3tB,EAAMshC,KACRC,EAAgBjqB,EAAWgqB,EAA4B/pB,KAEzD,IAAM1S,EAAQutB,GAAWxzB,EAAO2iC,GAGhC,OAFA17B,GAAYf,QAAUpG,EACtBmH,GAAYjH,MAAQiG,EAAQA,EAAMjG,MAAQF,EACnCivB,EAAS9nB,GAAcA,GAAYjH,OAG5CwhC,EAAuB,SACrB1gC,EACAE,EACA+tB,GAKA,OAHA9nB,GAAYf,QAAUpG,EAEtBmH,GAAYjH,MAAQyD,EAAQ3C,EAAIC,EAASC,GAAQlB,GAC1CivB,EAAS9nB,GAAcA,GAAYjH,OAxS5CygC,EAAkB,SAAUxtB,GAC1B,IAAM2vB,EAAYve,EAAW+b,GAC7B,GAAIwC,EAAW,CACb,IAAMC,EAAYxe,EAAWue,GACzBC,GAAaA,EAAUhwB,OACxBgwB,EAAU5vB,MAAmBA,EAS9BxH,EAAWm3B,EANY,CACrB/vB,OAAQ/Q,EACRmR,OACAlS,UACAmF,QAASg6B,EAAO4B,aAOxBpB,EAAuB,SAAU/1B,EAAc3K,GACzC+U,EAAO7D,YACTggB,GAAQnc,EAAQ,QAASpK,EAAM3K,GAG/BkxB,GAAQnc,EAAQ,cAAepK,EAAM,CAAEA,OAAM3K,WAIjD2gC,EAAsB,SAAUh2B,EAAcuF,EAAiBlQ,GAC7DkxB,GAAQnc,EAAQ,cAAepK,EAAM,CAAEA,OAAM3K,QAAOkQ,UAGtD0wB,EAAkB,SAAUj2B,EAAc3K,GACxCkxB,GAAQnc,EAAQ,OAAQpK,EAAM3K,IAGhC6gC,EAAwB,SAAUl2B,GAChCoK,EAAOD,WAAaipB,EAAYpzB,GAEzBoK,EAAOD,YACVpJ,GAAa,eAAef,sBAKlCm2B,EAAqB,SAAUn2B,EAAcokB,EAAqB7e,GAEhE,IAAMnM,EAAMsd,GAAiByhB,GAA0Bn4B,GAgBvD,OAdAumB,GACEnc,EACA,aACAhR,EACA,CACEsG,GAAIy4B,GACJn4B,OACA5G,MACAs2B,MAAOjqB,EAAW0yB,IAClBlc,QAASmI,EAAO7oB,QAChBgK,SAIG6e,EAAO/uB,OAIhB+gC,EAAmB,SAAUhS,GAE3Bha,EAAO9D,MAAQ8d,EAAO/uB,MAEtBkxB,GACEnc,EACA,aACA+R,GACA,CACEzc,GAAIyc,GACJnc,KAAM9F,EACNd,IAAK+iB,GACLF,QAASmI,EAAO7oB,QAChBm0B,MAAOjqB,EAAW0W,OAKxBka,EAAyB,SACvBr2B,EAAc5G,EAAa/D,EAC3Bw9B,EAAgBx8B,GAEhBkwB,GACEnc,EACA,aACAhR,EACA,CACEsG,GAAI6c,GACJvc,OACA5G,MACA/D,QACAq6B,MAAOjqB,EAAW8W,IAClB2T,QAAS0F,EAAqB/C,EAAkBx8B,EAAMm/B,MAK5Dc,EAAuB,SACrBt2B,EAAc5G,EAAa/D,EAC3BspB,GApKoB,IAAUhoB,EAsK9B4vB,GACEnc,EACA,aACAhR,EACA,CACEsG,GAAI6c,GACJvc,OACA5G,MACA/D,QACAq6B,MAAOjqB,EAAW8W,IAClB2T,SAhL0Bv5B,EAgLGgoB,EA/K1B,SAAUA,EAAoBnZ,GAG/B7O,IAASgoB,EAAMhoB,OACjBgoB,EAAQ,IAAI5nB,EAAYJ,EAAMgoB,IAEhCvoB,EAAQo1B,KAAK7M,EAAOnZ,QA8KxB+wB,EAAuB,SACrBv2B,EAAc5G,EAAa/D,EAC3Bw9B,EAAuBx8B,EAAuBoxB,GAG9C,IAAMiI,EAAQjqB,EAAWzF,GAGlB0vB,GACH3uB,GAAa,cAAcf,qBAI/BumB,GACEnc,EACA,aACAhR,EACA,CACEsG,GAAI+c,GACJzc,OACA5G,MACA/D,QACAq6B,QACAjI,OAAQA,EAASoO,EAAapO,EAAQ+N,GAAUrgC,EAChD+6B,QAAS2C,EAAS+C,EAAqB/C,EAAQx8B,EAAMm/B,GAAUrgC,KAMrEqhC,EAAoB,SAAUpS,GAEpB,IAAA/uB,UAAOkG,YAGf,GAAIlG,GAASM,GAEP6H,EAAUnI,KAAWkB,EAASlB,KAEhC8L,GACE9L,EACA,SAAUA,EAAO+D,GACfmtB,GAAQnc,EAAQ,QAAShR,EAAK/D,KAI9BkG,GAAS,CACX,IAAMnC,EAAMsd,GAAiByhB,GAA0B58B,GACvDgrB,GACEnc,EACA,aACAhR,EACA,CACEsG,GAAIy4B,GACJn4B,KAAM9F,EACNd,MACAs2B,MAAOjqB,EAAW0yB,IAClBlc,QAASvF,GAAiBnb,EAASU,OAU/Cw6B,EAAqB,SACnBhyB,EACAtF,EACA2d,EACAwJ,EACAjgB,GAGA,GAAIlH,EAAK,CACP,IAAMi5B,EAAgBhiC,EAAQqH,IAAI0B,GAE3Bi5B,GACH/2B,GAAY,sBAAsBlC,qBAGtCsF,EAAMtF,IAAMi5B,EAUd,GAPItb,IACF1S,EAAS3F,EACTqY,IACA1S,EAASjV,GAIPmxB,EACFmP,EAAWt9B,KAAKsM,EAAM4D,SAAW,IACjCie,IACAvM,EAAU0b,QAEP,GAAIpvB,EAAO,CACd,IAAMgyB,EAAc,GACpBl3B,GACEkF,EACA,SAAUmE,EAAgBxK,GACxBy1B,EAAWt9B,KAAK,IAChBqS,IACA,IAAMxD,EAAS+S,EAAU0b,GACzB4C,EAAYr4B,GAAQgH,EAAOtP,OAASsP,EAAS7R,IAGjDsP,EAAM4B,MAAQgyB,EAGhB5zB,EAAMrO,QAAUA,EAChBqO,EAAMlJ,QAAUg6B,EAAO4B,SAEvB,IAAMc,EAAYve,EAAW+b,GAK7B,OAJIwC,GACFn3B,EAAWm3B,EAAWxzB,GAGjBA,GA0DTqyB,EAAa,SAAU92B,EAAcs4B,GAEnC,IAAML,EAAYve,EAAW+b,GAE7BzuB,EAAS5Q,EAAQqH,IAAIuC,GAEjBi4B,IACEjxB,EACFzJ,EACEyJ,EACA,SAAUvC,GACR3D,EAAWm3B,EAAWxzB,GACtBA,EAAM+F,KAAOxK,EACbyE,EAAMiD,OAAStR,IAIZkiC,GACPA,MASNvB,EAAgB,SAAU/2B,EAAcg0B,GACtC0B,EAAc11B,GAAQg0B,GAIxBgD,EAAe,SAAUh3B,GACvB,GAAI01B,EAAc11B,GAChB01B,EAAc11B,SAEX,CACH,IAAM6c,EAAUyW,EAAStzB,GACrB6c,EACFA,EACE6Z,EACAC,EACAC,EACAC,EACAf,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAK,EACAC,EACAC,EACAE,EACAl5B,IAIF+C,GAAa,YAAYf,uBA2C/Bk3B,EAAa,SACX3S,EACAzN,EACAC,EACAC,EACAze,GAGA,IAAMggC,EAAYzhB,EAAKzhB,MAEvBmjC,EAAc1hB,EAAKvb,QAEnB,GAAIwb,EAAI,CACN,IAAI0hB,EAAU1hB,EAAG1hB,MAAOm1B,EAAQ,EAChC,GAAI+N,EAAYE,EACd,GAAIzhB,EACF,IAAK,IAAIrf,EAAI4gC,EAAW5gC,GAAK8gC,EAAS9gC,IACpCs/B,EACE1S,EACA5sB,EACA6yB,IACAtwB,EACA3B,QAKJ,IAASZ,EAAI4gC,EAAW5gC,EAAI8gC,EAAS9gC,IACnCs/B,EACE1S,EACA5sB,EACA6yB,IACAtwB,EACA3B,QAMN,GAAIye,EACF,IAASrf,EAAI4gC,EAAW5gC,GAAK8gC,EAAS9gC,IACpCs/B,EACE1S,EACA5sB,EACA6yB,IACAtwB,EACA3B,QAKJ,IAASZ,EAAI4gC,EAAW5gC,EAAI8gC,EAAS9gC,IACnCs/B,EACE1S,EACA5sB,EACA6yB,IACAtwB,EACA3B,QAOR,GAAIhC,EAASgiC,GACN,CAAI5gC,EAAI,EAAb,IAAK,IAAWD,EAAS6gC,EAAU7gC,OAAQC,EAAID,EAAQC,IACrDs/B,EACE1S,EACAgU,EAAU5gC,GACVA,EACA6gC,EACI9hB,GAAiB8hB,EAAat+B,EAAmBvC,GACjDuC,EACJ3B,EACAb,QAID,GAAI8F,EAAU+6B,GACjB,IAAK,IAAIn/B,KAAOm/B,EACdtB,EACE1S,EACAgU,EAAUn/B,GACVA,EACAo/B,EACI9hB,GAAiB8hB,EAAap/B,GAC9Bc,EACJ3B,IA6BRyF,KiBiMFo0B,mBAAA,SAAO3tB,EAAcC,GAEjB,IAIAg0B,EAJIC,EAAW9hC,KAEbuT,WAAQwuB,aAOVD,EAAS9xB,MAAQ,GAEbuD,GACFtR,EAAQ8/B,EAAkC,aAAGD,GAC7C7/B,EAAQs5B,EAA6B,aAAGj9B,EAAewjC,GACvDE,GAAetK,GAAQ9pB,EAAOC,GAC9Bg0B,ErC72ByB,gBqCg3BzB5/B,EAAQ8/B,EAAiC,YAAGD,GAC5C7/B,EAAQs5B,EAA4B,YAAGj9B,EAAewjC,GACtDE,GAAetK,GAAQ9pB,EAAOC,GAC9Bi0B,EAASzD,IAAMzwB,EAAME,KACrB+zB,ErCt3BwB,cqCy3B1BC,EAASvuB,OAAS3F,EAIlB2tB,EAAI5vB,SACF,WACMm2B,EAASvuB,SACXtR,EAAQ8/B,EAASF,GAAYC,GAC7B7/B,EAAQs5B,EAAIsG,GAAYvjC,EAAewjC,OAYjDvG,uBAAA,SAAWhsB,GAEP,IAAM0yB,EAAWjiC,KACjBsK,GACEiF,EACA,SAAU/Q,EAAO+D,GACf0/B,EAAStH,UAAUp4B,EAAK/D,MAMhC+8B,sBAAA,SAAUh5B,EAAa/D,GAEX,IAAAg9B,0BACR,GAAIA,EAAW,CACb,IAAMK,EAAOL,EAAUj5B,GACnBs5B,GACFlB,GAAUp4B,EAAK/D,EAAOq9B,KAS9BN,oBAAA,WAEQ,IAEJqB,EAFe58B,aAENq7B,EAFMr7B,cAEIi8B,EAFJj8B,cAEc6S,EAFd7S,eAIjBiC,EAAQo5B,EAAmC,cAJ1Br7B,MAKjBiC,EAAQs5B,EAA8B,cAAGj9B,EALxB0B,MASP,IAAAuT,EATOvT,YAWX48B,GAAWA,EAAQmB,WACrBvI,EAAaoH,EAAQmB,UAZR/9B,MAeXuT,IAfWvT,KAiBJuT,OAASjV,E9B1Y1B,SAAwBqP,EAAUC,EAAcs0B,GAC9C,GAAIA,EAAU,CACZ,IAAM3xB,EAAa5C,EAAIkD,OAAOjD,EAAME,MAChCyC,EACF0C,GAAYtF,EAAK4C,EAAY3C,GAG7B1D,GAAa,iDAIfkJ,GAAazF,EAAKC,G8BgYdu0B,CAAiBzK,GAAQnkB,GAASqpB,IAKtCX,EAASnyB,MACT+I,EAAUiB,UAEV7R,EAAQo5B,EAAkC,aA1BzBr7B,MA2BjBiC,EAAQs5B,EAA6B,aAAGj9B,EA3BvB0B,MA6BjBy1B,GA7BiBz1B,OAoCnBu7B,qBAAA,SAASzvB,GACP9L,KAAK6S,UAAUC,SAASpC,OAAO5E,EAAM9L,OAQvCu7B,mBAAA,SAAO72B,GACL,OAAO1E,KAAK6S,UAAUuvB,OAAO19B,IAY/B62B,qBAAA,SAAS72B,EAAiB4U,EAAezP,GACvC,OAAO7J,KAAK6S,UAAUwvB,SAAS39B,EAAS4U,EAAMzP,IAYhD0xB,qBAAA,SAAS72B,EAAiB4U,EAAegc,GACvC,OAAOt1B,KAAK6S,UAAUyvB,SAAS59B,EAAS4U,EAAMgc,IAUhDiG,mBAAA,SAAO72B,EAAiBzD,EAAWS,GACjC,OAAO1B,KAAK6S,UAAU0iB,OAAO7wB,EAASzD,EAAMS,IAS9C65B,mBAAA,SAAO72B,EAAiBzD,GACtB,OAAOjB,KAAK6S,UAAUnC,OAAOhM,EAASzD,IASxCs6B,oBAAA,SAAQ72B,EAAiBzD,GACvB,OAAOjB,KAAK6S,UAAUE,QAAQrO,EAASzD,IASzCs6B,qBAAA,SAAS72B,EAAiBhD,GACxB,OAAO1B,KAAK6S,UAAUsnB,SAASz1B,EAAShD,IAS1C65B,mBAAA,SAAO72B,EAAiBzD,GACtB,OAAOjB,KAAK6S,UAAUhR,OAAO6C,EAASzD,IASxCs6B,iBAAA,SAAQ5sB,EAASlI,GACf,OAAOzG,KAAK6S,UAAUrM,KAAKmI,EAAMlI,IAl+BrB80B,UAAU,iBAKVA,KAAK1f,EACL0f,QAAQ78B,EACR68B,SAAS18B,GACT08B,SAASx8B,GACTw8B,SAASgH,GACThH,QAAQr7B,EACRq7B,UAAUxyB,QA49BpB5B,GAAWlJ,OAAOukC,UAAUr7B,SAElC,SAASs7B,GAAUjkC,EAAYsB,GAC7B,MAAgB,YAATA,EACH+U,EAAWrW,GACX2pB,GAAahhB,GAAStH,KAAKrB,MAAY,WAAWsB,MAGxD,SAAS66B,GAAUp4B,EAAa/D,EAAYq9B,GAG1C,GAAIj8B,EAAMpB,GAAQ,CAEhB,IAAMk8B,EAAOmB,EAAK/7B,KAIlB,GAAI46B,EAIF,GAAIj7B,EAAQi7B,GACTA,EAAuBn4B,EAAK/D,OAE1B,CAEH,IAAIkkC,EAAU3hC,EAGT4lB,GAAa+T,GAIRzK,EAAYyK,IACpBh0B,EACEg0B,EACA,SAAUz5B,GACR,GAAIwhC,GAAUjkC,EAAOyC,GAEnB,OADAyhC,EAAUpiC,EACHS,IATb2hC,EAAUD,GAAUjkC,EAAOk8B,GAexBgI,GACHl4B,GAAY,qBAAqBjI,uBAAwBm4B,gBAAkBl8B,aAO/EgM,GAAY,aAAajI,sCAKpBs5B,EAAK8G,UACZn4B,GAAY,aAAajI,0DAK7B,SAAS66B,GAAgBn0B,EAAe0yB,GAElCA,GACF1yB,EAASsoB,MAAMoK,GAGjB15B,EAAQgH,EAASoyB,SAASuH,IAA2B35B,GACrDhH,EAAQs5B,GAAIqH,IAA2BtkC,EAAe2K,GAIxD,SAAS6zB,GAAmB7zB,EAAe1G,EAAa/D,GAClDiB,EAAQjB,GACVyK,EAAS1G,GAAKN,EAAQzD,EAAOyK,IAEtBtC,EAAUnI,IACjByK,EAAS1G,GAAK/D,GAIlB,SAASqkC,GAAS55B,EAAenJ,EAAc4J,EAAyBwF,GACtE,IAAM3F,EAA0B,CAC9BjK,GAAIoK,EACJC,IAAKV,GAEHiG,IACF3F,EAAQM,IAAM,GAEhBZ,EAASgzB,SAAS7G,GAAGt1B,EAAMyJ,GAG7B,SAASs0B,GACP50B,EACAnJ,EACA4J,EACAwF,GAaA,OAXIhL,EAAUpE,GACZ+iC,GAAS55B,EAAUnJ,EAAgB4J,EAA2BwF,GAG9D5E,GACExK,EACA,SAAUtB,EAAsB+D,GAC9BsgC,GAAS55B,EAAU1G,EAAK/D,EAAO0Q,KAI9BjG,EAGT,SAAS6I,GAAcnD,EAA6CxF,EAAcxI,GAChF,GAAIgO,GAAQA,EAAKxF,GAAO,CACtB,IAAMkK,EAAY1E,EAAKxF,GAEvB,GAAI1J,EAAQ4T,GAAY,CAEtB,IAAIyvB,EAASzvB,EAEb0vB,EAAkCD,EAAO5H,IAErC6H,EACF94B,EAAW84B,EAAOpiC,IAGlBoiC,EAAQ1vB,EAAU6nB,IAAgB,CAACv6B,GAEnCmiC,EACE,SAAUv5B,GAERu5B,EAAO5H,IAAgB58B,EAEvBqQ,EAAKxF,GAAQI,EAEb7C,EACEq8B,EACA,SAAUpiC,GACRA,EAAS4I,aAWnB5I,EAAS0S,GAEX,OAAO/S,GAIX,SAASo9B,GAAY/uB,EAAwBxF,EAAc2M,GACzD,OAAInH,GAAQA,EAAKxF,GACRwF,EAAKxF,GAEL2M,EACAA,EAAO3M,QADX,EAKP,SAASw0B,GAAYhvB,EAAiBxF,EAA0B3K,EAAawkC,GACvE9+B,EAAUiF,GACZwF,EAAKxF,GAAkB65B,EAAcA,EAAYxkC,GAASA,EAG1D8L,GACEnB,EACA,SAAU3K,EAAO+D,GACfoM,EAAKpM,GAAOygC,EAAcA,EAAYxkC,GAASA,IAOrD+8B,GAAS,IAAI7D,GAEb6D,GAAItsB,UAAU,CAAE6Y,SAAOrY,SAAO2V,aAE9BmW,GAAIvyB,OAAO,CAAEi6B,QC9vCf,SAAyB95B,GACvB,OAAOvJ,EAAMI,KAAK4G,IAAImpB,GAA0B5mB"}