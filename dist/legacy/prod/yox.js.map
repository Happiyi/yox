{"version":3,"file":"yox.js","sources":["../../../node_modules/yox-common/src/util/env.ts","../../../node_modules/yox-common/src/function/isDef.ts","../../../node_modules/yox-common/src/util/is.ts","../../../node_modules/yox-common/src/function/execute.ts","../../../node_modules/yox-common/src/util/Event.ts","../../../node_modules/yox-common/src/util/array.ts","../../../node_modules/yox-common/src/util/string.ts","../../../node_modules/yox-common/src/util/keypath.ts","../../../node_modules/yox-common/src/util/object.ts","../../../node_modules/yox-common/src/function/toString.ts","../../../node_modules/yox-common/src/util/logger.ts","../../../node_modules/yox-common/src/util/Emitter.ts","../../../node_modules/yox-common/src/function/isNative.ts","../../../node_modules/yox-common/src/function/nextTick.ts","../../../node_modules/yox-common/src/util/NextTask.ts","../../../node_modules/yox-config/index.ts","../../../node_modules/yox-snabbdom/src/field.ts","../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../node_modules/yox-snabbdom/src/directive.ts","../../../node_modules/yox-snabbdom/src/component.ts","../../../node_modules/yox-snabbdom/index.ts","../../../node_modules/yox-common/src/function/toNumber.ts","../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../node_modules/yox-expression-compiler/src/creator.ts","../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../node_modules/yox-expression-compiler/src/compiler.ts","../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../node_modules/yox-template-compiler/src/helper.ts","../../../node_modules/yox-template-compiler/src/creator.ts","../../../node_modules/yox-template-compiler/src/compiler.ts","../../../node_modules/yox-common/src/function/isUndef.ts","../../../node_modules/yox-common/src/function/toJSON.ts","../../../node_modules/yox-template-compiler/src/stringify.ts","../../../node_modules/yox-expression-compiler/src/executor.ts","../../../node_modules/yox-template-compiler/src/renderer.ts","../../../node_modules/yox-observer/src/Computed.ts","../../../node_modules/yox-observer/src/function/matchBest.ts","../../../node_modules/yox-observer/src/function/readValue.ts","../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../node_modules/yox-observer/src/function/diffString.ts","../../../node_modules/yox-observer/src/function/diffArray.ts","../../../node_modules/yox-observer/src/function/diffObject.ts","../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../node_modules/yox-observer/src/Observer.ts","../../../node_modules/yox-dom/index.ts","../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_TYPE = 'type'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\n\nconst SEPARATOR = '.', splitCache = {}, patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = is.string(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(SEPARATOR))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + SEPARATOR + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`调用 emitter.off() 时，你传了事件名，但它是个空值`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Attribute from 'yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Property from 'yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}\n\n//\n// 旧 [ child1, child2 ]\n// 新 innerHTML\n//\n// 这种情况，要让外部先把 child1 child2 正常移除掉，再用 innerHTML 覆盖，否则指令无法销毁\n//\n// 旧 innerHTML\n// 新 [ child1, child2 ]\n//\n// 这种情况，先用 innerHTML 覆盖，再处理 child1 child2\n//\n// export default {\n//   create: createProps,\n//   update: removeProps,\n//   postpatch: createProps,\n// }\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from 'yox-type/src/vnode/VNode'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n      if (props) {\n        node.set(node.checkPropTypes(props))\n      }\n      if (slots) {\n        node.set(slots)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport API from 'yox-type/src/API'\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxOptions from 'yox-type/src/options/Yox'\n\nimport * as field from './src/field'\n\nimport * as nativeAttr from './src/nativeAttr'\nimport * as nativeProp from './src/nativeProp'\nimport * as directive from './src/directive'\nimport * as component from './src/component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions | void) {\n\n  if (!options) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`component [${vnode.tag}] is not found.`)\n    }\n    return\n  }\n\n  // 渲染同步加载的组件时，vnode.node 为空\n  // 渲染异步加载的组件时，vnode.node 不为空，因为初始化用了占位节点\n  const child = (vnode.parent || vnode.context).create(options, vnode, vnode.node),\n\n  // 组件初始化创建的元素\n  node = child.$el as Node\n\n  if (node) {\n    vnode.node = node\n  }\n  else {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`the root element of component [${vnode.tag}] is not found.`)\n    }\n  }\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Record<string, any> {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let isAsync = env.TRUE\n\n    context.component(\n      tag as string,\n      function (options: any) {\n        if (isDef(data[field.LOADING])) {\n          // 异步组件\n          if (data[field.LOADING]) {\n            // 尝试使用最新的 vnode\n            if (data[field.VNODE]) {\n              vnode = data[field.VNODE]\n              // 用完就删掉\n              delete data[field.VNODE]\n            }\n            enterVnode(\n              vnode,\n              createComponent(vnode, options)\n            )\n          }\n        }\n        // 同步组件\n        else {\n          createComponent(vnode, options)\n          isAsync = env.FALSE\n        }\n      }\n    )\n\n    if (isAsync) {\n      vnode.node = api.createComment(env.RAW_COMPONENT)\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.nextTick(enter, env.TRUE)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, context } = vnode\n\n  if (parent\n    // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n    // 这里表示的是宿主组件还没被销毁\n    // 如果宿主组件被销毁了，则它的一切都要进行销毁\n    && parent.$vnode\n    // 是从外部传入到组件内的\n    && parent !== vnode.context\n  ) {\n    return\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement,\n        env.EMPTY_FUNCTION\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, isComment: boolean, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    isComment,\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`destroy vnode can't not work without parent node.`)\n      }\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import isDef from 'yox-common/src/function/isDef'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, op: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    op,\n    right,\n  }\n}\n\nexport function createCall(callee: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    callee,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean | void, offset: number | void, staticKeypath: string | void): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath: isDef(staticKeypath) ? staticKeypath as string : name,\n  }\n}\n\nfunction createMemberInner(raw: string, props: Node[], lookup: boolean | void, offset: number, staticKeypath: string | void) {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    props,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup: boolean | void, offset: number | void\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(op: string, arg: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    op,\n    arg,\n  }\n}\n\nfunction getLiteralNode(nodes: Node[], index: number): Literal | void {\n  if (nodes[index]\n    && nodes[index].type === nodeType.LITERAL\n  ) {\n    return nodes[index] as Literal\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: (Node | Identifier | Literal)[]): Node | Identifier | Member {\n\n  let { length } = nodes,\n\n  lookup: boolean | void,\n\n  offset = 0,\n\n  staticKeypath: string | void,\n\n  name = env.EMPTY_STRING,\n\n  list: (Node | Identifier | Literal)[] = [],\n\n  literal: Literal | void,\n\n  identifier: Identifier\n\n  if (length > 1) {\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n    if (nodes[0].type === nodeType.IDENTIFIER) {\n\n      identifier = nodes[0] as Identifier\n\n      name = identifier.name\n      lookup = identifier.lookup\n      staticKeypath = identifier.staticKeypath\n\n      if (identifier.offset > 0) {\n        offset += identifier.offset as number\n      }\n\n      if (name) {\n        array.push(list, identifier)\n      }\n\n      // 优化 1：计算 staticKeypath\n      //\n      // 计算 staticKeypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n      // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n      // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n      // 下面这段属于性能优化，避免在运行时反复计算 Member 的 keypath\n\n      // 优化 2：计算 offset 并智能转成 Identifier\n      //\n      // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n      for (let i = 1; i < length; i++) {\n        literal = getLiteralNode(nodes, i)\n        if (literal) {\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            continue\n          }\n          if (isDef(staticKeypath)\n            && literal.raw !== env.KEYPATH_CURRENT\n          ) {\n            staticKeypath = keypathUtil.join(staticKeypath as string, toString(literal.value))\n          }\n        }\n        else {\n          staticKeypath = env.UNDEFINED\n        }\n        array.push(list, nodes[i])\n      }\n\n      // 表示 nodes 中包含路径，并且路径节点被干掉了\n      if (list.length < length) {\n        nodes = list\n        // 剩下的节点，第一个如果是 Literal，把它转成 Identifier\n        literal = getLiteralNode(nodes, 0)\n        if (literal) {\n          name = literal.value\n          nodes[0] = createIdentifierInner(literal.raw, name, lookup, offset)\n        }\n      }\n\n    }\n\n    // 如果全是路径节点，如 ../../this，nodes 为空数组\n    // 如果剩下一个节点，则可转成标识符\n    return nodes.length < 2\n      ? createIdentifierInner(raw, name, lookup, offset, staticKeypath)\n      : createMemberInner(raw, nodes, lookup, offset, staticKeypath)\n\n  }\n\n  return nodes[0]\n\n}\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n\n  '->': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i > b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i < b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  },\n  '=>': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i >= b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i <= b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  }\n}\n","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const { length } = content\n    this.index = -1\n    this.end = length\n    this.code = CODE_EOF\n    this.content = content\n    this.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? -1 : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this\n\n    // 走一步\n    if (instance.code === CODE_EOF) {\n      instance.go(step)\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (step && step < 0) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(-1)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys = [], values = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'dev') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'dev') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string | void\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // +、/、%、~、^\n      case CODE_PLUS:\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // -、->\n      case CODE_MINUS:\n        instance.go()\n        if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===、=>\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.code > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorInfo: any | void,\n\n    lastOperator: string | void,\n\n    lastOperatorInfo: any | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorInfo = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorInfo = interpreter.binary[lastOperator])\n            && lastOperatorInfo.prec >= operatorInfo.prec\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from 'yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as env from 'yox-common/src/util/env'\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, modifier?: string, value?: string | number, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    name,\n    modifier,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: number, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(expr: ExpressionNode, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    expr,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from 'yox-config/index'\n\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译模板\ncompileCache = {},\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/,\n\n// 属性的 name\nattributePattern = /^\\s*([-:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\n/**\n * trim 文本开始和结束位置的换行符\n *\n * 换行符比较神奇，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\n *\n */\nfunction trimBreakline(content: string): string {\n  return content.replace(\n    /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n    env.EMPTY_STRING\n  )\n}\n\nexport function compile(content: string): Node[] {\n\n  let nodeList: Node[] = compileCache[content]\n  if (nodeList) {\n    return nodeList\n  }\n\n  nodeList = []\n\n  let nodeStack: Node[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode\n      && lastNode.type === nodeType.ELEMENT\n      && lastNode.tag !== popingTagName\n      && array.has(selfClosingTagNames, lastNode.tag)\n    ) {\n      popStack(lastNode.type, lastNode.tag)\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node: Branch = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch: Branch = array.last(nodeStack)\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex\n          && (node.isComplex || isElement)\n        ) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'dev') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n        // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n        // 1. 很难做性能优化\n        // 2. 全局搜索不到事件名，不利于代码维护\n        // 3. 不利于编译成静态函数\n        if (process.env.NODE_ENV === 'dev') {\n          if (isDirective) {\n            fatal(`指令的值不能用插值或 if 语法`)\n          }\n        }\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child\n\n    // lazy 不需要编译表达式\n    // 因为 lazy 的值必须是大于 0 的数字\n    if (directive.name === config.DIRECTIVE_LAZY) {\n      if (is.numeric(text)) {\n        const value = toNumber(text)\n        if (value > 0) {\n          directive.value = value\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`lazy 指令的值 [${text}] 必须大于 0`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal(`lazy 指令的值 [${text}] 必须是数字`)\n      }\n    }\n    else {\n\n      // 指令的值是纯文本，可以预编译表达式，提升性能\n      const expr = exprCompiler.compile(text),\n\n      // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n      isModel = directive.name === config.DIRECTIVE_MODEL,\n\n      // on-click=\"xx\" on-click=\"method()\" 值只能是标识符或函数调用\n      isEvent = directive.name === config.DIRECTIVE_EVENT\n\n      if (expr) {\n\n        if (process.env.NODE_ENV === 'dev') {\n          // 如果指令表达式是函数调用，则只能调用方法（难道还有别的好调用的吗？）\n          if (expr.type === exprNodeType.CALL) {\n            const { callee } = expr as ExpressionCall\n            if (callee.type !== exprNodeType.IDENTIFIER) {\n              fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n            }\n          }\n          // 上面检测过方法调用，接下来事件指令只需要判断是否是标识符\n          else if (isEvent && expr.type !== exprNodeType.IDENTIFIER) {\n            fatal('事件指令的表达式只能是 标识符 或 函数调用')\n          }\n\n          if (isModel && !expr[env.RAW_STATIC_KEYPATH]) {\n            fatal(`model 指令的值格式错误: [${expr.raw}]`)\n          }\n        }\n\n        directive.expr = expr\n\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        if (isModel || isEvent) {\n          fatal(`${directive.name} 指令的表达式错误: [${text}]`)\n        }\n      }\n\n      directive.value = text\n\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    // 变成一维数组，方便遍历\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      const isTemplate = element.tag === env.RAW_TEMPLATE\n\n      if (element.slot) {\n        if (!isTemplate) {\n          fatal(`slot 属性只能用于 <template>`)\n        }\n        else if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (element.attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n      }\n      else if (isTemplate) {\n        fatal(`<template> 不写 slot 属性是几个意思？`)\n      }\n      else if (element.tag === env.RAW_SLOT && !element.name) {\n        fatal(`<slot> 不写 name 属性是几个意思？`)\n      }\n    }\n\n    // style 如果啥都没写，就默认加一个 type=\"text/css\"\n    // 因为低版本 IE 没这个属性，没法正常渲染样式\n    // 如果 style 写了 attribute 那就自己保证吧\n    // 因为 attrs 具有动态性，compiler 无法保证最终一定会输出 type 属性\n    if (element.isStyle && array.falsy(element.attrs)) {\n      element.attrs = [\n        creator.createProperty(env.RAW_TYPE, config.HINT_STRING, 'text/css')\n      ]\n    }\n\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'dev') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch: Branch | void = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch: Branch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('大哥，else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('大哥，只能写一个 else 啊！！')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('不写 if 是几个意思？？')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n    text = trimBreakline(text)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'dev') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !lastNode.isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'dev') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name)\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = name.toLowerCase()\n\n              // <slot> 或 <template> 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag]) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(text)\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const expr = exprCompiler.compile(string.trim(terms[0]))\n          if (expr) {\n            if (!currentElement) {\n              return creator.createEach(\n                expr,\n                string.trim(terms[1])\n              )\n            }\n            else if (process.env.NODE_ENV === 'dev') {\n              fatal(\n                currentAttribute\n                  ? `each 不能写在属性的值里`\n                  : `each 不能写在属性层级`\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              is.string(expr[env.RAW_STATIC_KEYPATH])\n                ? env.TRUE\n                : env.FALSE\n            )\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition: boolean | void\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  }\n\n  while (env.TRUE) {\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      parseHtml(\n        string.slice(content, nextIndex, openBlockIndex)\n      )\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        if (openBlockIndex < length) {\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n          if (closeBlockIndex >= openBlockIndex) {\n            // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n            // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n            index = closeBlockIndex + 2\n\n            // 这里要用 <=，因为很可能到头了\n            if (index <= length) {\n\n              if (index < length && string.charAt(content, index) === '}') {\n                if (blockMode === BLOCK_MODE_UNSAFE) {\n                  nextIndex = index + 1\n                }\n                else {\n                  fatal(`{{ 和 }}} 无法配对`)\n                }\n              }\n              else {\n                if (blockMode === BLOCK_MODE_SAFE) {\n                  nextIndex = index\n                }\n                else {\n                  fatal(`{{{ 和 }} 无法配对`)\n                }\n              }\n\n              code = string.trim(\n                string.slice(content, openBlockIndex, closeBlockIndex)\n              )\n\n              // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n              if (code) {\n                parseBlock(code)\n              }\n\n            }\n            else {\n              // 到头了\n              break\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, nextIndex)\n      )\n      break\n    }\n  }\n\n  if (process.env.NODE_ENV === 'dev') {\n    if (nodeStack.length) {\n      fatal('还有节点未出栈')\n    }\n  }\n\n  return compileCache[content] = nodeList\n\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds || env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport invoke from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.LITERAL] = function (node: Literal): any {\n  return node.value\n}\n\nnodeExecutor[nodeType.IDENTIFIER] = function (node: Identifier, getter: (keypath: string, node: Keypath) => any): any {\n  return getter(node.name, node)\n}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let { props, staticKeypath } = node, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      staticKeypath = env.EMPTY_STRING\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.unary[node.op].exec(\n    execute(node.arg, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.binary[node.op].exec(\n    execute(node.left, getter, context),\n    execute(node.right, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return node.nodes.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key, index) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return invoke(\n    execute(node.callee, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from 'yox-config/index'\n\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Event from 'yox-common/src/util/Event'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport Keypath from 'yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from 'yox-expression-compiler/src/executor'\n\nimport * as signature from 'yox-type/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\n\nimport * as nodeType from './nodeType'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const map = target[name] || (target[name] = {})\n  map[key] = value\n}\n\nexport function render(\n  context: Yox,\n  filters: Record<string, Function>,\n  partials: Record<string, Function | void>,\n  directives: Record<string, DirectiveHooks | void>,\n  transitions: Record<string, TransitionHooks | void>,\n  template: Function\n) {\n\n  let $keypath = env.EMPTY_STRING,\n\n  $scope: Record<string, any> = { $keypath },\n\n  $stack = [$keypath, $scope],\n\n  eventScope: Record<string, any> | void,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let keypath = keypathUtil.join(stack[index], key),\n\n    scope = stack[index + 1]\n\n    node.absoluteKeypath = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    if (eventScope && object.has(eventScope, key)) {\n      return eventScope[key]\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 keypath\n    if (object.has(scope, key)) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (object.has(scope, '$item')) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope && object.has(scope, key)) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    let result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 1) {\n        index -= 2\n        return lookup(stack, index, key, node, depIgnore, defaultKeypath)\n      }\n      result = object.get(filters, key)\n      if (!result) {\n        node.absoluteKeypath = defaultKeypath\n        logger.warn(`data [${node.raw}] is not found.`)\n        return\n      }\n      result = result.value\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - 2 * ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: any, attr: Record<string, any>): any {\n\n    const { expr } = attr,\n\n    value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, attr.name),\n\n    hooks = directives[config.DIRECTIVE_BINDING]\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns: config.DIRECTIVE_BINDING,\n          name: attr.name,\n          key,\n          hooks,\n          binding: expr.absoluteKeypath,\n          hint: attr.hint,\n        }\n      )\n    }\n\n    return value\n\n  },\n\n  spreadObject = function (vnode: any, attr: Record<string, any>) {\n\n    let { expr } = attr,\n\n    value = getValue(expr, attr.binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair(vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr[env.RAW_ABSOLUTE_KEYPATH]\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath),\n        hooks = directives[config.DIRECTIVE_BINDING]\n        if (hooks) {\n          setPair(\n            vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks,\n              binding: keypathUtil.join(absoluteKeypath, '*'),\n            }\n          )\n        }\n      }\n\n    }\n    else {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n  },\n\n  addDirective = function (vnode: any, attr: Record<string, any>) {\n\n    let { ns, name, value } = attr,\n\n    key = keypathUtil.join(ns, name),\n\n    binding: string | void,\n\n    hooks: DirectiveHooks | void,\n\n    getter: signature.directiveGetter | void,\n\n    handler: signature.directiveHandler | signature.eventListener | void,\n\n    transition: TransitionHooks | void\n\n    switch (ns) {\n\n      case config.DIRECTIVE_EVENT:\n        hooks = directives[config.DIRECTIVE_EVENT]\n        handler = attr.event\n          ? createEventListener(attr.event)\n          : createMethodListener(attr.method, attr.args, $stack)\n        break\n\n      case env.RAW_TRANSITION:\n        transition = transitions[value]\n        if (transition) {\n          vnode.transition = transition\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`transition [${value}] is not found.`)\n        }\n        return\n\n      case config.DIRECTIVE_MODEL:\n        hooks = directives[config.DIRECTIVE_MODEL]\n        vnode.model = getValue(attr.expr, env.TRUE)\n        binding = attr.expr.absoluteKeypath\n        break\n\n      case config.DIRECTIVE_LAZY:\n        setPair(vnode, 'lazy', name, value)\n        return\n\n      default:\n        hooks = directives[name]\n        if (attr.method) {\n          handler = createMethodListener(attr.method, attr.args, $stack)\n        }\n        else if (attr.getter) {\n          getter = createGetter(attr.getter, $stack)\n        }\n        break\n\n    }\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns,\n          name,\n          key,\n          value,\n          binding,\n          hooks,\n          getter,\n          handler\n        }\n      )\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`directive [${key}] is not found.`)\n    }\n\n  },\n\n  createEventListener = function (type: string): signature.eventListener {\n    return function (event: Event, data?: Record<string, any>) {\n      if (event.type !== type) {\n        event = new Event(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    method: string,\n    args: Function | void,\n    stack: any[]\n  ): signature.directiveHandler {\n    return function (event?: Event, data?: Record<string, any>) {\n\n      const callee = context[method]\n\n      if (event instanceof Event) {\n\n        let result: any | void\n\n        if (args) {\n          // 给当前 scope 加上 event 和 data\n          eventScope = {\n            $event: event,\n            $data: data,\n          }\n          result = execute(callee, context, args(stack))\n          // 阅后即焚\n          eventScope = env.UNDEFINED\n        }\n        else {\n          result = execute(callee, context, data ? [event, data] : event)\n        }\n\n        if (result === env.FALSE) {\n          event.prevent().stop()\n        }\n      }\n      else {\n        execute(\n          callee,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): signature.directiveGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        lastVnode.text += text\n      }\n      else {\n        array.push(\n          vnodeList,\n          {\n            isText: env.TRUE,\n            text,\n            context,\n            keypath: $keypath,\n          }\n        )\n      }\n    }\n  },\n\n  renderElementVnode = function (\n    vnode: Record<string, any>,\n    attrs: any[] | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (attrs) {\n      array.each(\n        attrs,\n        function (attr: any) {\n\n          let { name, value } = attr\n\n          switch (attr.type) {\n\n            case nodeType.ATTRIBUTE:\n\n              if (attr.binding) {\n                value = addBinding(vnode, attr)\n              }\n\n              if (vnode.isComponent) {\n                setPair(vnode, 'props', name, value)\n              }\n              else {\n                setPair(vnode, 'nativeAttrs', name, { name, value })\n              }\n\n              break\n\n            case nodeType.PROPERTY:\n              setPair(\n                vnode,\n                'nativeProps',\n                name,\n                {\n                  name,\n                  value: attr.binding ? addBinding(vnode, attr) : value,\n                  hint: attr.hint,\n                }\n              )\n              break\n\n            case nodeType.DIRECTIVE:\n              addDirective(vnode, attr)\n              break\n\n            case nodeType.SPREAD:\n              spreadObject(vnode, attr)\n              break\n\n          }\n        }\n      )\n      // 确保有 directives 就必然有 lazy\n      if (vnode.directives && !vnode.lazy) {\n        vnode.lazy = env.EMPTY_OBJECT\n      }\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack), vnodes = context.get(name)\n\n    if (vnodes) {\n      array.each(\n        vnodes,\n        function (vnode: any) {\n          array.push(vnodeList, vnode)\n          vnode.parent = context\n        }\n      )\n    }\n    else if (defaultRender) {\n      defaultRender()\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n      return\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n        return\n      }\n    }\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`partial [${name}] is not found.`)\n    }\n  },\n\n  renderEach = function (expr: ExpressionNode, index: string | Function | void, handler?: Function) {\n\n    let eachIndex: string | void, eachHandler: Function\n\n    if (is.func(index)) {\n      eachHandler = index as Function\n      eachIndex = env.UNDEFINED\n    }\n    else {\n      eachHandler = handler as Function\n      eachIndex = index as string\n    }\n\n    const value = getValue(expr),\n\n    exprKeypath = expr[env.RAW_ABSOLUTE_KEYPATH],\n\n    eachKeypath = exprKeypath || keypathUtil.join($keypath, expr.raw),\n\n    callback = function (item: any, key: string | number) {\n\n      let lastKeypath = $keypath, lastScope = $scope, lastKeypathStack = $stack\n\n      $keypath = keypathUtil.join(eachKeypath, toString(key))\n      $scope = {}\n      $stack = object.copy($stack)\n\n      array.push($stack, $keypath)\n      array.push($stack, $scope)\n\n      // 从下面这几句赋值可以看出\n      // scope 至少会有 '$keypath' '$item' eachIndex 等几个值\n      $scope.$keypath = $keypath\n\n      // 类似 {{#each 1 -> 10}} 这样的临时循环，需要在 scope 上加上当前项\n      // 因为通过 context.get() 无法获取数据\n      if (!exprKeypath) {\n        $scope.$item = item\n      }\n\n      if (eachIndex) {\n        $scope[eachIndex] = key\n      }\n\n      eachHandler(item, key)\n\n      $keypath = lastKeypath\n      $scope = lastScope\n      $stack = lastKeypathStack\n\n    }\n\n    if (is.array(value)) {\n      array.each(value, callback)\n    }\n    else if (is.object(value)) {\n      object.each(value, callback)\n    }\n    else if (is.func(value)) {\n      value(callback)\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        `${i}`,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// 这里先写 IE9 支持的接口\ninnerText = 'textContent',\n\nfindElement = function (selector: string): Element | void {\n  const node = (doc as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement): any {\n  return event\n}\n\nif (doc) {\n\n  if (!doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n\n  // 为 IE9 以下浏览器打补丁\n  if (process.env.NODE_LEGACY) {\n\n    if (!doc.addEventListener) {\n\n      const PROPERTY_CHANGE = 'propertychange'\n\n      addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n        if (type === env.EVENT_INPUT) {\n          addEventListener(\n            node,\n            PROPERTY_CHANGE,\n            // 借用 EMITTER，反正只是内部临时用一下...\n            listener[EMITTER] = function (event: any) {\n              if (event.propertyName === env.RAW_VALUE) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_INPUT\n                execute(listener, this, event)\n              }\n            }\n          )\n        }\n        else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n          addEventListener(\n            node,\n            env.EVENT_CLICK,\n            listener[EMITTER] = function (event: any) {\n              event = new CustomEvent(event)\n              event.type = env.EVENT_CHANGE\n              execute(listener, this, event)\n            }\n          )\n        }\n        else {\n          node.attachEvent(`on${type}`, listener)\n        }\n      }\n\n      removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n        if (type === env.EVENT_INPUT) {\n          removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n          delete listener[EMITTER]\n        }\n        else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n          removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n          delete listener[EMITTER]\n        }\n        else {\n          node.detachEvent(`on${type}`, listener)\n        }\n      }\n\n      function isBoxElement(node: HTMLInputElement) {\n        return node.tagName === 'INPUT'\n          && (node.type === 'radio' || node.type === 'checkbox')\n      }\n\n      class IEEvent {\n\n        currentTarget: HTMLElement\n\n        target: HTMLElement | EventTarget\n\n        originalEvent: Event\n\n        constructor(event: Event, element: HTMLElement) {\n\n          object.extend(this, event)\n\n          this.currentTarget = element\n          this.target = event.srcElement || element\n          this.originalEvent = event\n\n        }\n\n        preventDefault() {\n          this.originalEvent.returnValue = env.FALSE\n        }\n\n        stopPropagation() {\n          this.originalEvent.cancelBubble = env.TRUE\n        }\n\n      }\n\n      // textContent 不兼容 IE 678\n      innerText = 'innerText'\n\n      createEvent = function (event, element) {\n        return new IEEvent(event, element)\n      }\n\n      findElement = function (selector: string): Element | void {\n        // 去掉 #\n        if (string.codeAt(selector, 0) === 35) {\n          selector = string.slice(selector, 1)\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`legacy 版本选择器只支持 #id 格式`)\n          }\n        }\n        const node = (doc as Document).getElementById(selector)\n        if (node) {\n          return node\n        }\n      }\n\n    }\n\n  }\n\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && isDef(node[STYLE_SHEET])) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && isDef(node[STYLE_SHEET])) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          node.innerHTML = html as string\n        }\n      }\n      else {\n        node.innerHTML = html as string\n      }\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[env.EVENT_INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = env.EVENT_INPUT\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([env.EVENT_CLICK, env.EVENT_TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as config from 'yox-config/index'\nimport api from 'yox-dom/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\n\nfunction getOptionValue(option: HTMLOptionElement) {\n  return isDef(option.value)\n    ? option.value\n    : option.text\n}\n\ninterface Control {\n\n  set(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  sync(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nconst syncWatcherOptions = { sync: env.TRUE },\n\ninputControl: Control = {\n  set(input: HTMLInputElement, keypath: string, context: Yox) {\n    input.value = toString(context.get(keypath))\n  },\n  sync(input: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, input.value)\n  },\n  name: env.RAW_VALUE\n},\n\nselectControl: Control = {\n  set(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    array.each(\n      array.toArray(select.options),\n      select.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, getOptionValue(option), env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (getOptionValue(option) == value) {\n            select.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const options = array.toArray(select.options)\n    if (select.multiple) {\n      const values = []\n      array.each(\n        options,\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              getOptionValue(option)\n            )\n          }\n        }\n      )\n      // 如果新旧值都是 []，set 没有意义\n      if (!array.falsy(values) || !array.falsy(context.get(keypath))) {\n        context.set(keypath, values)\n      }\n    }\n    else {\n      context.set(\n        keypath,\n        getOptionValue(\n          options[select.selectedIndex]\n        )\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: Control = {\n  set(radio: HTMLInputElement, keypath: string, context: Yox) {\n    radio.checked = radio.value === toString(context.get(keypath))\n  },\n  sync(radio: HTMLInputElement, keypath: string, context: Yox) {\n    if (radio.checked) {\n      context.set(keypath, radio.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: Control = {\n  set(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    checkbox.checked = is.array(value)\n      ? array.has(value, checkbox.value, env.FALSE)\n      : (is.boolean(value) ? value : !!value)\n  },\n  sync(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (checkbox.checked) {\n        context.append(keypath, checkbox.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, checkbox.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, checkbox.checked)\n    }\n  },\n  name: 'checked'\n},\n\ncomponentControl: Control = {\n  set(component: Yox, keypath: string, context: Yox) {\n    component.set(\n      component.$model,\n      context.get(keypath)\n    )\n  },\n  sync(component: Yox, keypath: string, context: Yox) {\n    context.set(\n      keypath,\n      component.get(component.$model)\n    )\n  },\n  name: env.RAW_VALUE\n},\n\nspecialControls = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n  select: selectControl,\n},\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { binding } = directive,\n\n    { context, nativeProps } = vnode,\n\n    lazy = vnode.lazy[config.DIRECTIVE_MODEL] || vnode.lazy[env.EMPTY_STRING],\n\n    set = function () {\n      if (!isSyncing) {\n        control.set(component || element, binding as string, context)\n      }\n    },\n\n    sync = function () {\n      isSyncing = env.TRUE\n      control.sync(component || element, binding as string, context)\n      isSyncing = env.FALSE\n    },\n\n    isSyncing = env.FALSE,\n\n    component: Yox,\n\n    element: HTMLElement,\n\n    control: Control,\n\n    type: string\n\n    if (lazy && lazy !== env.TRUE) {\n      sync = debounce(sync, lazy)\n    }\n\n    if (vnode.isComponent) {\n\n      component = node as Yox\n      control = componentControl\n\n      // 监听交互，修改数据\n      component.watch(component.$model, sync)\n\n    }\n    else {\n\n      element = node as HTMLElement\n      control = specialControls[element[env.RAW_TYPE]] || specialControls[api.tag(element) as string]\n\n      // checkbox,radio,select 监听的是 change 事件\n      type = env.EVENT_CHANGE\n\n      // 如果是输入框，则切换成 input 事件\n      if (!control) {\n        control = inputControl\n        if (lazy !== env.TRUE) {\n          type = env.EVENT_INPUT\n        }\n      }\n\n      // 如果模板里没写对应的属性，则这里先设值\n      if (!nativeProps || !object.has(nativeProps, control.name)) {\n        set()\n      }\n\n      // 监听交互，修改数据\n      api.on(element, type, sync)\n\n    }\n\n    // 监听数据，修改界面\n    // 这里使用同步监听，这样才能使 isSyncing 生效\n    context.watch(binding as string, set, syncWatcherOptions)\n\n    vnode.data[directive.key] = function () {\n      if (vnode.isComponent) {\n        component.unwatch(component.$model, sync)\n      }\n      else {\n        api.off(element, type, sync)\n      }\n      context.unwatch(binding as string, set)\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\n\nimport api from 'yox-dom/index'\n\nconst directive: DirectiveHooks = {\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    const { binding } = directive\n\n    if (binding) {\n\n      const isFuzzy = keypathUtil.isFuzzy(binding),\n\n      watcher = function (newValue: any, oldValue: any, keypath: string) {\n\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          (node as Yox).set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n\n      }\n\n      vnode.context.watch(binding, watcher)\n\n      vnode.data[directive.key] = function () {\n        vnode.context.unwatch(binding, watcher)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[config.HOOK_BEFORE_CREATE], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"el\" option 格式错误`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[config.HOOK_AFTER_CREATE], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        if (placeholder) {\n          logger.fatal('有 el 没 template 是几个意思？')\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || env.RAW_VALUE\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        delete instance.$vnode\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n","import * as config from 'yox-config/index'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  if (process.env.NODE_ENV === 'dev') {\n    logger.warn('hasSlot 过滤器已不建议使用')\n  }\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_COMPONENT","RAW_TRANSITION","RAW_TYPE","RAW_LENGTH","RAW_FUNCTION","RAW_STATIC_KEYPATH","RAW_ABSOLUTE_KEYPATH","KEYPATH_PARENT","KEYPATH_CURRENT","win","window","doc","document","EMPTY_FUNCTION","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","CustomEvent","originalEvent","this","each","callback","reversed","length","let","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toArray","execute","slice","toObject","key","result","indexOf","strict","index","has","last","pop","remove","splice","env.TRUE","falsy","preventDefault","isPrevented","stopPropagation","isStoped","prevent","stop","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","camelize","str","replace","$0","$1","toUpperCase","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","is.string","offset","SEPARATOR","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","matchFuzzy","pattern","cache","RegExp","keys","is.object","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","array.each","objects","copy","deep","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","nativeConsole","console","useSource","test","env.EMPTY_FUNCTION","isDebug","env.win","debug","is.boolean","warn","msg","log","error","Error","Emitter","ns","listeners","parseNamespace","name","string.indexOf","string.slice","createMatchListener","listener","options","matchNamespace","namespace","fire","bullet","data","filter","event","instance","isComplete","object.copy","array.has","ctx","num","max","off","matchListener","on","addListener","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","NextTask","nextTasks","append","task","prepend","run","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","oldNativeAttrs","nativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","object.each","attr","node","removeAttr","oldNativeProps","nativeProps","prop","removeProp","hint","oldDirectives","directives","field.COMPONENT","isKeypathChange","directive","hooks","unbind","bind","isComponent","props","checkPropTypes","slots","ref","refs","$refs","isPatchable","tag","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","createComponent","child","parent","create","$el","field.LOADING","component.update","directive.update","guid","createData","field.ID","createVnode","isText","createText","text","isComment","createComment","isAsync","component","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","children","addVnodes","isStyle","html","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","isStatic","nextTick","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","op","right","raw","nodeType.BINARY","createIdentifierInner","lookup","staticKeypath","nodeType.IDENTIFIER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","getLiteralNode","nodes","createMemberIfNeeded","literal","identifier","array.push","keypathUtil.join","nodeType.MEMBER","createMemberInner","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","->","=>","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","skip","pick","scanToken","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","nodeType.ARRAY","CODE_OBRACE","scanObject","operator","scanOperator","interpreter.unary","creator.createLiteral","arg","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","creator.createIdentifier","CODE_SLASH","isIdentifierPart","callee","creator.createMemberIfNeeded","nodeType.CALL","object.has","keywordLiterals","CODE_PLUS","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_MINUS","CODE_GREAT","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","scanBinary","token","operatorInfo","lastOperator","lastOperatorInfo","output","interpreter.binary","creator.createBinary","yes","no","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","fatal","message","env.RAW_TRUE","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","expr","nodeType.DIRECTIVE","createProperty","nodeType.PROPERTY","nodeType.TEXT","isLeaf","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","compileCache","directiveSeparator","tagPattern","commentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","nodeList","currentElement","currentAttribute","startQuote","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","isComplex","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","element","slot","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","env.RAW_STATIC_KEYPATH","binding","config.DIRECTIVE_LAZY","exprCompiler.compile","partial","array.falsy","attrs","creator.createProperty","env.RAW_TYPE","config.HINT_STRING","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","isSvg","creator.createElement","config.DIRECTIVE_MODEL","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","config.DIRECTIVE_EVENT","lazy","config.DIRECTIVE_CUSTOM","custom","creator.createAttribute","lowerName","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","isCondition","helper.name2Type","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","JSON","stringify","isStringRequired","joinStack","collectStack","nodeStringify","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_ELEMENT_VNODE","ARG_CONTEXT","SEP_COMMA","SEP_COLON","SEP_PLUS","STRING_TRUE","STRING_FALSE","STRING_EMPTY","toJSON","CODE_PREFIX","array.join","CODE_SUFFIX","stringifyObject","obj","fields","stringifyArray","arr","stringifyCall","stringifyFunction","stringifyGroup","stringifyExpression","renderName","extra","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","map","stringifyConditionChildren","trimArgs","removable","array.unshift","renderElement","childs","elementChilds","elementSlots","elementAttrs","config.SLOT_DATA_PREFIX","addSlot","object.falsy","getComponentSlots","exprNodeType.CALL","method","exprNodeType.LITERAL","getter","isUndef","stringifyIf","nodeExecutor","setPair","render","filters","partials","transitions","template","eventScope","$keypath","$scope","$stack","vnodeStack","localPartials","stack","depIgnore","defaultKeypath","scope","absoluteKeypath","$item","object.get","logger.warn","getValue","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","createEventListener","Event","createMethodListener","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","lastVnode","renderElementVnode","handler","model","addDirective","env.RAW_ABSOLUTE_KEYPATH","spreadObject","renderSlots","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachIndex","eachHandler","exprKeypath","eachKeypath","lastKeypath","lastScope","lastKeypathStack","first","len","invoke","syncWatcherOptions","sync","asyncWatcherOptions","Computed","deps","observer","setter","unique","$2","diff","fixed","dep","add","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","immediate","build","env.EMPTY_ARRAY","force","lastComputed","current","watch","unwatch","Observer","nextTask","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","pending","diffAsync","filterWatcher","addComputed","object.sort","removeComputed","once","emitter","formatWatcherOptions","toggle","increase","decrease","min","insert","removeAt","array.remove","object.clear","env.doc","innerText","findElement","selector","querySelector","addEventListener","removeEventListener","addClass","className","classList","removeClass","createEvent","body","classes","CHAR_WHITESPACE","isBoxElement","EMITTER","propertyName","attachEvent","detachEvent","IEEvent","currentTarget","srcElement","returnValue","cancelBubble","getElementById","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","setAttribute","getAttribute","removeAttribute","appendChild","removeChild","nextSibling","find","nodeType","cssText","innerHTML","nativeListeners","special","nativeListener","delay","timer","array.toArray","arguments","locked","immediateTypes","array.toObject","debounce","el","getOptionValue","option","inputControl","input","componentControl","$model","specialControls","radio","checked","checkbox","select","multiple","selected","selectedIndex","control","isSyncing","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","selectorPattern","Yox","$options","extensions","$observer","$emitter","placeholder","$parent","components","methods","$template","watchers","snabbdom.create","events","setFlexibleOptions","getComponentAsync","$queue","replacement","getResource","setResource","formatValue","mergeResource","locals","globals","object.extend","use","plugin","install","templateCompiler.compile","propTypes","rule","matched","required","actual","string.falsy","t","is.is","downward","eventData","$children","watchOnce","watcherOptions","$directives","$transitions","$components","$partials","$filters","forceUpdate","templateRender.render","hook","isRemove","logger"],"mappings":"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"}