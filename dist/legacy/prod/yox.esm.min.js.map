{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/holder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/platform/web.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/util/generator.ts","../../../../yox-template-compiler/src/generator.ts","../../../../yox-expression-compiler/src/generator.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from '../../../yox-type/src/global'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import { ValueHolder } from '../../../yox-type/src/type'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default holder","import {\n  data,\n  ValueHolder\n} from '../../../yox-type/src/type'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: data, object: data): data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: data | void, object2: data | void): data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\ndefaultLogLevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = env.WINDOW && /edge|msie|trident/i.test(env.WINDOW.navigator.userAgent)\n  ? env.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : env.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (env.GLOBAL) {\n    const logLevel = env.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  nativeListener,\n  EmitterOptions,\n  EmitterInterface,\n} from '../../../yox-type/src/global'\n\nimport execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n  NextTaskInterface,\n} from '../../../yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n  Attribute,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import {\n  VNode,\n  Property\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import {\n  VNode,\n  Directive,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import { VNode } from '../../yox-type/src/type'\n\nimport * as config from '../../yox-config/src/config'\n\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[config.DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (props) {\n        node.checkProps(props)\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  DomUtil,\n  data,\n  VNode,\n} from '../../yox-type/src/type'\n\nimport {\n  YoxOptions,\n  YoxInterface,\n} from '../../yox-type/src/global'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomUtil, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomUtil, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomUtil, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomUtil, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomUtil, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomUtil, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomUtil, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomUtil, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomUtil, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomUtil, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomUtil, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  propertyHint,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: propertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from '../../../yox-config/src/config'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 常见的自闭合标签\nconst selfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function isSvg(tagName: string) {\n  return array.has(svgTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        config.HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        config.HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        config.HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return env.TRUE\n  }\n  // <div data-name checked>\n  else {\n    return string.startsWith(name, 'data-')\n      ? env.EMPTY_STRING\n      : name\n  }\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = env.FALSE, hasValue = env.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : env.UNDEFINED\n\n        if (name === 'type') {\n          hasType = env.TRUE\n        }\n        else if (name === env.RAW_VALUE) {\n          hasValue = env.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', config.HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = env.TRUE\n  }\n\n}","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = env.TRUE, offset = 0\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  let firstNode = nodes.shift() as Node,\n\n  { length } = nodes,\n\n  lookup = env.TRUE,\n\n  offset = 0\n\n  // member 要求至少两个节点\n  if (length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    let isLiteral = env.TRUE, staticNodes: string[] = [], runtimeNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (node.type === nodeType.LITERAL) {\n\n          const literal = node as Literal\n\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            return\n          }\n\n          if (literal.raw !== env.KEYPATH_CURRENT) {\n            array.push(\n              staticNodes,\n              toString(literal.value)\n            )\n          }\n\n        }\n        else {\n          isLiteral = env.FALSE\n        }\n\n        array.push(\n          runtimeNodes,\n          node\n        )\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      const identifier = firstNode as Identifier\n\n      lookup = identifier.lookup\n      offset += identifier.offset\n\n      let name = identifier.name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (name) {\n        array.unshift(staticNodes, name)\n      }\n\n      // a.b.c\n      if (isLiteral) {\n        // 转成 Identifier\n        name = array.join(staticNodes, keypathUtil.separator)\n        firstNode = createIdentifierInner(name, name, lookup, offset)\n      }\n      // a[b]\n      else {\n        firstNode = createMemberInner(raw, firstNode, env.UNDEFINED, runtimeNodes, lookup, offset)\n      }\n    }\n    else {\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, keypathUtil.separator),\n          env.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          env.UNDEFINED,\n          runtimeNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n","import * as env from '../../yox-common/src/util/env'\n\nexport const unary = {\n  '+': env.TRUE,\n  '-': env.TRUE,\n  '~': env.TRUE,\n  '!': env.TRUE,\n  '!!': env.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.RAW_MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.RAW_MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.RAW_MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, '表达式错误')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  isSvg,\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  compatElement,\n} from './platform/web'\n\nimport * as config from '../../yox-config/src/config'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.RAW_MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.RAW_MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.RAW_MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的值不能用插值或 if 语法`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`${attr.name} 忘了写值吧？`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === config.DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === config.DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    isEvent = directive.ns === config.DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === config.DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {}\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`lazy 指令的值 [${raw}] 必须是大于 0 的数字`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (!eventPattern.test(raw) && !eventNamespacePattern.test(raw)) {\n            fatal('事件转换名称只能是 [name] 或 [name.namespace] 格式')\n          }\n          else if (currentElement\n            && currentElement.isComponent\n            && directive.name === raw\n          ) {\n            fatal('转换组件事件的名称不能相同')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal(`model 指令的值格式错误: [${raw}]`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          fatal(`${directive.ns} 指令的表达式错误: [${text}]`)\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (element.attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n        else if (!slot) {\n          fatal(`<template> 不写 slot 属性是几个意思？`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = config.SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === config.DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`model 不能写在 if 内`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('只能写一个 else 啊')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('不写 if 是几个意思')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, env.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              isSvg(tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name),\n              env.EMPTY_STRING\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `each 不能写在属性的值里`\n                : `each 不能写在属性层级`\n            )\n          }\n        }\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ 和 }}} 无法配对`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ 和 }} 无法配对`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('还有节点未出栈')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as env from './env'\nimport * as array from './array'\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), COMMA)})`\n}\n\nexport function toString(value: any): string {\n  return JSON.stringify(value)\n}\n","import {\n  data,\n} from '../../yox-type/src/type'\n\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as exprGenerator from '../../yox-expression-compiler/src/generator'\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_SLOT = 'q',\n\nRENDER_PARTIAL = 'r',\n\nRENDER_IMPORT = 's',\n\nRENDER_EACH = 't',\n\nTO_STRING = 'u',\n\nARG_STACK = 'v',\n\nCODE_RETURN = 'return '\n\n// 序列化代码的前缀\nlet codePrefix: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: Object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${env.RAW_FUNCTION}(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, env.FALSE, env.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: generator.TRUE,\n        text: generator.EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (isUndef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (isUndef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (isUndef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (isUndef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    [data, tag, attrs, childs, slots]\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(config.SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void\n\n  if (tag === env.RAW_SLOT) {\n    const args = [generator.toString(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          outputAttrs,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    data.tag = generator.toString(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = generator.TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = generator.TRUE\n  }\n\n  if (isOption) {\n    data.isOption = generator.TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = generator.TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(html, env.TRUE)\n  }\n\n  if (isComponent) {\n    data.isComponent = generator.TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, generator.COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      generator.toString(node.hint),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr } = node\n\n  if (ns === config.DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === env.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === config.DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === config.DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === config.DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === config.DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, env.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [\n        result\n      ]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      ),\n      renderExpression(node.from, env.TRUE),\n      node.to ? renderExpression(node.to, env.TRUE) : env.UNDEFINED,\n      node.equal ? generator.TRUE : env.UNDEFINED,\n      node.index ? generator.toString(node.index) : env.UNDEFINED\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n\n  if (!codePrefix) {\n    codePrefix = `function(${\n      array.join([\n        RENDER_EXPRESSION_IDENTIFIER,\n        RENDER_EXPRESSION_MEMBER_KEYPATH,\n        RENDER_EXPRESSION_MEMBER_LITERAL,\n        RENDER_EXPRESSION_CALL,\n        RENDER_TEXT_VNODE,\n        RENDER_ATTRIBUTE_VNODE,\n        RENDER_PROPERTY_VNODE,\n        RENDER_LAZY_VNODE,\n        RENDER_TRANSITION_VNODE,\n        RENDER_BINDING_VNODE,\n        RENDER_MODEL_VNODE,\n        RENDER_EVENT_METHOD_VNODE,\n        RENDER_EVENT_NAME_VNODE,\n        RENDER_DIRECTIVE_VNODE,\n        RENDER_SPREAD_VNODE,\n        RENDER_ELEMENT_VNODE,\n        RENDER_SLOT,\n        RENDER_PARTIAL,\n        RENDER_IMPORT,\n        RENDER_EACH,\n        TO_STRING,\n      ], generator.COMMA)\n    }){${CODE_RETURN}`\n  }\n\n  return codePrefix + nodeGenerator[node.type](node) + '}'\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = env.FALSE,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      env.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = env.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          identifier.lookup ? generator.TRUE : env.UNDEFINED,\n          identifier.offset > 0 ? generator.toString(identifier.offset) : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED,\n          depIgnore ? generator.TRUE : env.UNDEFINED,\n          stack ? stack : env.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = env.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            lookup ? generator.TRUE : env.UNDEFINED,\n            offset > 0 ? generator.toString(offset) : env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n            depIgnore ? generator.TRUE : env.UNDEFINED,\n            stack ? stack : env.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            env.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            holder ? generator.TRUE : env.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = env.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  // 不需要 value holder\n  if (!holder) {\n    return value\n  }\n\n  // 内部的临时值，且 holder 为 true\n  if (inner) {\n    return isSpecialNode\n      ? value + '.' + env.RAW_VALUE\n      : value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([env.RAW_VALUE + generator.COLON + value])\n\n}\n","import {\n  data,\n  lazyValue,\n  propertyHint,\n  computedGetter,\n  ValueHolder,\n  VNode,\n} from '../../yox-type/src/type'\n\nimport {\n  listener,\n  YoxInterface,\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/global'\n\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport globalHolder from '../../yox-common/src/util/holder'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`\"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): listener {\n    return function (event: CustomEvent, data?: data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): listener {\n    return function (event: CustomEvent, data?: data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): computedGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: propertyHint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: lazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`Transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: propertyHint): any {\n\n    const key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: holder.keypath,\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        value: holder.value,\n        binding: holder.keypath,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`Directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(config.DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            KEY_DIRECTIVES,\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks: directives[config.DIRECTIVE_BINDING],\n              binding: keypathUtil.join(keypath, env.RAW_WILDCARD),\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component \"${tag}\" can't be found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, keypathUtil.separator)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], keypathUtil.separator)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = env.UNDEFINED\n    globalHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`Partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ValueHolder,\n    to: ValueHolder | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = from.value,\n\n    fromKeypath = from.keypath\n\n    if (to) {\n      let toValue = to.value, count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    toString\n  )\n\n}","import {\n  listener,\n  nativeListener,\n  SpecialEventHooks,\n} from '../../yox-type/src/global'\n\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: nativeListener) {\n    let locked = env.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: nativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (env.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (env.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (env.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, env.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string, hint?: number): void {\n  object.set(\n    node,\n    name,\n    hint === config.HINT_BOOLEAN\n      ? env.FALSE\n      : env.EMPTY_STRING,\n    env.FALSE\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != env.NULL) {\n      return value as string\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: listener): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(type, listener)\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: listener): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = env.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.error(`Special event \"${type}\" is existed.`)\n    }\n    logger.info(`Special event \"${type}\" add success.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  computedGetter,\n  computedSetter,\n  ComputedInterface,\n  ObserverInterface,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  WatcherOptions,\n} from '../../yox-type/src/global'\n\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: computedGetter | void,\n\n    setter: computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: computedGetter\n\n  setter: computedSetter | void\n\n  watcher: watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: computedGetter,\n    setter: computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from '../../../yox-type/src/global'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  watcher,\n  WatcherOptions,\n} from '../../../yox-type/src/global'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  data,\n  computedGetter,\n  ValueHolder,\n  ObserverInterface,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from '../../yox-type/src/global'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, watcher | WatcherOptions>,\n    watcher?: watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as data,\n      function (options: watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  listener,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { name, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n    if (value === env.TRUE) {\n      name = env.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === env.EVENT_CLICK || name === env.EVENT_TAP\n      )\n    }\n\n  }\n\n  if (vnode.isComponent) {\n\n    (node as YoxInterface).on(name, handler)\n    vnode.data[directive.key] = function () {\n      (node as YoxInterface).off(name, handler as listener)\n    }\n\n  }\n  else {\n\n    domApi.on(node as HTMLElement, name, handler)\n    vnode.data[directive.key] = function () {\n      domApi.off(node as HTMLElement, name, handler as listener)\n    }\n\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  lazyValue,\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  watcher,\n  listener,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: lazyValue | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n}\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.binding as string,\n\n  lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n  set: watcher | void,\n\n  sync: watcher,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    sync = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      component.unwatch(viewBinding, sync)\n    }\n\n    component.watch(viewBinding, sync)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = env.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (inputTypes[type]) {\n        control = inputTypes[type]\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== env.TRUE) {\n        eventName = env.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync as listener)\n    }\n\n    domApi.on(element, eventName, sync as listener)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as watcher)\n    set = env.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  watcher,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.binding as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as watcher)\n    watcher = env.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  data,\n  filter,\n  computedGetter,\n  component,\n  componentCallback,\n  componentLoader,\n  propTypeFunction,\n  propValueFunction,\n  PropRule,\n  VNode,\n  IsUtil,\n  DomUtil,\n  ArrayUtil,\n  StringUtil,\n  ObjectUtil,\n  LoggerUtil,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  listener,\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n  YoxOptions,\n  YoxInterface,\n  YoxPlugin,\n  DirectiveHooks,\n  TransitionHooks,\n  EmitterClass,\n  CustomEventClass,\n} from '../../yox-type/src/global'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as domApi from '../../yox-dom/src/dom'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsUtil = is\n  public static dom: DomUtil = domApi\n  public static array: ArrayUtil = array\n  public static object: ObjectUtil = object\n  public static string: StringUtil = string\n  public static logger: LoggerUtil = logger\n  public static Event: CustomEventClass = CustomEvent\n  public static Emitter: EmitterClass = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 创建组件对象\n   */\n  public static create(options: YoxOptions): YoxOptions {\n    return options\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`\"template\" should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, component>,\n    component?: component\n  ): component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, filter>,\n    filter?: filter\n  ): filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(config.HOOK_BEFORE_CREATE + config.NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === env.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as propValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`child component's data should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('\"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('\"template\" option is required.')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, listener>,\n    listener?: listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, listener>,\n    listener?: listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, watcher | WatcherOptions>,\n    watcher?: watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`Component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[config.DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || config.MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, component>,\n    component?: component\n  ): component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, filter>,\n    filter?: filter\n  ): filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        instance.fire(config.HOOK_BEFORE_UPDATE + config.NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        instance.fire(config.HOOK_BEFORE_MOUNT + config.NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + config.NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: data): void {\n    if (process.env.NODE_ENV === 'development') {\n      const instance = this\n      object.each(\n        props,\n        function (value, key) {\n          instance.checkProp(key, value)\n        }\n      )\n    }\n  }\n\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[config.HOOK_BEFORE_DESTROY], instance)\n      instance.fire(config.HOOK_BEFORE_DESTROY + config.NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[config.HOOK_AFTER_DESTROY], instance)\n      instance.fire(config.HOOK_AFTER_DESTROY + config.NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as propTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item: string) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  if (process.env.NODE_ENV !== 'pure') {\n    execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n    instance.fire(config.HOOK_AFTER_CREATE + config.NAMESPACE_HOOK)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, listener>,\n  listener?: listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as listener, once)\n  }\n  else {\n    object.each(\n      type as data,\n      function (value: listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(\n  registry: Record<string, component | componentCallback[]> | void,\n  name: string,\n  callback: componentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: YoxOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as componentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as componentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as componentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n\n}\n\nfunction getResource(registry: data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: data, name: string | data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","KEYPATH_PARENT","KEYPATH_CURRENT","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","CustomEvent","[object Object]","type","originalEvent","this","phase","PHASE_CURRENT","instance","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","env.RAW_MINUS_ONE","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","offset","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","env.EMPTY_FUNCTION","stylePrefix","env.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","env.GLOBAL","logLevel","getStyle","backgroundColor","Error","Emitter","ns","listeners","filter","name","parseNamespace","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","matchListener","createMatchListener","object.each","string.indexOf","string.slice","matchTrue","namespace","nextTick","setImmediate","isNative","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","shared","NextTask","tasks","run","array.unshift","task","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODEL_PROP_DEFAULT","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","once","bind","unbind","hooks","ref","props","slots","isComponent","model","config.DIRECTIVE_MODEL","$model","checkProps","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","expr","nodeType.DIRECTIVE","keypathUtil.join","createProperty","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifierInner","lookup","nodeType.IDENTIFIER","createMemberInner","lead","nodes","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createMemberIfNeeded","firstNode","shift","isLiteral","staticNodes","runtimeNodes","literal","identifier","array.join","keypathUtil.separator","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","message","env.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","element","tagName","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","exprNodeType.IDENTIFIER","binding","getAttributeDefaultValue","exprCompiler.compile","e","exprNodeType.LITERAL","partial","attrs","hasType","env.RAW_VALUE","creator.createProperty","config.HINT_STRING","compatElement","config.SLOT_NAME_DEFAULT","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","creator.createElement","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","config.DIRECTIVE_EVENT","config.DIRECTIVE_LAZY","lazy","config.DIRECTIVE_CUSTOM","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","parts","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","TO_STRING","ARG_STACK","CODE_RETURN","codePrefix","isStringRequired","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","generator.toObject","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyObject","obj","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","generator.COMMA","stringifyConditionChildren","renderElement","childs","setPair","outputTag","outputChilds","outputSlots","outputAttrs","config.SLOT_DATA_PREFIX","addSlot","array.falsy","object.falsy","getComponentSlots","renderName","exprNodeType.CALL","stringifyExpressionVnode","stringifyIf","generator.EMPTY","isUndef","generator.AND","generator.NOT","KEY_DIRECTIVES","innerText","innerHTML","findElement","selector","env.DOCUMENT","querySelector","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","createEvent","documentElement","classes","CHAR_WHITESPACE","array.remove","PROPERTY_CHANGE","EMITTER","propertyName","env.EVENT_CHANGE","isBoxElement","env.EVENT_CLICK","attachEvent","detachEvent","IEEvent","object.extend","currentTarget","srcElement","returnValue","cancelBubble","getElementById","STYLE_SHEET","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","getAttribute","appendChild","env.EVENT_MODEL","locked","on","find","cssText","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","Computed","observer","getter","setter","sync","deps","is.boolean","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","Observer","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","formatWatcherOptions","min","insert","object.clear","delay","timer","array.toArray","arguments","handler","debounce","env.EVENT_TAP","domApi.on","domApi.off","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","inputTypes","radio","checked","checkbox","removeAt","dataBinding","lazyValue","viewBinding","control","eventName","checkProp","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","Yox","$options","$emitter","events","$parent","config.HOOK_BEFORE_CREATE","config.NAMESPACE_HOOK","propTypes","methods","watchers","extensions","rule","addComputed","method","placeholder","el","root","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","snabbdom.create","domApi","plugin","install","templateCompiler.compile","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","config.MODEL_PROP_DEFAULT","$el","$directives","$transitions","$partials","$filters","$scope","$keypath","$stack","vnodeStack","localPartials","findValue","defaultKeypath","scope","globalHolder","$item","createMethodListener","$event","$data","createGetter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","config.DIRECTIVE_BINDING","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","componentName","renderSlots","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachHandler","lastScope","lastStack","concat","$length","fromValue","fromKeypath","toValue","templateRender.render","afterHook","config.HOOK_BEFORE_UPDATE","snabbdom.patch","config.HOOK_AFTER_UPDATE","config.HOOK_BEFORE_MOUNT","config.HOOK_AFTER_MOUNT","config.HOOK_BEFORE_DESTROY","isRemove","snabbdom.destroy","config.HOOK_AFTER_DESTROY","toggle","increase","decrease","config.HOOK_AFTER_CREATE","addEvent","registry","componentCallback","queue","promise","then","formatValue","logger","hasSlot"],"mappings":"AAGO,MAAMA,GAAO,EACPC,GAAQ,EACRC,EAAO,KACPC,OAAY,EAEZC,EAAW,OAOXC,EAAW,OACXC,EAAW,OAEXC,EAAa,SACbC,EAAc,UACdC,EAAgB,YAChBC,EAAgB,YAChBC,EAAiB,aAGjBC,EAAY,QACZC,EAAa,SACbC,EAAe,WACfC,EAAe,WACfC,EAAe,IAEfC,EAAiB,KACjBC,EARW,OAUXC,GAAiB,EAKjBC,EA5BgB,oBA4BAC,OAA2BA,OAASlB,EAKpDmB,EAjCgB,oBAiCEC,SAA6BA,SAAWpB,EAK1DqB,EAtCgB,oBAsCAC,OAA2BA,OAASL,EAYpDM,EAAY,MAKZC,EAAc,QAUdC,EAAe,SAKfC,EAAc,QAKdC,EAAiB,aAOjBC,EAAeC,OAAOC,OAAO,IAK7BC,EAAcF,OAAOC,OAAO,IAK5BE,EAAe,cCrGHC,GACvB,OAAOA,IAAWC,aCDKD,GACvB,OAAOA,IAAWC,WCKJC,EAAKC,GACnB,cAAcA,IAAUC,WASVC,EAAMF,GACpB,OAAOG,MAAMC,QAAQJ,YASPK,EAAOL,GAErB,OAAOA,IAAUM,GAA6B,iBAAVN,WAStBO,EAAOP,GACrB,MAAwB,iBAAVA,WASAQ,EAAOR,GACrB,MAAwB,iBAAVA,WASAS,EAAQT,GACtB,MAAwB,kBAAVA,WASAU,EAAQV,GACtB,OAAOQ,EAAOR,IACRO,EAAOP,KAAWW,MAAMC,WAAWZ,KAAWa,SAASb,mGC5DtCc,EAASC,EAAeC,GAC/C,GAAIC,EAAQH,GACV,OAAOI,EAASF,GACZF,EAAGK,MAAMJ,EAASC,GAClBI,EAAML,GACJD,EAAGO,KAAKN,EAASC,GACjBI,EAAMJ,GACJF,EAAGE,GACHF,UCZSQ,EAkCnBC,YAAYC,EAAcC,GACxBC,KAAKF,KAAOA,EACZE,KAAKC,MAAQL,EAAYM,cACrBH,IACFC,KAAKD,cAAgBA,GAOzBF,iBACE,MAAMM,EAAWH,KACjB,IAAKG,EAASC,YAAa,CACzB,MAAML,cAAEA,GAAkBI,EACtBJ,GACFA,EAAcM,iBAEhBF,EAASC,YAAcE,EAEzB,OAAOH,EAMTN,kBACE,MAAMM,EAAWH,KACjB,IAAKG,EAASI,SAAU,CACtB,MAAMR,cAAEA,GAAkBI,EACtBJ,GACFA,EAAcS,kBAEhBL,EAASI,SAAWD,EAEtB,OAAOH,EAGTN,UACE,OAAOG,KAAKK,iBAGdR,OACE,OAAOG,KAAKQ,mBCzEhB,SAAgBC,EACdjC,EACAkC,EACAC,GAEA,MAAMC,OAAEA,GAAWpC,EACnB,GAAIoC,EACF,GAAID,EACF,IAAK,IAAIE,EAAID,EAAS,EAAGC,GAAK,GACxBH,EAASlC,EAAMqC,GAAIA,EAAGD,KAAYE,EADPD,UAOjC,IAAK,IAAIA,EAAI,EAAGA,EAAID,GACdF,EAASlC,EAAMqC,GAAIA,EAAGD,KAAYE,EADZD,MASlC,SAASE,EAAcvC,EAAYwC,GACjCxC,EAAMA,EAAMoC,QAAUI,EAGxB,SAASC,EAAiBzC,EAAYwC,GACpCxC,EAAM0C,QAAQF,GAUhB,SAASG,EAAW3C,EAAYF,EAAgB8C,GAC1C5B,EAASlB,GACXmC,EACEnC,EACA,SAAU0C,GACRI,EAAO5C,EAAOwC,KAKlBI,EAAO5C,EAAOF,YAUF+C,EAAQ7C,EAAYL,GAClCgD,EAAQ3C,EAAOL,EAAQ4C,YASTG,EAAW1C,EAAYL,GACrCgD,EAAQ3C,EAAOL,EAAQ8C,GAWzB,SAAgBK,EAAW9C,EAAYL,EAAWoD,GAChD,IAAIC,EAASC,EAUb,OATAhB,EACEjC,EACA,SAAUwC,EAAWU,GACnB,GAAIH,IAAWT,EAAYE,GAAQ7C,EAAS6C,IAAS7C,EAEnD,OADAqD,EAASE,EACFZ,IAINU,WASOG,EAAQnD,GACtB,MAAMoC,OAAEA,GAAWpC,EACnB,GAAIoC,EAAS,EACX,OAAOpC,EAAMoC,EAAS,YAYVgB,EAAOpD,GACrB,MAAMoC,OAAEA,GAAWpC,EACnB,GAAIoC,EAAS,EACX,OAAOpC,EAAMoD,MAYjB,SAAgBC,EAAUrD,EAAYL,EAAWoD,GAC/C,IAAIC,EAAS,EAWb,OAVAf,EACEjC,EACA,SAAUwC,EAASU,IACbH,IAAWT,EAAYE,GAAQ7C,EAAS6C,IAAS7C,KACnDK,EAAMsD,OAAOJ,EAAO,GACpBF,MAGJlB,GAEKkB,EAWT,SAAgBO,EAAOvD,EAAYL,EAAWoD,GAC5C,OAAOD,EAAQ9C,EAAOL,EAAQoD,IAAW,WAS3BS,GAAWxD,GACzB,OAAOgB,EAAShB,GACZA,EACAyD,EAAQC,EAAgBC,MAAO3D,YA6BrB4D,GAAK5D,EAAiB6D,GACpC,OAAO7D,EAAM4D,KAAKC,YASJC,GAAM9D,GACpB,OAAQgB,EAAShB,KAAWA,EAAMoC,ODjNpBhB,gBAAgB,EAEhBA,eAAe,EAEfA,iBAAiB6B,0GCgLjC,SAAyBjD,EAAc+D,EAAqBjE,GAC1D,IAAIkD,EAAS,GAOb,OANAf,EACEjC,EACA,SAAUwC,GACRQ,EAAOe,EAAMvB,EAAKuB,GAAOvB,GAAQ1C,GAAS0C,IAGvCQ,sBChMT,MAAMgB,GAAkB,aAExBC,GAAmB,aAEnBC,GAAoB,SAEpBC,GAAwC,GAExCC,GAAyC,GAEzCC,GAA0C,YAQ1BC,GAASC,GASvB,OARKJ,GAAcI,KACjBJ,GAAcI,GAAOA,EAAIC,QACvBR,GACA,SAAUS,EAAIC,GACZ,OAAOC,GAAMD,MAIZP,GAAcI,YA2CPK,GAAKL,GACnB,OAAOT,GAAMS,GACTM,EACAN,EAAIK,OAWV,SAAgBjB,GAAMY,EAAaO,EAAeC,GAChD,OAAOC,EAAUD,GACbD,IAAUC,EACRF,EACAN,EAAIZ,MAAMmB,EAAOC,GACnBR,EAAIZ,MAAMmB,GAWhB,SAAgBhC,GAAQyB,EAAaU,EAAcH,GACjD,OAAOP,EAAIzB,QAAQmC,EAAM/D,EAAM4D,GAASA,EAAQ,GAWlD,SAAgBI,GAAYX,EAAaU,EAAcF,GACrD,OAAOR,EAAIW,YAAYD,EAAM/D,EAAM6D,GAAOA,EAAMR,EAAInC,iBAUtC+C,GAAWZ,EAAaU,GACtC,OAA8B,IAAvBnC,GAAQyB,EAAKU,YAkBNG,GAAOb,EAAarB,GAClC,OAAOqB,EAAIa,OAAOlC,GAAS,YAMbmC,GAAOd,EAAarB,GAClC,OAAOqB,EAAIe,WAAWpC,GAAS,YAMjByB,GAAMJ,GACpB,OAAOA,EAAIgB,uBAMGC,GAAMjB,GACpB,OAAOA,EAAIkB,uBAUGlC,GAAIgB,EAAaU,GAC/B,OAAOnC,GAAQyB,EAAKU,IAAS,WASfnB,GAAMS,GACpB,OAAQmB,EAAUnB,KAASA,EAAInC,4DArJPmC,GASxB,OARKH,GAAeG,KAClBH,GAAeG,GAAOA,EAAIC,QACxBP,GACA,SAAUQ,EAAIC,GACZ,MAAO,IAAMc,GAAMd,MAIlBN,GAAeG,wBASGA,GAOzB,OANKF,GAAgBE,KACnBF,GAAgBE,GAAOA,EAAIC,QACzBN,GACAS,KAGGN,GAAgBE,+EAyEAA,EAAaU,GACpC,MAAMU,EAASpB,EAAInC,OAAS6C,EAAK7C,OACjC,OAAOuD,GAAU,GAAKT,GAAYX,EAAKU,KAAUU,2DCxInD,MAAMC,GAAa,MAEnBC,GAAkB,MAElBC,GAAwB,QAExBC,GAAuC,GAEvCC,GAAuC,GAE1BnC,GAAY,aASToC,GAAMC,EAAiBC,GACrC,OAAID,IAAYC,EACPA,EAAO/D,OAGTgE,GAAkBF,EADzBC,GAAUtC,IAENsC,EAAO/D,OACPa,WASUhB,GAAKiE,EAAiBhE,GAGpC,MAAMmE,EAAOnF,EAAM6E,GAAWG,IAC1BH,GAAWG,GACVH,GAAWG,GAAWA,EAAQI,MAAMzC,IAEzC,IAAK,IAAIxB,EAAI,EAAGkE,EAAYF,EAAKjE,OAAS,EAAGC,GAAKkE,GAC5CrE,EAASmE,EAAKhE,GAAIA,IAAMkE,KAAejE,EADgBD,eAa/CuB,GAAK4C,EAAkBC,GACrC,OAAOD,GAAYC,EACfD,EAAW3C,GAAY4C,EACvBD,GAAYC,WAQFC,GAAQR,GACtB,OAAOS,GAAWT,EAASU,YASbC,GAAWX,EAAiBY,GAC1C,IAAIC,EAAQf,GAAac,GACzB,IAAKC,EAAO,CACV,MAAMxC,EAAMuC,EACTtC,QAAQoB,GAAY,OACpBpB,QAAQqB,GAAiB,UACzBrB,QAAQsB,GAAuB,cAClCiB,EAAQf,GAAac,GAAW,IAAIE,WAAWzC,MAEjD,MAAMvB,EAASkD,EAAQD,MAAMc,GAC7B,GAAI/D,EACF,OAAOA,EAAO,GCtFlB,MAAMiE,GAAsB,CAC1BnH,MAAOF,YCaOsH,GAAK/G,GACnB,OAAOZ,OAAO2H,KAAK/G,GAGrB,SAASgH,GAAaC,EAAWC,GAC/B,OAAOD,EAAEhF,OAASiF,EAAEjF,OAGtB,SAASkF,GAAcF,EAAWC,GAChC,OAAOA,EAAEjF,OAASgF,EAAEhF,gBAUNmF,GAAKpH,EAAcqH,GACjC,OAAON,GAAK/G,GAAQoH,KAClBC,EAAOF,GAAgBH,aAUXlF,GAAK9B,EAAc+B,GACjC,IAAK,IAAI6B,KAAO5D,EACd,GAAI+B,EAAS/B,EAAO4D,GAAMA,KAASzB,EACjC,eAUUmF,GAAMtH,GACpB8B,GACE9B,EACA,SAAUuH,EAAG3D,UACJ5D,EAAO4D,cAUJ4D,GAAOC,EAAgBzH,GAOrC,OANA8B,GACE9B,EACA,SAAUL,EAAOiE,GACf6D,EAAS7D,GAAOjE,IAGb8H,WAQOC,GAAMC,EAAsBC,GAC1C,OAAOD,GAAWC,EACdJ,GAAOA,GAAO,GAAIG,GAAUC,GAC5BD,GAAWC,WAUDC,GAAK7H,EAAa8H,GAChC,IAAIjF,EAAS7C,EAwBb,OAvBIa,EAASb,GACP8H,GACFjF,EAAS,GACTkF,EACE/H,EACA,SAAUqC,EAAMU,GACdF,EAAOE,GAAS8E,GAAKxF,EAAMyF,MAK/BjF,EAAS7C,EAAOwD,QAGXwE,EAAUhI,KACjB6C,EAAS,GACTf,GACE9B,EACA,SAAUL,EAAOiE,GACff,EAAOe,GAAOkE,EAAOD,GAAKlI,EAAOmI,GAAQnI,KAIxCkD,WAYOoF,GAAIjI,EAAa+F,GAyC/B,OAvCAmC,GACEnC,EACA,SAAUnC,EAAKuE,GAEb,GAAInI,GAAUC,EA6BZ,OADAD,EAASP,EACF0C,EA7Be,CAGtB,IAAIxC,EAAQK,EAAO4D,GAInBwE,EAAWrH,EAAMpB,GAGbA,GAASiB,EAAQjB,EAAMsI,OACzBtI,EAAQA,EAAMsI,OAGZE,EACEC,GACFtB,GAAOnH,MAAQA,EACfK,EAAS8G,IAGT9G,EAASP,EAIXO,EAASL,KAWVK,EAYT,SAAgBqI,GAAIrI,EAAc+F,EAAiBpG,EAAY2I,GAC7DJ,GACEnC,EACA,SAAUnC,EAAKuE,GACb,GAAIA,EACFnI,EAAO4D,GAAOjE,OAEX,GAAIK,EAAO4D,GACd5D,EAASA,EAAO4D,OAEb,CAAA,IAAI0E,EAIP,OAAOnG,EAHPnC,EAASA,EAAO4D,GAAO,eAgBfR,GAAIpD,EAAc4D,GAEhC,OAAO7C,EAAMf,EAAO4D,aASND,GAAM3D,GACpB,OAAQgI,EAAUhI,IACba,EAASb,KACR+G,GAAK/G,GAAQiC,qIC1OIzC,EAAa+I,GACpC,OAAO/I,GAAUS,GAAYT,EAAOgJ,SAChChJ,EAAOgJ,WACPzH,EAAMwH,GACJA,EACA7D,ECLD,MAAM+D,GAAQ,EACRC,GAAO,EACPC,GAAO,EACPC,GAAQ,EACRC,GAAQ,EAKfC,GZDuB,oBYCgBC,QAAgCA,QAAU9I,EAKvF+I,GAAkB,MAAMC,KAAKT,GAASU,IAAuBT,GAAQE,GAMrEQ,GAAcC,GAAc,qBAAqBH,KAAKG,EAAWC,UAAUC,WACvE5E,EACA,KAKJ6E,GAAWT,GACPK,GACE,SAAUK,EAAaC,EAAaC,GACpCZ,GAAca,IAAIR,GAAcK,EAAKE,EAAOD,IAE5C,SAAUD,EAAaC,GACvBX,GAAca,IAAIH,EAAKC,IAEzBP,EAKJ,SAASU,KACP,GAAIC,EAAY,CACd,MAAMC,EAAWD,EAA0B,cAC3C,GAAIC,GAAYrB,IAASqB,GAAYjB,GACnC,OAAOiB,EAGX,OAAOd,GAGT,SAASe,GAASC,GAChB,0BAA2BA,kJAQPP,EAAaD,GAC7BI,MAAiBnB,IACnBc,GAASC,GAAO,YAAaC,EAAKM,GAAS,wBAS1BN,EAAaD,GAC5BI,MAAiBlB,IACnBa,GAASC,GAAO,WAAYC,EAAKM,GAAS,2BASzBN,EAAaD,GAC5BI,MAAiBjB,IACnBY,GAASC,GAAO,WAAYC,EAAKM,GAAS,yBASxBN,EAAaD,GAC7BI,MAAiBhB,IACnBW,GAASC,GAAO,YAAaC,EAAKM,GAAS,4BASzBN,EAAaD,GACjC,GAAII,MAAiBf,GACnB,MAAM,IAAIoB,UAAUT,GAAO,iBAAiBC,cCtF3BS,GAiBnBhJ,YAAYiJ,GACV9I,KAAK8I,GAAKA,GAAMhI,EAChBd,KAAK+I,UAAY,GASnBlJ,KACEC,EACAR,EACA0J,GAGA,IAAI7I,EAAWH,MAEfiJ,KAAEA,EAAIH,GAAEA,GAAOI,GAAe/I,EAAS2I,GAAIhJ,GAE3C+E,EAAO1E,EAAS4I,UAAUE,GAE1BE,EAAa7I,EAEb,GAAIuE,EAAM,CAGRA,EAAOuE,GAAYvE,GAKnB,MAAMwE,EAAQ/J,GAAQA,EAAK,aAAcM,EACrCN,EAAK,GACLlB,EAEJsI,EACE7B,EACA,SAAUyE,EAAyBpD,GAGjC,IAAKqD,GAAeT,EAAIQ,KAElBE,EAAU3E,EAAMyE,IAEhBN,IAAWA,EAAOlJ,EAAMR,EAAMgK,GAElC,OASED,IACFA,EAAMI,SAAWH,EAAQlK,IAG3B,IAAIoC,EAASS,EAAQqH,EAAQlK,GAAIkK,EAAQI,IAAKpK,GAwB9C,OAtBI+J,IACFA,EAAMI,SAAWrL,GAInBkL,EAAQK,IAAML,EAAQK,IAAOL,EAAQK,IAAM,EAAK,EAG5CL,EAAQK,MAAQL,EAAQM,KAC1BzJ,EAAS0J,IAAI/J,EAAMwJ,EAAQlK,IAIzBiK,IACE7H,IAAWV,EACbuI,EAAMS,UAAUC,OAETV,EAAM9I,WACbiB,EAASV,IAITU,IAAWV,EACNqI,EAAarI,OADtB,IAQN,OAAOqI,EAUTtJ,GACEC,EACA2J,GAGA,MAAMtJ,EAAWH,MAEjB+I,UAAEA,GAAc5I,EAEhBmJ,EAA0B/J,EAAQkK,GAC9B,CAAErK,GAAIqK,GACNA,EAEJ,GAAI9C,EAAU2C,IAAY/J,EAAQ+J,EAAQlK,IAAK,CAC7C,MAAM6J,KAAEA,EAAIH,GAAEA,GAAOI,GAAe/I,EAAS2I,GAAIhJ,GACjDwJ,EAAQR,GAAKA,EACbkB,EACEjB,EAAUE,KAAUF,EAAUE,GAAQ,IACtCK,IAeNzJ,IACEC,EACA2J,GAGA,MAAMtJ,EAAWH,MAEjB+I,UAAEA,GAAc5I,EAEhB,GAAIL,EAAM,CAER,MAAMmJ,KAAEA,EAAIH,GAAEA,GAAOI,GAAe/I,EAAS2I,GAAIhJ,GAEjDmK,EAAgBC,GAAoBT,GAEpChJ,EAAO,SAAUoE,EAAwBoE,GACvCvC,EACE7B,EACA,SAAUyE,EAAyB5H,GAC7BuI,EAAcX,IAAYC,GAAeT,EAAIQ,IAC/CzE,EAAK/C,OAAOJ,EAAO,IAGvBpB,GAEGuE,EAAKjE,eACDmI,EAAUE,IAIjBA,EACEF,EAAUE,IACZxI,EAAKsI,EAAUE,GAAOA,GAGjBH,GACPqB,GAAYpB,EAAWtI,QAMzBN,EAAS4I,UAAY,GAkBzBlJ,IACEC,EACA2J,GAGA,IAEAV,UAAEA,GAFa/I,MAIfiJ,KAAEA,EAAIH,GAAEA,GAAOI,GAJAlJ,KAIwB8I,GAAIhJ,GAE3C0B,EAASlB,EAET2J,EAAgBC,GAAoBT,GAEpChJ,EAAO,SAAUoE,GASf,OARA6B,EACE7B,EACA,SAAUyE,GACR,GAAIW,EAAcX,IAAYC,GAAeT,EAAIQ,GAC/C,OAAO9H,EAASV,IAIfU,GAYT,OATIyH,EACEF,EAAUE,IACZxI,EAAKsI,EAAUE,IAGVH,GACPqB,GAAYpB,EAAWtI,IAGjBe,GAYZ,SAAS0H,GAAeJ,EAAahJ,GAEnC,MAAM0B,EAAS,CACbyH,KAAMnJ,EACNgJ,GAAIzF,GAGN,GAAIyF,EAAI,CACN,MAAMpH,EAAQ0I,GAAetK,EAAM,KAC/B4B,GAAS,IACXF,EAAOyH,KAAOoB,GAAavK,EAAM,EAAG4B,GACpCF,EAAOsH,GAAKuB,GAAavK,EAAM4B,EAAQ,IAI3C,OAAOF,EAKT,SAAS8I,GAAUhB,GACjB,OAAOhJ,EAgBT,SAAS4J,GAAoBT,GAC3B,OAAOlK,EAAQkK,GACT,SAAUH,GACR,OAAOG,IAAaH,EAAQlK,IAE9BkL,GAaR,SAASf,GAAegB,EAAmBjB,GACzC,MAAMR,GAAEA,GAAOQ,EACf,OAAOR,GAAMyB,EACTzB,IAAOyB,EACPjK,cCnVmBnC,GACvB,OAAOoB,EAAQpB,IAAW,cAAcyJ,KAAKT,GAAShJ,ICCxD,IAAIqM,UAGOC,eAAiBlM,GAAoBmM,GAASD,gBACvDD,GAAWC,cAgBb,OAVED,UADSG,iBAAmBpM,GAAoBmM,GAASC,gBAC9C,SAAUvL,GACnB,MAAMwL,EAAU,IAAID,eACpBC,EAAQC,MAAMC,UAAY1L,EAC1BwL,EAAQG,MAAMC,YAAY,IAIjBC,WCbb,IAAIC,GAEJ,MAAqBC,GAKZtL,gBACL,OAAOqL,KAAWA,GAAS,IAAIC,IAQjCtL,cACEG,KAAKoL,MAAQ,GAMfvL,OAAOxB,EAAgBgB,GACrB,MAAMc,EAAWH,MAAMoL,MAAEA,GAAUjL,EACnC6J,EACEoB,EACA,CACEhM,GAAIf,EACJqL,IAAKrK,IAGY,IAAjB+L,EAAMxK,QACR4J,GACE,WACErK,EAASkL,QASjBxL,QAAQxB,EAAgBgB,GACtB,MAAMc,EAAWH,MAAMoL,MAAEA,GAAUjL,EACnCmL,EACEF,EACA,CACEhM,GAAIf,EACJqL,IAAKrK,IAGY,IAAjB+L,EAAMxK,QACR4J,GACE,WACErK,EAASkL,QASjBxL,QACEG,KAAKoL,MAAMxK,OAAS,EAMtBf,MACE,MAAMuL,MAAEA,GAAUpL,KACdoL,EAAMxK,SACRZ,KAAKoL,MAAQ,GACb1E,EACE0E,EACA,SAAUG,GACRtJ,EAAQsJ,EAAKnM,GAAImM,EAAK7B,SCxFzB,MAAM8B,GAAY,MACZC,GAAc,OACdC,GAAiB,UACjBC,GAAc,QACdC,GAAiB,WACjBC,GAAgB,IAChBC,GAAgB,MAChBC,GAAiB,OAEjBC,GAAmB,SACnBC,GAAoB,WAEpBC,GAAc,EACdC,GAAc,EACdC,GAAe,EAEfC,GAAe,KACfC,GAAiB,OACjBC,GAAkB,QAClBC,GAAkB,QAClBC,GAAoB,UACpBC,GAAmB,IAEnBC,GAAqB,QAErBC,GAAiB,QAEjBC,GAAqB,eACrBC,GAAoB,cACpBC,GAAoB,cACpBC,GAAmB,aACnBC,GAAqB,eACrBC,GAAoB,cACpBC,GAAsB,gBACtBC,GAAqB,eClClC,IAAIC,GAAO,ECEJ,MAAMC,GAAK,MAELC,GAAQ,SAERC,GAAU,WAEVC,GAAY,aAEZC,GAAU,oBCFPC,GAAOC,EAAUC,EAAcC,GAE7C,MAAMC,KAAEA,EAAIC,YAAEA,GAAgBH,EAE9BI,EAAiBH,GAAYA,EAASE,YAEtC,GAAIA,GAAeC,EAAgB,CAEjC,MAAMC,EAAWF,GAAeG,EAEhCC,EAAWH,GAAkBE,EAE7BhE,GACE+D,EACA,SAAUG,EAAiBpF,GACpBmF,EAASnF,IACToF,EAAK/P,QAAU8P,EAASnF,GAAM3K,OAEjCsP,EAAIS,KAAKN,EAAM9E,EAAMoF,EAAK/P,SAKhC6L,GACEiE,EACA,SAAUlI,EAAc+C,GACjBiF,EAASjF,IACZ2E,EAAIU,WAAWP,EAAM9E,eC3Bf0E,GAAOC,EAAUC,EAAcC,GAE7C,MAAMC,KAAEA,EAAIQ,YAAEA,GAAgBV,EAE9BW,EAAiBV,GAAYA,EAASS,YAEtC,GAAIA,GAAeC,EAAgB,CAEjC,MAAMN,EAAWK,GAAeJ,EAEhCC,EAAWI,GAAkBL,EAE7BhE,GACE+D,EACA,SAAUO,EAAgBxF,GACnBmF,EAASnF,IACTwF,EAAKnQ,QAAU8P,EAASnF,GAAM3K,OAEjCsP,EAAIa,KAAKV,EAAM9E,EAAMwF,EAAKnQ,SAKhC6L,GACEiE,EACA,SAAUK,EAAgBxF,GACnBiF,EAASjF,IACZ2E,EAAIc,WAAWX,EAAM9E,EAAMwF,EAAKE,kBCzB1BhB,GAAOE,EAAcC,GAEnC,MAAMc,KAAEA,EAAIC,WAAEA,GAAehB,EAE7BiB,EAAgBhB,GAAYA,EAASe,WAErC,GAAIA,GAAcC,EAAe,CAE/B,MAAMf,EAAOa,EAAKG,KAAoBlB,EAAME,KAE5CiB,EAAkBlB,GAAYD,EAAMnJ,UAAYoJ,EAASpJ,QAEzDwJ,EAAWW,GAAcV,EAEzBC,EAAWU,GAAiBX,EAE5BhE,GACE+D,EACA,SAAUe,EAAsBhG,GAC9B,MAAMiG,KAAEA,EAAIC,KAAEA,EAAIC,OAAEA,GAAWH,EAAUI,MACpCjB,EAASnF,IAGLiG,GACJD,EAAU3Q,QAAU8P,EAASnF,GAAM3K,OACnC0Q,KAECI,GACFA,EAAOrB,EAAMK,EAASnF,GAAO6E,GAE/BqB,EAAKpB,EAAMkB,EAAWpB,IATtBsB,EAAKpB,EAAMkB,EAAWpB,KAc5B1D,GACEiE,EACA,SAAUa,EAAsBhG,GAC9B,IAAKiF,EAASjF,GAAO,CACnB,MAAMmG,OAAEA,GAAWH,EAAUI,MACzBD,GACFA,EAAOrB,EAAMkB,EAAWnB,gBAUpBjM,GAAOgM,GACrB,MAAMgB,WAAEA,GAAehB,EACvB,GAAIgB,EAAY,CACd,MAAMd,EAAOF,EAAMe,KAAKG,KAAoBlB,EAAME,KAClD5D,GACE0E,EACA,SAAUI,GACR,MAAMG,OAAEA,GAAWH,EAAUI,MACzBD,GACFA,EAAOrB,EAAMkB,EAAWpB,eC9DlBF,GAAOE,EAAcC,GAEnC,IAA8DC,GAA1Da,KAAEA,EAAIU,IAAEA,EAAGC,MAAEA,EAAKC,MAAEA,EAAKX,WAAEA,EAAUxP,QAAEA,GAAYwO,EAEvD,GAAIA,EAAM4B,aAIR,GAHA1B,EAAOa,EAAKG,IAGRjB,EAAU,CAEZ,MAAM4B,EAAQb,GAAcA,EAAWc,IACnCD,IACGH,IACHA,EAAQ,IAEVA,EAAMxB,EAAK6B,QAAUF,EAAMpR,OAGzBiR,GACFxB,EAAK8B,WAAWN,GAGlB,MAAM/N,EAASsO,GAAaP,EAAOC,GAC/BhO,GACFuM,EAAKgC,YAAYvO,SAKrBuM,EAAOF,EAAME,KAGf,GAAIuB,EAAK,CACP,MAAMU,EAAO3Q,EAAQ4Q,MACjBD,IACFA,EAAKV,GAAOvB,ICflB,SAASmC,GAAYrC,EAAcC,GACjC,OAAOD,EAAM1F,MAAQ2F,EAAS3F,KACzB0F,EAAMtL,MAAQuL,EAASvL,IAG9B,SAAS4N,GAAiBC,EAA0BC,EAAoBC,GAEtE,IAAI9O,EAEJqM,EAEAtL,EAEA,KAAO8N,GAAcC,IACnBzC,EAAQuC,EAAOC,MACD9N,EAAMsL,EAAMtL,OACnBf,IACHA,EAAS,IAEXA,EAAOe,GAAO8N,GAEhBA,IAGF,OAAO7O,GAAU2M,EAInB,SAASoC,GAAa3C,EAAc4C,EAAkBzC,EAAY0C,GAC5DA,EACF7C,EAAI8C,OAAOF,EAAYzC,EAAM0C,GAG7B7C,EAAI+C,OAAOH,EAAYzC,GAI3B,SAAS6C,GAAgB/C,EAAcvE,GAErC,MAAMuH,GAAShD,EAAMiD,QAAUjD,EAAMxO,SAASuR,gBAAgBtH,EAASuE,GAQvE,OANAA,EAAMe,KAAKG,IAAmB8B,EAC9BhD,EAAMe,KAAKmC,IAAiBjQ,EAE5BkQ,GAAiBnD,GACjBoD,GAAiBpD,GAEVgD,EAIT,SAASK,KACP,MAAMtC,EAAO,GAEb,OADAA,EAAKuC,MN9EI9D,GM+EFuB,EAGT,SAASwC,GAAYxD,EAAcC,GAEjC,IAAI1F,IAAEA,EAAG4F,KAAEA,EAAIa,KAAEA,EAAIa,YAAEA,EAAW4B,UAAEA,EAASC,OAAEA,EAAMC,QAAEA,EAAOC,SAAEA,EAAQC,SAAEA,EAAQC,KAAEA,EAAIC,KAAEA,EAAItS,QAAEA,GAAYwO,EAE5G,IAAIE,IAAQa,EAQZ,GAJAA,EAAOsC,KAEPrD,EAAMe,KAAOA,EAET0C,EACFzD,EAAME,KAAOH,EAAIgE,WAAWF,QAI9B,GAAIL,EACFxD,EAAME,KAAOH,EAAIiE,cAAcH,QAIjC,GAAIjC,EAAa,CAEf,IAAIqC,EAA2C1T,EAG3C+J,GACF9I,EAAQ0S,cACN5J,EACA,SAAUmB,GACJ0I,GAAWpD,EAAMmC,IAEfnC,EAAKmC,MAEHnC,EAAKqD,MACPpE,EAAQe,EAAKqD,WAENrD,EAAKqD,KAEdC,GACErE,EACA+C,GAAgB/C,EAAOvE,KAM3BwI,EAAmBxI,IAO3BuE,EAAME,KAAOH,EAAIiE,cAAcM,GAE3BL,EACFlB,GAAgB/C,EAAOiE,GAGvBlD,EAAKmC,IAAiBzQ,OAMxByN,EAAOF,EAAME,KAAOH,EAAIwE,cAAcvE,EAAM1F,IAAe0F,EAAMwE,OAE7DZ,EACFa,GAAU1E,EAAKG,EAAM0D,GAEdC,EACP9D,EAAI8D,KAAK3D,EAAiB2D,EAAMH,EAASC,GAElCG,GACP/D,EAAI+D,KAAK5D,EAAiB4D,EAAMJ,EAASC,GAG3Ce,GAAkB3E,EAAKC,GACvB2E,GAAkB5E,EAAKC,GACvBmD,GAAiBnD,GACjBoD,GAAiBpD,GAKrB,SAASyE,GAAU1E,EAAc4C,EAAkBJ,EAAiBC,EAAqBC,EAAmBI,GAC1G,IAAI7C,EAAcvK,EAAQ+M,GAAc,EAAG9M,EAAM7D,EAAM4Q,GAAYA,EAAqBF,EAAOxP,OAAS,EACxG,KAAO0C,GAASC,GAEd6N,GAAYxD,EADZC,EAAQuC,EAAO9M,IAEfmP,GAAY7E,EAAK4C,EAAY3C,EAAO6C,GACpCpN,IAIJ,SAASmP,GAAY7E,EAAc4C,EAAkB3C,EAAc6C,GAEjE,MAAM3C,KAAEA,EAAIa,KAAEA,EAAIvP,QAAEA,GAAYwO,EAEhC6E,EAAY9E,EAAIkD,OAAO/C,GAYvB,GATI2C,EACF9C,EAAI8C,OAAOF,EAAYzC,EAAM2C,EAAO3C,MAGpCH,EAAI+C,OAAOH,EAAYzC,IAKpB2E,EAAW,CACd,IAAIC,EAAyBvU,EAC7B,GAAIyP,EAAM4B,YAAa,CACrB,MAAMmD,EAAYhE,EAAKG,IACnB6D,IACFD,EAAQ,WACNT,GAAWrE,EAAO+E,UAId/E,EAAMgF,UAAahF,EAAMyD,QAAWzD,EAAMwD,YAClDsB,EAAQ,WACNT,GAAWrE,KAGX8E,GAIFtT,EAAQyT,UAAUC,SAASC,QAAQL,IAMzC,SAASM,GAAarF,EAAc4C,EAAkBJ,EAA0BC,EAAqBC,GACnG,IAAIzC,EAAqBvK,EAAQ+M,GAAc,EAAG9M,EAAM7D,EAAM4Q,GAAYA,EAAqBF,EAAOxP,OAAS,EAC/G,KAAO0C,GAASC,IACdsK,EAAQuC,EAAO9M,KAEb4P,GAAYtF,EAAK4C,EAAY3C,GAE/BvK,IAIJ,SAAS4P,GAAYtF,EAAc4C,EAAkB3C,GACnD,MAAME,KAAEA,GAASF,EACjB,GAAIA,EAAMgF,UAAYhF,EAAMyD,QAAUzD,EAAMwD,UAC1CzD,EAAI/L,OAAO2O,EAAYzC,OAEpB,CAEH,IAKA6E,EALIO,EAAO,WACTC,GAAaxF,EAAKC,GAClBD,EAAI/L,OAAO2O,EAAYzC,IAKzB,GAAIF,EAAM4B,eACRmD,EAAY/E,EAAMe,KAAKG,KAIrB,YADAoE,KA+FR,SAAoBtF,EAAc+E,EAAgCO,GAIhE,IAAIvE,KAAEA,EAAIyE,WAAEA,GAAexF,EACvB+E,IAAcS,IAEhBA,EAAcT,EAAUU,OAAiBD,YAE3C,GAAIA,EAAY,CACd,MAAME,MAAEA,GAAUF,EAClB,GAAIE,EAUF,YATAA,EACE1F,EAAME,KACNa,EAAK4E,IAAiB,WAChB5E,EAAK4E,MACPL,IACAvE,EAAK4E,IAAiBpV,KAQhC+U,IAnHEM,CAAW5F,EAAO+E,EAAWO,IAKjC,SAASC,GAAaxF,EAAcC,GAgBlC,MAAMe,KAAEA,EAAI6C,SAAEA,EAAQX,OAAEA,EAAM4C,KAAEA,GAAS7F,EAOzC,GAAI6F,GAAQ5C,GAAUA,EAAOwC,OAAQ,CAEnC,MAAM9D,EAAQsB,EAAOlK,IAAI8M,GAEzB,GAAIlE,GAAShG,EAAUgG,EAAO3B,GAC5B,OAIJ,GAAIA,EAAM4B,YAAa,CACrB,MAAMmD,EAAYhE,EAAKG,IACnB6D,GACFe,GAAiB9F,GACjB+E,EAAUgB,WAGVhF,EAAKmC,IAAiBjQ,OAIxB6S,GAAiB9F,GACb4D,GACF/K,EACE+K,EACA,SAAUZ,GACRuC,GAAaxF,EAAKiD,KAW5B,SAASqB,GAAWrE,EAAc+E,GAIhC,IAAIhE,KAAEA,EAAIyE,WAAEA,GAAexF,EAM3B,GALI+E,IAAcS,IAEhBA,EAAcT,EAAUU,OAAiBD,YAE3CpR,EAAQ2M,EAAK4E,KACTH,EAAY,CACd,MAAMV,MAAEA,GAAUU,EAClB,GAAIV,EAIF,YAHAA,EACE9E,EAAME,OAqKd,SAAgB8F,GAAMjG,EAAcC,EAAcC,GAEhD,GAAID,IAAUC,EACZ,OAGF,MAAMC,KAAEA,EAAIa,KAAEA,GAASd,EAGvB,IAAKoC,GAAYrC,EAAOC,GAAW,CAIjC,MAAM0C,EAAa5C,EAAIkD,OAAO/C,GAM9B,OALAqD,GAAYxD,EAAKC,QACb2C,IACFiC,GAAY7E,EAAK4C,EAAY3C,EAAOC,GACpCoF,GAAYtF,EAAK4C,EAAY1C,KAUjC,GALAD,EAAME,KAAOA,EACbF,EAAMe,KAAOA,EAITd,EAAS2B,aAAeb,EAAKmC,IAE/B,YADAnC,EAAKqD,IAAepE,GAKtB,GAAIA,EAAMgF,UAAY/E,EAAS+E,SAC7B,OAGFN,GAAkB3E,EAAKC,EAAOC,GAC9B0E,GAAkB5E,EAAKC,EAAOC,GAC9BkD,GAAiBnD,EAAOC,GACxBmD,GAAiBpD,EAAOC,GAExB,MAAM4D,KAAEA,EAAIC,KAAEA,EAAIF,SAAEA,EAAQF,QAAEA,EAAOC,SAAEA,GAAa3D,EAEpDiG,EAAUhG,EAAS4D,KACnBqC,EAAUjG,EAAS6D,KACnBqC,EAAclG,EAAS2D,SAEnBvN,EAAUwN,GACRA,IAASoC,GACXlG,EAAI8D,KAAK3D,EAAM2D,EAAMH,EAASC,GAGzBtN,EAAUyN,GACbA,IAASoC,GACXnG,EAAI+D,KAAK5D,EAAiB4D,EAAMJ,EAASC,GAIpCC,GAAYuC,EACfvC,IAAauC,GAzLrB,SAAwBpG,EAAc4C,EAAkBiB,EAAmBuC,GAEzE,IAUAC,EACAC,EAXI7D,EAAa,EACjBC,EAAWmB,EAAS7Q,OAAS,EAC7BuT,EAAa1C,EAASpB,GACtB+D,EAAW3C,EAASnB,GAEpB+D,EAAgB,EAChBC,EAAcN,EAAYpT,OAAS,EACnC2T,EAAgBP,EAAYK,GAC5BG,EAAcR,EAAYM,GAK1B,KAAOD,GAAiBC,GAAejE,GAAcC,GAG9C6D,EAGKC,EAGAG,EAGAC,EAKDtE,GAAYiE,EAAYI,IAC/BV,GAAMjG,EAAKuG,EAAYI,GACvBJ,EAAa1C,IAAWpB,GACxBkE,EAAgBP,IAAcK,IAIvBnE,GAAYkE,EAAUI,IAC7BX,GAAMjG,EAAKwG,EAAUI,GACrBJ,EAAW3C,IAAWnB,GACtBkE,EAAcR,IAAcM,IAOrBpE,GAAYkE,EAAUG,IAC7BV,GAAMjG,EAAKwG,EAAUG,GACrBhE,GACE3C,EACA4C,EACA+D,EAAcxG,KACdH,EAAI6G,KAAKD,EAAYzG,OAEvBqG,EAAW3C,IAAWnB,GACtBiE,EAAgBP,IAAcK,IAKvBnE,GAAYiE,EAAYK,IAC/BX,GAAMjG,EAAKuG,EAAYK,GACvBjE,GACE3C,EACA4C,EACAgE,EAAYzG,KACZwG,EAAcxG,MAEhBoG,EAAa1C,IAAWpB,GACxBmE,EAAcR,IAAcM,KAMvBL,IACHA,EAAgB9D,GAAiB6D,EAAaK,EAAeC,IAS3D5U,EALJwU,EAAWC,EAAW5R,IAClB0R,EAAcE,EAAW5R,KACzBnE,IAIFyV,GAAMjG,EAAKuG,EAAYH,EAAYE,IACnCF,EAAYE,GAAsB9V,GAIlCgT,GAAYxD,EAAKuG,GAGnB1B,GAAY7E,EAAK4C,EAAY2D,EAAYI,GAEzCJ,EAAa1C,IAAWpB,IAvExBmE,EAAcR,IAAcM,GAH5BC,EAAgBP,IAAcK,GAH9BD,EAAW3C,IAAWnB,GAHtB6D,EAAa1C,IAAWpB,GAqFxBgE,EAAgBC,EAClBhC,GACE1E,EACA4C,EACAiB,EACApB,EACAC,EACAmB,EAASnB,EAAW,IAGfD,EAAaC,GACpB2C,GACErF,EACA4C,EACAwD,EACAK,EACAC,GAkEAI,CAAe9G,EAAKG,EAAM0D,EAAUuC,GAI/BvC,IACHvN,EAAU4P,IAAY5P,EAAU6P,KAClCnG,EAAI8D,KAAK3D,EAAM1K,EAAkBkO,GAEnCe,GAAU1E,EAAKG,EAAM0D,IAGduC,EACPf,GAAarF,EAAKG,EAAMiG,IAGjB9P,EAAU4P,IAAY5P,EAAU6P,KACvCnG,EAAI8D,KAAK3D,EAAM1K,EAAkBkO,GC9jB9B,MAAMoD,GAAU,EAKVC,GAAY,EAKZC,GAAY,EAKZC,GAAW,EAKXC,GAAO,EAKPC,GAAK,EAKLC,GAAU,EAKVC,GAAO,EAKPC,GAAO,EAKPC,GAAU,GAKVC,GAAS,GAKTC,GAAa,GAKbC,GAAS,GC1DTC,GAAc,GAEdC,GAAe,GAEfC,GAAY,GAEzBF,GAAYG,GACZH,GAAYI,GAEZH,GAAwB,IACxBA,GAAwB,IACxBA,GAAaE,GAAgBrV,EAE7BoV,GAAc,GAAIG,GAClBH,GAAgB,KAAII,GACpBJ,GAAmB,QAAIK,YCMPC,GAAgB/M,GAC9B,MAAO,CACLnJ,KAAMmW,GACNpD,SAAUvS,EACV2I,KAAAA,YAIYiN,GAAgBpN,EAAYG,EAAc3K,EAAmC6X,EAAuB1E,GAClH,MAAO,CACL3R,KAAMsW,GACNtN,GAAAA,EACAG,KAAAA,EACA1G,IAAK8T,GAAiBvN,EAAIG,GAC1B3K,MAAAA,EACA6X,KAAAA,EACA1E,SAAAA,YAIY6E,GAAerN,EAAc0F,EAAoBrQ,EAAmC6X,EAAuB1E,GACzH,MAAO,CACL3R,KAAMyW,GACN1D,SAAUvS,EACV2I,KAAAA,EACA0F,KAAAA,EACArQ,MAAAA,EACA6X,KAAAA,EACA1E,SAAAA,GAIJ,SAAgB+E,GAAWC,EAAsBC,EAA2BC,EAAgBjV,GAC1F,MAAO,CACL5B,KAAMgW,GACNW,KAAAA,EACAC,GAAAA,EACAC,MAAAA,EACAjV,MAAAA,EACAkV,UAAWtW,YA6ECsR,GAAWF,GACzB,MAAO,CACL5R,KAAM+W,GACNnF,KAAAA,EACAmB,SAAUvS,EACVwW,OAAQxW,GCpIZ,MAAMyW,GAAsB,yDAAyDjS,MAAM,KAG3FkS,GAAc,6NAA6NlS,MAAM,KAIjPmS,GAAqB,wJAAwJnS,MAAM,KAGnLoS,GAAqB,wEAAwEpS,MAAM,KAGnGqS,GAAsB,4HAA4HrS,MAAM,KAGxJsS,GAAY,eC5BajZ,EAAa+I,GACpC,OAAOmQ,EAAWlZ,IACbA,EACDuB,EAAMwH,GACJA,EACA,ED0BRkQ,GAAe,IAAI,UACnBA,GAAiB,MAAI,YACrBA,GAAqB,UAAI,YACzBA,GAAiB,MAAI,gBACrBA,GAAsB,WAAI,aAC1BA,GAAoB,SAAI,WACxBA,GAAoB,SAAI,WACxBA,GAAqB,UAAI,YACzBA,GAAqB,UAAI,YEvClB,MAAME,GAAU,EAKVC,GAAa,EAKbC,GAAS,EAKTC,GAAQ,EAKRC,GAAS,EAKTC,GAAU,EAKVC,GAAQ,EAKRC,GAAS,EAKTC,GAAO,ECfpB,SAAgBC,GAAaC,EAAYC,EAAkBC,EAAaC,GACtE,MAAO,CACLrY,KAAMsY,GACND,IAAAA,EACAH,KAAAA,EACAC,SAAAA,EACAC,MAAAA,GAaJ,SAASG,GAAsBF,EAAalP,EAAcqP,EAAiBnU,GACzE,MAAO,CACLrE,KAAMyY,GACNJ,IAAAA,EACAlP,KAAAA,EACAqP,OAAAA,EACAnU,OAAAA,GAIJ,SAASqU,GAAkBL,EAAaM,EAAY/T,EAAwBgU,EAAsBJ,EAAiBnU,GACjH,MAAO,CACLrE,KAAM6Y,GACNR,IAAAA,EACAM,KAAAA,EACA/T,QAAAA,EACAgU,MAAAA,EACAJ,OAAAA,EACAnU,OAAAA,GAIJ,SAAgByU,GAAiBT,EAAalP,EAAc4P,GAE1D,IAAIP,EAAShY,EAAU6D,EAAS,EAgBhC,OAdI8E,IAAS6P,GACR7P,IAAS8P,IAEZT,EAASxX,EACLmI,IAAS8P,IACX5U,EAAS,GAEX8E,EAAO5F,GAOFwV,EACHG,GAAc/P,EAAMkP,GACpBE,GAAsBF,EAAKlP,EAAMqP,EAAQnU,YAI/B6U,GAAc1a,EAAY6Z,GACxC,MAAO,CACLrY,KAAMmZ,GACNd,IAAAA,EACA7Z,MAAAA,YA0CY4a,GAAqBf,EAAaO,GAEhD,IAAIS,EAAYT,EAAMU,SAEtBxY,OAAEA,GAAW8X,EAEbJ,EAAShY,EAET6D,EAAS,EAGT,GAAIvD,EAAS,EAAG,CAOd,IAAIyY,EAAY/Y,EAAUgZ,EAAwB,GAAIC,EAAuB,GA+C7E,GA7CA7S,EACEgS,EACA,SAAU3K,GACR,GAAIA,EAAKjO,OAASmZ,GAAkB,CAElC,MAAMO,EAAUzL,EAEhB,GAAIyL,EAAQrB,MAAQY,EAElB,YADA5U,GAAU,GAIRqV,EAAQrB,MAAQW,GAClB9O,EACEsP,EACAnS,GAASqS,EAAQlb,aAMrB+a,EAAYvY,EAGdkJ,EACEuP,EACAxL,KAmBFoL,EAAUrZ,OAASyY,GAAqB,CAE1C,MAAMkB,EAAaN,EAEnBb,EAASmB,EAAWnB,OACpBnU,GAAUsV,EAAWtV,OAErB,IAAI8E,EAAOwQ,EAAWxQ,KAGlBA,GACFqC,EAAcgO,EAAarQ,GAO3BkQ,EAHEE,EAGUhB,GADZpP,EAAOyQ,GAAWJ,EAAaK,IACS1Q,EAAMqP,EAAQnU,GAI1CqU,GAAkBL,EAAKgB,EAAW/a,EAAemb,EAAcjB,EAAQnU,QAOnFgV,EADEE,EACUb,GACVL,EACAgB,EACAO,GAAWJ,EAAaK,IACxBvb,EACAka,EACAnU,GAMUqU,GACVL,EACAgB,EACA/a,EACAmb,EACAjB,EACAnU,GAOR,OAAOgV,EChQF,MAAMS,GAAQ,CACnBC,IAAKvZ,EACLwZ,IAAKxZ,EACLyZ,IAAKzZ,EACL0Z,IAAK1Z,EACL2Z,KAAM3Z,GAIK4Z,GAAS,CACpBC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLR,IAAK,GACLC,IAAK,GACLQ,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,IAAK,GACLC,KAAM,GACNC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,KAAM,EACNC,KAAM,YChBQC,GAAQC,GACtB,IAAKhW,GAAMgW,GAAU,CACnB,MAAMC,EAAS,IAAIC,GAAOF,GAC1BhW,GAAMgW,GAAWC,EAAOE,YAAYC,IAEtC,OAAOpW,GAAMgW,GAGf,MAAaE,GAUX5b,YAAY0b,GACV,MAAuB3a,OAAEA,GAAW2a,EAAnBvb,KACR0B,MAAQD,EADAzB,KAERuD,IAAM3C,EAFEZ,KAGR4b,KAAOD,GAHC3b,KAIRub,QAAUA,EAJFvb,KAKR6b,KAMXhc,GAAGic,GAED,IAAI3b,EAAWH,MAAM0B,MAAEA,EAAK6B,IAAEA,GAAQpD,GAEtCuB,GAASoa,GAAQ,IAEJ,GAAKpa,EAAQ6B,GACxBpD,EAASyb,KAAOG,GAAc5b,EAASob,QAAS7Z,GAChDvB,EAASuB,MAAQA,IAGjBvB,EAASyb,KAAOD,GAChBxb,EAASuB,MAAQA,EAAQ,EAAID,EAAoB8B,GAQrD1D,KAAKic,GAEH,MAAM3b,EAAWH,KAAMW,EAAWmb,GAAQA,EAAO,EAIjD,GAAI3b,EAASyb,OAASD,GAAU,CAC9B,MAAMzH,EAAW/T,EAASuB,MAG1B,GAFAvB,EAAS0b,GAAGC,IAEPE,GAAa7b,EAASyb,MAEzB,YADAzb,EAAS0b,GAAG3H,EAAW/T,EAASuB,YAO/B,IAAKsa,GAAa7b,EAASyb,MAC9B,OAKF,KAAOtb,GAAU,CACf,IAAI0b,GAAa7b,EAASyb,MAGrB,CACCjb,GACFR,EAAS0b,KAEX,MANA1b,EAAS0b,GAAGC,IAelBjc,GAAG+b,GACD,OAAO5b,KAAK4b,OAASA,EAQvB/b,KAAKwQ,EAAoBC,GACvB,OAAOjG,GAAarK,KAAKub,QAASlL,EAAY3Q,EAAM4Q,GAAYA,EAAWtQ,KAAK0B,OAMlF7B,YAEE,MAAMM,EAAWH,MAAM4b,KAAEA,EAAIla,MAAEA,GAAUvB,EAEzC,GAAI8b,GAAkBL,GACpB,OAAOzb,EAAS+b,SACdxa,EACA,CACEvB,EAASgc,eAAeza,KAI9B,GAAI0a,GAAQR,GACV,OAAOzb,EAASkc,WAAW3a,GAG7B,OAAQka,GAEN,KAAKD,GACH,OAGF,KAAKW,GACL,KAAKC,GACH,OAAOpc,EAAS+b,SACdxa,EACA,CACEvB,EAASqc,WAAW9a,EAAOka,KAKjC,KAAKa,GAEH,OADAtc,EAAS0b,KACFO,GAAQjc,EAASyb,MACpBzb,EAASkc,WAAW3a,GACpBvB,EAASuc,SAAShb,GAGxB,KAAKib,GAEH,OADAxc,EAAS0b,KACF1b,EAASub,YAAYkB,IAG9B,KAAKC,GACH,OAAO1c,EAAS+b,SACdxa,EACA,EFtJkBgX,EEwJdvY,EAAS2c,UAAUpb,EAAOqb,IFxJG5E,EEyJ7BhY,EAAS6c,KAAKtb,GFxJnB,CACL5B,KAAMmd,GACN9E,IAAAA,EACAO,MAAAA,ME2JE,KAAKwE,GACH,OAAO/c,EAASgd,WAAWzb,OFhKPgX,EAAeP,EEqKvC,MAAMF,EAAW9X,EAASid,aAAa1b,GACvC,GAAIuW,GAAYoF,GAAkBpF,GAAW,CAC3C,MAAMlK,EAAO5N,EAASub,cACtB,GAAI3N,EAAM,CACR,GAAIA,EAAKjO,OAASmZ,GAAkB,CAClC,MAAM3a,EAASyP,EAAiBzP,MAChC,GAAIkF,EAAUlF,GAGZ,OADA6B,EAASmd,KAAK7b,GACP8b,IACHjf,EACF6B,EAAS6c,KAAKtb,IAMpB,OADAvB,EAASmd,KAAK7b,GFjFtB,SAA4BwW,EAAkBlK,EAAYoK,GACxD,MAAO,CACLrY,KAAM0d,GACNrF,IAAAA,EACAF,SAAAA,EACAlK,KAAAA,GE6EW0P,CACLxF,EACAlK,EACA5N,EAAS6c,KAAKtb,MAkBtB7B,WAAWwQ,GAET,MAAMlQ,EAAWH,KAEjB,KAkvBKoc,GADSR,EAjvBEzb,EAASyb,OAkvBHA,IAASa,IAjvB7Btc,EAAS0b,KAgvBf,IAAkBD,EA7uBd,MAAMzD,EAAMhY,EAAS6c,KAAK3M,GAG1B,GAAIgH,EAAWc,GACb,OAAOoF,IAAuBpF,EAAKA,GAiBvCtY,WAAWwQ,EAAoBqN,GAE7B,MAAMvd,EAAWH,KAEjB2d,EAAM,KAAOrd,GAOX,OAFAH,EAAS0b,KAED1b,EAASyb,MAGf,KAAKgC,GACHzd,EAAS0b,KACT,MAEF,KAAK6B,EACHvd,EAAS0b,KACT,MAAM8B,EAER,KAAKhC,GAIH,MAAMgC,EAOZ,MAAMxF,EAAMhY,EAAS6c,KAAK3M,GAC1B,OAAOkN,GACL,IAAIM,mBAAmB1F,IAAvB,GACAA,GAUJtY,WAAWwQ,GAET,IAAiFtC,EAA7E5N,EAAWH,KAAM0F,EAAiB,GAAIoY,EAAiB,GAAIC,EAAQzd,EAGvEH,EAAS0b,KAET8B,EAAM,KAAOrd,GAEX,OAAQH,EAASyb,MAEf,KAAKoC,GACH7d,EAAS0b,KAMT,MAAM8B,EAER,KAAKhC,GAIH,MAAMgC,EAGR,KAAKM,GACH9d,EAAS0b,KACTkC,EAAQjd,EACR,MAGF,KAAKod,GACH/d,EAAS0b,KACTkC,EAAQzd,EACR,MAEF,QAIE,GADAyN,EAAO5N,EAASub,cACZqC,GACF,GAAIhQ,EAGF,GADA5N,EAASmd,OACLvP,EAAKjO,OAASyY,GAChBvO,EAAWtE,EAAOqI,EAAoB9E,UAEnC,CAAA,GAAI8E,EAAKjO,OAASmZ,GAOrB,MAAM0E,EANN3T,EAAWtE,EAAOqI,EAAiBzP,YAUpC,CAAA,IAAIyP,EASP,MAAM4P,EAPNxd,EAASmd,OACTtT,EAAW8T,EAAQ/P,IAW3B,OF/QJ,SAA6BrI,EAAgBoY,EAAgB3F,GAC3D,MAAO,CACLrY,KAAMqe,GACNhG,IAAAA,EACAzS,KAAAA,EACAoY,OAAAA,GE0QOM,CAAqB1Y,EAAMoY,EAAQ3d,EAAS6c,KAAK3M,IAU1DxQ,UAAUwQ,EAAoBqN,GAE5B,IAAyC3P,EAArC5N,EAAWH,KAAM0Y,EAAgB,GAGrCvY,EAAS0b,KAET8B,EAAM,KAAOrd,GACX,OAAQH,EAASyb,MAEf,KAAK8B,EACHvd,EAAS0b,KACT,MAAM8B,EAER,KAAKhC,GAIH,MAAMgC,EAER,KAAKO,GACH/d,EAAS0b,KACT,MAEF,SAKE9N,EAAO5N,EAASub,iBAIdvb,EAASmd,OACTtT,EAAW0O,EAAO3K,IAK1B,OAAO2K,EAYT7Y,SAASwQ,GAEP,IAAyCpH,EAArC9I,EAAWH,KAAM0Y,EAAgB,GAKrC,KAAOpY,IAGL2I,EAAO6P,EAGH3Y,EAASke,GAAG5B,MACdtc,EAAS0b,KACT5S,EAAO8P,GAGT/O,EACE0O,EACA4F,GAAyBrV,EAAMA,EAAMyP,EAAM9X,OAAS,IAIlDT,EAASke,GAAGE,MAjBD,CAqBb,GAHApe,EAAS0b,KAGL2C,GAAiBre,EAASyb,MAK5B,OAJA5R,EACE0O,EACAvY,EAASgc,eAAehc,EAASuB,MAAOpB,IAEnCH,EAAS+b,SAAS7L,EAAYqI,GAElC,IAAIvY,EAASke,GAAG5B,IAUnB,MARAtc,EAAS0b,MA0BjBhc,SAASwQ,EAAoBqI,GAE3B,IAAqB3K,EAAjB5N,EAAWH,KAWf2d,EAAM,KAAOrd,GAEX,OAAQH,EAASyb,MAGf,KAAKe,GACHjE,EAAQ,EF7dSzP,EE+dbwV,GAA6Bte,EAAS6c,KAAK3M,GAAaqI,GF/d/BpZ,EEgezBa,EAAS2c,UAAU3c,EAASuB,MAAOkb,IFheIzE,EEievChY,EAAS6c,KAAK3M,GFhenB,CACLvQ,KAAM4e,GACNvG,IAAAA,EACAlP,KAAAA,EACA3J,KAAAA,KE+dM,MAGF,KAAKmd,GAIH,GAHAtc,EAAS0b,KAGL2C,GAAiBre,EAASyb,MAAO,CAEnC5R,EACE0O,EACAvY,EAASgc,eAAehc,EAASuB,MAAOpB,IAE1C,MAMA,MAAMqd,EAIV,KAAKd,GAOH,GAJA1c,EAAS0b,KAET9N,EAAO5N,EAASub,YAAYqB,IAElB,CACR/S,EAAW0O,EAAO3K,GAClB,MAMA,MAAM4P,EAGV,QACE,MAAMA,EF9gBhB,IAA2B1U,EAAY3J,EAAc6Y,EEohBjD,OAAOsG,GAA6Bte,EAAS6c,KAAK3M,GAAaqI,GAWjE7Y,eAAewQ,EAAoBwI,GAEjC,MAAM1Y,EAAWH,KAEjB,KAAOwe,GAAiBre,EAASyb,OAC/Bzb,EAAS0b,KAGX,MAAM1D,EAAMhY,EAAS6c,KAAK3M,GAE1B,OAAQwI,GAAUV,KAAOwG,GACrBpB,GAAsBoB,GAAgBxG,GAAMA,GAC5CmG,GAAyBnG,EAAKA,EAAKU,GASzChZ,aAAawQ,GAEX,MAAMlQ,EAAWH,KAEjB,OAAQG,EAASyb,MAGf,KAAKgD,GACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GAKL,KAAKC,GAKL,KAAKC,GAWL,KAAKC,GACH/e,EAAS0b,KAOT,MAGF,KAAKsD,GACHhf,EAAS0b,KACL1b,EAASke,GAAGc,IACdhf,EAAS0b,KAEF1b,EAASke,GAAGe,MACnBjf,EAAS0b,KACL1b,EAASke,GAAGe,KACdjf,EAAS0b,MAGb,MAGF,KAAKwD,GACHlf,EAAS0b,KACL1b,EAASke,GAAGgB,KACdlf,EAAS0b,KAEX,MAGF,KAAKyD,GACHnf,EAAS0b,KACL1b,EAASke,GAAGiB,KACdnf,EAAS0b,KAEX,MAGF,KAAKuD,GACHjf,EAAS0b,KACL1b,EAASke,GAAGe,MACdjf,EAAS0b,KACL1b,EAASke,GAAGe,KACdjf,EAAS0b,MAOb,MAGF,KAAK0D,GACHpf,EAAS0b,MACL1b,EAASke,GAAGe,KACXjf,EAASke,GAAGkB,MAEfpf,EAAS0b,KAEX,MAGF,KAAK2D,GACHrf,EAAS0b,KACL1b,EAASke,GAAGe,IACdjf,EAAS0b,KAEF1b,EAASke,GAAGmB,MACnBrf,EAAS0b,KACL1b,EAASke,GAAGmB,KACdrf,EAAS0b,MAMjB,GAAI1b,EAASuB,MAAQ2O,EACnB,OAAOlQ,EAAS6c,KAAK3M,GAQzBxQ,WAAWwQ,GAIT,IAKAoP,EAEA/d,EAEAuW,EAEAyH,EAEAC,EAEAC,EAfIzf,EAAWH,KAGf6f,EAAgB,GAchB,KAAOvf,GAAU,CAQf,GANAH,EAASmd,OAETtT,EAAW6V,EAAQ1f,EAASuB,OAE5B+d,EAAQtf,EAAS2f,YAEN,CAWT,GATA9V,EAAW6V,EAAQJ,GAEnBzV,EAAW6V,EAAQ1f,EAASuB,OAE5BvB,EAASmd,QAETrF,EAAW9X,EAASid,aAAajd,EAASuB,UAGzBge,EAAqBK,GAAmB9H,IAAY,EAO9D0H,EAAeE,EAJpBne,EAAQme,EAAOjf,OAAS,MAKlBgf,EAAyBG,GAAmBJ,KAC7CC,GAA0BF,GAE7BG,EAAO/d,OACLJ,EAAQ,EACR,EACAse,GACEH,EAAOne,EAAQ,GACfie,EACAE,EAAOne,EAAQ,GACfvB,EAAS6c,KAAK6C,EAAOne,EAAQ,GAAIme,EAAOne,EAAQ,MAKtDsI,EAAW6V,EAAQ5H,GAEnB,SAIAA,EAAW7Z,EAYf,MAMF,KAAOkC,GAAU,CAEf,KAAIuf,EAAOjf,QAAU,GAcnB,OAAOif,EAAO,GAbdne,EAAQme,EAAOjf,OAAS,EACxBif,EAAO/d,OACLJ,EAAQ,EACR,EACAse,GACEH,EAAOne,EAAQ,GACfme,EAAOne,GACPme,EAAOne,EAAQ,GACfvB,EAAS6c,KAAK6C,EAAOne,EAAQ,GAAIme,EAAOne,EAAQ,OAgB1D7B,YAAY6d,GASV,MAAMvd,EAAWH,KAEjBG,EAASmd,OAET,IAIA2C,EAEAC,EANIxe,EAAQvB,EAASuB,MAErBkG,EAAOzH,EAASggB,WAAWze,GA6C3B,OAvCIvB,EAASke,GAAG+B,MAEdjgB,EAAS0b,KACToE,EAAM9f,EAASggB,WAAWze,GAEtBvB,EAASke,GAAGJ,MAEd9d,EAAS0b,KACTqE,EAAK/f,EAASggB,WAAWze,IAGvBkG,GAAQqY,GAAOC,IAEjB/f,EAASmd,KAAK7b,GACdmG,EFzvBR,SAA8BA,EAAYqY,EAAWC,EAAU/H,GAC7D,MAAO,CACLrY,KAAMugB,GACNlI,IAAAA,EACAvQ,KAAAA,EACAqY,IAAAA,EACAC,GAAAA,GEmvBWI,CACL1Y,EAAMqY,EAAKC,EACX/f,EAAS6c,KAAKtb,MAShBhC,EAAMge,KACRvd,EAASmd,OACLnd,EAASke,GAAGX,IACdvd,EAAS0b,MAWNjU,EAIT/H,MAAMyD,EAAeid,KAQvB,MAAMhb,GAAQ,GAEdoW,GAAW,EACXc,GAAW,GACXyB,GAAa,GACbK,GAAa,GACbX,GAAiB,GACjBtB,GAAc,GACdC,GAAc,GACdI,GAAc,GACdC,GAAc,GACdC,GAAc,GACdE,GAAc,GACdG,GAAc,IACdc,GAAc,IACdoC,GAAgB,GAChBnC,GAAa,GAEbgB,GAAY,GACZC,GAAa,GACbF,GAAgB,GAChBJ,GAAc,GACdC,GAAc,GACdC,GAAY,IACZO,GAAW,GACXC,GAAU,IACVP,GAAW,GACXI,GAAW,GACXI,GAAY,GACZH,GAAa,GACbI,GAAa,GAObb,GAAuC,GAqBvC,SAAS3C,GAAaJ,GACpB,OAAQA,EAAO,GAAKA,EAAO,IAAgB,MAATA,EAMpC,SAASQ,GAAQR,GACf,OAAOA,EAAO,IAAMA,EAAO,GAa7B,SAASK,GAAkBL,GACzB,OAAgB,KAATA,GACO,KAATA,GACCA,EAAO,IAAMA,EAAO,KACpBA,EAAO,IAAMA,EAAO,GAM5B,SAAS4C,GAAiB5C,GACxB,OAAOK,GAAkBL,IAASQ,GAAQR,GAnD5C+C,GAAgB6B,GAAgBlgB,EAChCqe,GAA6B,MAAI7d,EACjC6d,GAA4B,KAAI/f,EAChC+f,QjC36B6B,GiC26BQvgB,QC14B/BqiB,GAAkB,EAGxBC,GAAkB,EAGlBC,GAAoB,EAGpBnc,GAAe,GAGfoc,GAAqB,IAUrBC,GAAmB,+BAGnBC,GAAe,gBAGfC,GAAa,4BAGbC,GAAiB,mBAGjBC,GAAqB,kBAGrBC,GAAsB,iBAItBC,GAAmB,oCAGnBC,GAAuB,YAGvBC,GAAwB,aAKxB,SAASC,GAAYve,EAAa4B,GAChC,OAAO4c,GAAYlX,GAAatH,EAAK4B,EAAO/D,kBAG9B0a,GAAQC,GAEtB,IAOAiG,EAEAC,EAwBA7F,EAEA8F,EAnCIC,EAAqB,GAEzBC,EAAsB,GAGtBC,EAAkB,GAMlBjhB,EAAS2a,EAAQ3a,OAGjBc,EAAQ,EAGRogB,EAAY,EAGZC,EAAiB,EAGjBC,EAAkB,EAGlBC,EAAYxB,GAGZyB,EAAwB,GAExBC,EAAsB,GAuBtBC,EAAgC,SAAUC,GACxC,MAAMC,EAAWC,EAAWX,GAC5B,GAAIU,GAAYA,EAASxiB,OAAS0iB,GAAkB,CAClD,MAAMC,EAAUH,EACZG,EAAQta,MAAQka,INpHIK,EMqHLD,EAAQta,INpHxBqB,EAAUuN,GAAqB2L,KMsHhCC,EAASF,EAAQ3iB,KAAM2iB,EAAQta,SNvHTua,GM4H5BC,EAAW,SAAU7iB,EAAc4iB,GAEjC,MAAM3U,EAAO6U,EAAUhB,GAEvB,GAAI7T,GAAQA,EAAKjO,OAASA,EAAM,CAE9B,MAAM2R,SAAEA,GAAa1D,EAGrB8C,EAAQY,GAAgC,IAApBA,EAAS7Q,QAAgB6Q,EAAS,GAEtDoR,EAAY/iB,IAAS0iB,GAErBM,EAAchjB,IAASmW,GAEvB8M,EAAajjB,IAASyW,GAEtByM,EAAcljB,IAASsW,GAEjB6M,EAAgBV,EAAWX,GA+BjC,GA7BIqB,IACEA,EAAcpQ,WAAa9E,EAAK8E,WAClCoQ,EAAcpQ,SAAW/R,GAEtBmiB,EAAcrM,YACb7I,EAAK6I,WAAaiM,EACpBI,EAAcrM,UAAYtW,EAGnBkhB,GACJA,IAAmByB,IAClBH,GAAeC,GAAcC,KAEjCC,EAAcrM,UAAYtW,KAgB5BuQ,EAEF,OAAQA,EAAM/Q,MAEZ,KAAK+W,GAGCgM,IAGKC,EACPI,EAA2BnV,EAAmB8C,GAEvCkS,EACPI,EAA0BpV,EAAkB8C,GAErCmS,GACPI,EAA2BrV,EAAmB8C,IAEhD,MAEF,KAAKwS,GACCR,EACFS,EAA+BvV,EAAiB8C,GAEzCiS,EACPS,EAAiCxV,EAAmB8C,GAE7CkS,GACPS,EAAgCzV,EAAkB8C,QAUjDY,EAEHuR,GAIMxB,IACRiC,EAAchS,GACTA,EAAS7Q,SACZmN,EAAK0D,SAAWrT,IAMbojB,IACHsB,EACFY,EAA8BlC,EAAgBzT,GAEvCgV,EACPY,EAA6BnC,EAAgBzT,GAEtCiV,GACPY,EAA8BpC,EAAgBzT,IAwBlD,OApBIjO,IAASgW,GACX+N,EAAU9V,GAEHjO,IAASiW,GAChB+N,EAAa/V,GAEN8U,EACPkB,EAAahW,GAENyT,GACHsB,GACEkB,EAAcxC,EAAgBzT,IAChCkW,EAAgBzC,EAAgBzT,GAQ/BA,IASX0V,EAAgB,SAAUhS,GAMxB,IAAIyS,EAAYziB,EAEhB0iB,EAAW9gB,EAEX+gB,EAAa3iB,EAEb4iB,EAAYhhB,EAEZqD,EACE+K,EACA,SAAUZ,EAAOnP,GACf,GAAImP,EAAM/Q,OAAS+W,GACjB,GAAIuN,GAAc,EAAG,CAGnB,IAFAD,EAAYtT,EAAea,KAEpBuP,GAAmBrZ,KAAKuc,IAC7BA,EAAW3e,OAAOtC,GAClBghB,EAAYxiB,EAGVwiB,GAAa,IAKXC,IACD1S,EAASyS,GAAoBxS,KAAOyS,EACrCD,KAEEG,IACD5S,EAAS2S,GAAqB1S,KAAO2S,EACtCD,KAGF3S,EAAS3P,OAAOoiB,EAAWE,EAAaF,EAAY,GAEpDA,EAAYE,EAAa3iB,QAM3B,IAFA4iB,EAAaxT,EAAea,KAErBwP,GAAoBtZ,KAAKyc,IAC9BA,EAAY7e,OAAOtC,GACnBkhB,EAAa1iB,GAKrBpB,IAIJgjB,EAmBiC,SAAUb,EAAkB5R,GAEtD4R,EAAQhT,aAAgBgT,EAAQ/O,MAAS7C,EAAMyT,OAClD7B,EAAQ9Q,KAAOd,EAAMsF,KACrBsM,EAAQhR,SAAWrT,IAKvBulB,EAA+B,SAAUlB,EAAkBhU,GAErDA,EAAKE,OAAS4V,GAChB9V,EAAKnQ,MAAQgC,EAIbkkB,EAAa/V,IAKjB0U,EAA4B,SAAU1U,EAAgBoC,GAEpD,MAAMa,KAAEA,GAASb,EAEbpC,EAAKE,OAAS8V,GAChBhW,EAAKnQ,MAAQomB,GAAShT,GAEfjD,EAAKE,OAAS4V,GACrB9V,EAAKnQ,MAAQoT,IAAS8O,GAAgB9O,IAASjD,EAAKxF,KAGpDwF,EAAKnQ,MAAQoT,EAGfjD,EAAKgD,SAAWrT,GAIlBolB,EAAkC,SAAU/U,EAAgBoC,GAE1D,MAAMsF,KAAEA,GAAStF,EAEjBpC,EAAK0H,KAAOA,EACZ1H,EAAKgD,SAAWrT,EAKZ+X,EAAKrW,OAAS6kB,KAChBlW,EAAKmW,QAAUtkB,IAKnBojB,EAAgC,SAAUjB,EAAkBpU,GAEtD2V,EAAcvB,EAASpU,KAMzBA,EAAK/P,eNtW8BmkB,EAAkBxZ,GAEzD,OAAIwZ,EAAQhT,YACHnP,EAIAsE,GAAkBqE,EAAM,SAC3B5F,EACA4F,EM6VW4b,CAAyBpC,EAASpU,EAAKpF,QAKxDia,EAA6B,SAAU7U,EAAiBwC,GAEtDxC,EAAK/P,MAAQuS,EAAMa,KACnBrD,EAAKoD,SAAWrT,GAIlBmlB,EAAmC,SAAUlV,EAAiBwC,GAE5D,MAAMsF,KAAEA,GAAStF,EAEjBxC,EAAK8H,KAAOA,EACZ9H,EAAKoD,SAAWrT,EAKZ+X,EAAKrW,OAAS6kB,KAChBtW,EAAKuW,QAAUtkB,IAKnBsjB,EAAgC,SAAUnB,EAAkBxT,GAE1DA,EAAU3Q,MAAQgC,GAIpB8iB,EAA6B,SAAUnU,EAAsB4B,GAE3D,IAeAsF,GAfIzE,KAAEA,GAASb,EAGL5B,EAAUnG,GAGXmG,EAAUnG,GAGTmG,EAAUnG,GAGTmG,EAAUnG,GAKrB,IACEqN,EAAO2O,GAAqBpT,GAE9B,MAAOqT,IAEH5O,GA0CFlH,EAAUkH,KAAOA,EAEjBlH,EAAU3Q,MAAQ6X,EAAKrW,OAASklB,GAC3B7O,EAA2B7X,MAC5BoT,GASJzC,EAAU3Q,MAAQoT,EAGpBzC,EAAUwC,SAAWrT,GAkDvBylB,EAAY,SAAUpjB,GAEfA,EAAKgR,UACR+S,EAAa/jB,IAIjBqjB,EAAe,SAAUmB,GAElBA,EAAQxT,UACX+S,EAAaS,IAIjBlB,EAAe,SAAUtB,GAEvB,MAAMta,IAAEA,EAAGuL,KAAEA,GAAS+O,EAAsBta,IAAQyN,GAoBlClC,IAAS+O,EAAQhR,SACjC+S,EAAa/B,GAGNta,IAAQwN,GAAiB8M,EAAQxZ,cNviBhBwZ,GAE5B,IAAIta,IAAEA,EAAG+c,MAAEA,GAAUzC,EAAS0C,EAAUrkB,EAAWiG,EAAWjG,EAE1DokB,GACFxe,EACEwe,EACA,SAAU7W,GAER,MAAMpF,EAAOoF,EAAKvO,OAASyW,GACtBlI,EAAkBpF,KACnB7K,EAES,SAAT6K,EACFkc,EAAU7kB,EAEH2I,IAASmc,IAChBre,EAAWzG,KAUfmiB,EAAQlR,UAAY4T,EACtBnb,EACEyY,EAAQyC,QAAUzC,EAAQyC,MAAQ,IAClCG,GAAuB,OAAQC,GAAoB,aAItC,WAARnd,GAAqBpB,IAC5B0b,EAAQjR,SAAWlR,GMwgBjBilB,CAAc9C,GAHdA,EAAQxZ,KAAOuc,IAQnBvB,EAWkB,SAAUxB,EAAkBpU,GAE5C,MAAMpF,KAAEA,EAAI3K,MAAEA,GAAU+P,EAGxBoX,EAAwBxc,IAASyc,GAAgBzc,IAAS0M,EAgB1D8M,EAAQxZ,GAAQwc,EAAwBnnB,EAAQ+P,EAChDmW,EAAanW,IAIf2V,EAAgB,SAAUvB,EAAkBpU,GAC1C,OAAOsX,GAAoBtX,EAAKpF,OAC3BwZ,EAAQta,MAAQwN,GAAgBtH,EAAKpF,OAASyc,GAGrDlB,EAAe,SAAUoB,EAAeC,GAEtC,IAEAC,EAEAjhB,EAEAnD,EANIuhB,EAAgBV,EAAWX,IAU7B/c,EAFEoe,GACF6C,EAAStE,GAAkBA,IAAmByB,GAEzCA,EAA0BiC,MAC3BjC,EAAcxR,SAGXkQ,KAIPjgB,EAAQqkB,EAAclhB,EAAM+gB,KACf,IACPC,EACFhhB,EAAKnD,GAASmkB,GAGdhhB,EAAK/C,OAAOJ,EAAO,GACfuhB,IAAkBpe,EAAKjE,SACrBklB,SACM7C,EAA0BiC,MAGlCjC,EAAcxR,SAAWrT,MASrC4nB,EAAW,SAAUjY,GAYdyT,GACHY,IAGF,MAAMtiB,EAAOiO,EAAKjO,KAAMmjB,EAAgBV,EAAWX,GAGnD,GAAI9hB,IAASmmB,IAAiBnmB,IAASomB,GAAkB,CAEvD,MAAM5D,EAAgBM,EAAUf,GAE5BS,IAGDvU,EAAaoY,KAAO7D,EAGjBA,EAASxiB,OAASomB,IAAoB5D,EAASxiB,OAAS+V,KAC1DyM,EAAS7N,KAAO1G,EAChB4U,EAASL,EAASxiB,MAClBkK,EAAW6X,EAAS9T,UAmBtB/D,EADEiZ,EAOAzB,GAAkByB,EAAcnjB,OAAS0iB,GACrChB,EAAe0D,QAAU1D,EAAe0D,MAAQ,IAChDjC,EAAcxR,WAAawR,EAAcxR,SAAW,IAK/CkQ,EAJT5T,GAOAjO,IAAS+V,KAIN2L,IACFzT,EAAYqY,KAAO9lB,GAEtB0J,EAAW6X,EAAS9T,IAOpBA,EAAK+I,OAGHmM,IACEA,EAAcpQ,WAAa9E,EAAK8E,WAClCoQ,EAAcpQ,SAAW/R,IAGtBmiB,EAAcrM,WAAa7I,EAAK6I,YACnCqM,EAAcrM,UAAYtW,IAK9B0J,EAAW4X,EAAW7T,IAK1BsY,EAAe,SAAU3U,IAWvBA,EAAOA,EAAK1O,QAAQ6d,GAAkBxd,KAEpC2iB,EACEM,GAAmB5U,KAKzB6U,EAAc,CACZ,SAAUhL,GACR,IAAKiG,EAAgB,CACnB,MAAM/c,EAAQ8W,EAAQ9W,MAAMsc,IAG5B,GAAItc,GAAyB,IAAhBA,EAAM/C,MAAa,CAC9B,MAAMyG,EAAM1D,EAAM,GAClB,GAAiB,MAAbA,EAAM,GAQR2d,EAA8Bja,GAC9Bwa,EAASH,GAAkBra,OAExB,CAoBH,MAAM4F,EP10BlB,SAA8B5F,EAAakK,EAAgB5C,GAMzD,OAHI4C,IACF5C,EAAc3O,GAET,CACLhB,KAAM0iB,GACNra,IAAAA,EACAkK,MAAAA,EACAd,QAAiB,UAARpJ,EAETqJ,SAAU1Q,EACV2O,YAAAA,EACAoD,UAAWpD,GAAetH,IAAQwN,GO4zBb6Q,CACXre,EN/1BLqB,EAAUwN,GMg2BC7O,GACNiZ,GAAqBxZ,KAAKO,IAG5B6d,EAASjY,GACTyT,EAAiBzT,EAEnB,OAAOtJ,EAAM,MAKnB,SAAU8W,GACR,MAAM9W,EAAQ8W,EAAQ9W,MAAM4c,IAC5B,GAAI5c,EAaF,OAVI+c,IAAmBC,IAGJ,MAAbhd,EAAM,IACRke,EAASnB,EAAe1hB,KAAM0hB,EAAerZ,KAG/CqZ,EAAiBpjB,GAGZqG,EAAM,IAIjB,SAAU8W,GAER,GAAIiG,IAAmBC,EAAkB,CACvC,MAAMhd,EAAQ8W,EAAQ9W,MAAM0c,IAC5B,GAAI1c,EAAO,CAUT,IAAIsJ,EAAwC9E,EAAOxE,EAAM,GAEzD,GAAIwE,IAAS0G,IAA0B1G,IAASwd,EAC9C1Y,EAAO2Y,GACLC,GAAgB1d,GAChB5F,QAIC,GAAIuB,GAAkBqE,EAAM2d,GAAsBhG,IAAqB,CAC1E,MAAMvX,EAAQiY,GAAYrY,EAAM2d,GAAsBhG,IAMtD7S,EAAO2Y,GACLG,GACAF,GAAgBtd,SAMf,GAAIzE,GAAkBqE,EAAM6d,IAAwB,CACvD,IAAIC,EAAOzF,GAAYrY,EAAM6d,IACzBliB,GAAkBmiB,EAAMnG,MAC1BmG,EAAOzF,GAAYyF,EAAMnG,KAE3B7S,EAAO2Y,GACLI,GACAC,EAAOJ,GAAgBI,GAAQ1jB,QAI9B,GAAIuB,GAAkBqE,EAAM+d,GAA0BpG,IAAqB,CAC9E,MAAMqG,EAAS3F,GAAYrY,EAAM+d,GAA0BpG,IAM3D7S,EAAO2Y,GACLM,GACAL,GAAgBM,SAIlBlZ,WN17BoB0U,EAAkBxZ,GAGhD,GAAIwZ,EAAQhT,YACV,OAAOyX,GACLP,GAAgB1d,IAIf,CAGH,MAAMke,EAAYC,GAAane,GAG/B,OAAIoe,GAAmB5E,EAAQta,MAAQsa,EAAQpQ,MACtC6U,GAAwBje,GAGxBO,EAAUyN,GAAoBkQ,GAC9B9B,GACLjO,GAAU+P,IAAcA,EACxB7B,IAGK9b,EAAU0N,GAAoBiQ,GAC9B9B,GACLjO,GAAU+P,IAAcA,EACxB1C,IAGKjb,EAAU2N,GAAqBgQ,GAC/B9B,GACLjO,GAAU+P,IAAcA,EACxB5C,IAKG2C,GAAwBje,IMm5BhB+M,CAAgBwL,EAAgBvY,GAgBzC,OAbA+c,EAASjY,IAGT2T,EAAajd,EAAM,IAIjBgd,EAAmB1T,EAGnB4U,EAAS5U,EAAKjO,MAGT2E,EAAM,MAInB,SAAU8W,GAER,IAAI7J,EAAqBjN,EAuEzB,OApEIgd,GAAoBC,GAEtBjd,EAAQ8W,EAAQ9W,MAAMD,GAAakd,KAAgBld,GAAakd,GAAc,IAAIlc,OAAOkc,OAIvFhQ,EAAOrH,GAAakR,EAAS,EAAG9W,EAAM/C,OACtC2kB,EAAa3U,GAEbA,GAAQgQ,EAKHD,EAAiBhQ,UACpBuU,EACEM,GAAmBjjB,IAIvBsf,EAASlB,EAAiB3hB,MAC1B2hB,EAAmBrjB,GAKZ6jB,IAAcxB,IAErB4F,EADA3U,EAAO6J,GAWDiG,EA4BR9P,EAAO6J,GAzBP9W,EAAQ8W,EAAQ9W,MAAMsc,MAIpBrP,EAAOrH,GAAakR,EAAS,EAAG9W,EAAM/C,SAEpC2kB,EACE3U,EAAK1O,QAAQge,GAAgB3d,IAMjCgjB,GADA3U,EAAO6J,GAEAvY,QAAQge,GAAgB3d,IAa5BqO,IAIX4V,GAAe,CAEb,SAAUC,GACR,GAAI3iB,GAAkB2iB,EAAQC,IAAqB,CAWjD,MAAMC,GADNF,EAASjG,GAAYiG,EAAQC,KACRxkB,QAAQ,OAAQK,GAAkByB,MAAM,KAC7D,GAAI2iB,EAAM,GAAI,CACZ,MAAMjO,EAAU+H,GAAYkG,EAAM,IAElC/lB,EAAQ6f,GAAYkG,EAAM,IAE1BhjB,EAAQ+U,EAAQ/U,MAAMqc,IAEtB,GAAIrc,EAAO,CACT,MAAMijB,EAAQlO,EAAQ1U,MAAMgc,IAC5BrK,EAAOqO,GAAqB4C,EAAM,IAClChR,EAAKoO,GAAqB4C,EAAM,IAChC,GAAIjR,GAAQC,EACV,OAAOiR,GACLlR,EACAC,EAC0B,OAA1B6K,GAAY9c,EAAM,IAClB/C,OAID,CACH,MAAMyU,EAAO2O,GAAqBtL,GAClC,GAAIrD,EACF,OAAOwR,GACLxR,EACA/X,EACA0C,EACAY,OAWZ,SAAU6lB,GACR,GAAI3iB,GAAkB2iB,EAAQK,MAC5BL,EAASjG,GAAYiG,EAAQK,OAEtBpG,EACH,MPphCH,CACL1hB,KAAM+nB,GACN5e,KOkhCoCse,EPjhCpC3Q,UAAWtW,EACXwW,OAAQxW,IOgiCR,SAAUinB,GACR,GAAI3iB,GAAkB2iB,EAAQO,MAC5BP,EAASjG,GAAYiG,EAAQO,OAEtBtG,EACH,MPhiCH,CACL1hB,KAAMiW,GACN9M,KO8hCqCse,EP7hCrC3Q,UAAWtW,IO6iCX,SAAUinB,GACR,GAAI3iB,GAAkB2iB,EAAQQ,IAAmB,CAE/C,MAAM5R,EAAO2O,GADbyC,EAASjG,GAAYiG,EAAQQ,KAE7B,GAAI5R,EACF,gBPtkCeA,GACvB,MAAO,CACLrW,KAAM+V,GACNM,KAAAA,GOmkCa6R,CAAiB7R,KAQ9B,SAAUoR,GACR,GAAI3iB,GAAkB2iB,EAAQU,IAAwB,CAEpD,MAAM9R,EAAO2O,GADbyC,EAASjG,GAAYiG,EAAQU,KAE7B,GAAI9R,EACF,gBPnmCmBA,GAC3B,MAAO,CACLrW,KAAMomB,GACN/P,KAAAA,GOgmCa+R,CAAqB/R,KAQlC,SAAUoR,GACR,GAAI3iB,GAAkB2iB,EAAQY,MAEvB5G,GADLgG,EAASjG,GAAYiG,EAAQY,KAE3B,MPpnCD,CACLroB,KAAMmmB,KO2nCN,SAAUsB,GACR,GAAI3iB,GAAkB2iB,EAAQa,IAAuB,CAEnD,MAAMjS,EAAO2O,GADbyC,EAASjG,GAAYiG,EAAQa,KAE7B,GAAIjS,GACEqL,GAAkBA,EAAe/R,YACnC,gBPrlCiB0G,EAAsByO,GACjD,MAAO,CACL9kB,KAAMuoB,GACNlS,KAAAA,EACAyO,QAAAA,EACA9N,OAAQxW,GOglCOgoB,CACLnS,EACAA,EAAKrW,OAAS6kB,MAaxB,SAAU4C,GACR,IAAKgB,GAAsB3gB,KAAK2f,GAAS,CAEvC,MAAMpR,EAAO2O,GADbyC,EAAShG,GAAYgG,IAErB,GAAIpR,EACF,gBP1oCuBA,EAAsBmO,GACrD,MAAO,CACLxkB,KAAMujB,GACNlN,KAAAA,EACAmO,KAAAA,EACAxN,OAAQxW,GOqoCKkoB,CAAyBrS,EAAM8L,IAAcvB,OAS5D+H,GAAY,SAAU7M,GACpB,KAAOA,GACLlV,EACE6f,EACA,SAAUmC,GACR,MAAMjkB,EAAQikB,EAAM9M,GACpB,GAAInX,EAEF,OADAmX,EAAOvR,GAAauR,EAAMnX,EAAM7D,QACzBE,KAOjB6nB,GAAa,SAAU/M,GACrB,GAA4B,MAAxBgN,GAAchN,GAAe,CAS/BwG,IAEA,MAAMnZ,EAAOoB,GAAauR,EAAM,GAEhC,IAAI9b,EAAO+oB,GAAiB5f,GAAO6f,EAAchoB,EACjD,GAAIhB,IAAS+V,GAAa,CACxB,MAAM9H,EAAO6U,EAAUf,GACnB9T,IACFjO,EAAOiO,EAAKjO,KACZgpB,EAAcxoB,GAOlB,MAAMyN,EAAY4U,EAAS7iB,GACvBiO,GAAQ+a,GA3tBC,SAAUC,GAEzB,IAEAC,EAEAC,EAEAC,EANIC,EAAmBJ,EAQvB,KAAOzoB,IACD6oB,EAAY1X,WACTyX,GACCC,EAAY1U,aACP0U,EAAY1U,KAGvBwU,EAAcC,EAAU5oB,GAE1B0oB,EAAWG,EAAYhD,cAIdgD,EAAYhD,KACnBgD,EAAcH,EAQbC,GACHzE,EAAa2E,GA2rBXC,CAAerb,QAKjBrH,EACE4gB,GACA,SAAUoB,GACR,MAAM3a,EAAO2a,EAAM9M,GACnB,GAAI7N,EAEF,OADAiY,EAASjY,GACFjN,KAOjBuoB,GAAa,WAOX,OAHA3nB,EAAQsgB,EAAkB,IAGbphB,GAEPc,EAAQd,GAA4C,MAAlCgoB,GAAcrN,EAAS7Z,GACvCugB,IAActB,KAChBmB,EAAYpgB,EAAQ,GAOlBugB,IAAcvB,KAChBoB,EAAYpgB,GAOhBkhB,EAAUV,GAGVoH,GAAStH,GAETD,EAAiB3X,GAAemR,EAAS,KAAMuG,IAC/CE,EAAkB5X,GAAemR,EAAS,KAAMuG,KAGzBA,IACjBC,EAAiB,GAAKC,EAAkBD,GAErCsH,UAHT,GASO/oB,GAKXgpB,GAAW,SAAU5nB,GACdwgB,EAAWthB,QACdoJ,EAAWmY,EAAWzgB,IAQ1B,KAAOpB,IACLgpB,GAASxH,IACTC,EAAiB3X,GAAemR,EAAS,KAAMuG,KACzBA,KAEpBG,EAAYvB,GAGZ4I,GAASvH,MAGTA,GAAkB,GAGGnhB,IAC4B,MAA3CgoB,GAAcrN,EAASwG,KACzBE,EAAYtB,GACZoB,KAGFuH,GAASvH,GAETuH,GAASrH,GAGTjY,EAAWkY,EAAY5hB,GAEnByhB,EAAiBnhB,IAEnBohB,EAAkB5X,GAAemR,EAAS,KAAMwG,KAEzBA,KAErBD,EAAY1X,GAAemR,EAAS,KAAMwG,IAC1B,GAAKC,EAAkBF,IACjCuH,UAuBhB,IAAK,IAAIxoB,EAAI,EAAGD,EAASuhB,EAAUvhB,OAAQC,EAAID,EAAQC,GAAK,EAC1Da,EAAQygB,EAAUthB,IAGlBkhB,EAAiBI,EAAUthB,EAAI,KAE7B4nB,GACEpe,GAAakR,EAAS7Z,EAAOqgB,IAKjCA,EAAiBI,EAAUthB,EAAI,GAC/BohB,EAAYE,EAAUthB,EAAI,IAC1BmhB,EAAkBG,EAAUthB,EAAI,KAG9B+a,EAAO2F,GACLlX,GAAakR,EAASwG,EAAgBC,MAKtC2G,GAAW/M,IAKbqG,EAAYxB,GACZgI,GACEpe,GAAakR,EAAS7Z,KAyB5B,OApBIkgB,EAAUhhB,QAOZwhB,IASET,EAAS/gB,OAAS,GACpB6iB,EAAc9B,GAGTA,EC39CF,MAAM5lB,GAAO,KAEPC,GAAQ,KAERutB,GAAQ,IAERC,GAAQ,IAERC,GAAO,IAEPC,GAAM,KAENC,GAAW,IAEXC,GAAM,IAENC,GAAQ,cA2BLC,GAASC,GACvB,UAAWrQ,GAAWqQ,EAAQR,gBAGhBvnB,GAAQgoB,GACtB,UAAWtQ,GAAWsQ,EAAOT,gBAGfU,GAAOhhB,EAAc3J,GACnC,SAAU2J,KAAQyQ,GA/BpB,SAAkB7U,GAEhB,IAAIvF,EAAiB,GAAI4qB,EAAY5pB,EAgBrC,OAdAoG,EACE7B,EACA,SAAUslB,GACJzqB,EAAMyqB,IACRD,EAAYppB,EACZwK,EAAchM,EAAM6qB,IAEZD,GACR5e,EAAchM,EAAMtD,KAGxBsE,GAGKhB,EAasB8qB,CAAS9qB,GAAOiqB,gBAG/BpiB,GAAS7I,GACvB,OAAO+rB,KAAKC,UAAUhsB,GCLxB,MAAMisB,GAAuB,GAG7BC,GAAmC,GAEnCC,GAAgB,GAEhBC,GAA+B,IAE/BC,GAAmC,IAEnCC,GAAmC,IAEnCC,GAAyB,IAEzBC,GAAoB,IAEpBC,GAAyB,IAEzBC,GAAwB,IAExBC,GAAoB,IAEpBC,GAA0B,IAE1BC,GAAuB,IAEvBC,GAAqB,IAErBC,GAA4B,IAE5BC,GAA0B,IAE1BC,GAAyB,IAEzBC,GAAsB,IAEtBC,GAAuB,IAEvBC,GAAc,IAEdC,GAAiB,IAEjBC,GAAgB,IAEhBC,GAAc,IAEdC,GAAY,IAEZC,GAAY,IAEZC,GAAc,UAGd,IAAIC,GAGJC,GAEA,SAASC,GAAiBhW,EAAsB1Q,EAAkB2mB,EAAqBC,GACrF,gBClGcC,EACdve,EACAwe,EACAC,EACAC,EACAC,EACAjnB,EACA2mB,EACAC,EACAM,GAGA,IAAIruB,EAEJsuB,EAAgB9rB,EAEhB+rB,EAAoB,SAAU9e,GAC5B,OAAOue,EACLve,EACAwe,EACAC,EACAC,EACAC,EACAjnB,EACA2mB,EACAC,EACA/rB,IAIJ,OAAQyN,EAAKjO,MAEX,KAAKmZ,GACH3a,EAAQwuB,GAAoB/e,EAAiBzP,OAC7C,MAEF,KAAKkf,GACHlf,EAASyP,EAAekK,SAAW4U,EAAmB9e,EAAeA,MACrE,MAEF,KAAKqK,GACH9Z,EAAQuuB,EAAmB9e,EAAgBiK,MACtCjK,EAAgBkK,SACjB4U,EAAmB9e,EAAgBmK,OACvC,MAEF,KAAKmI,GACH/hB,EAAQuuB,EAAmB9e,EAAiBnG,MACxCmlB,GACAF,EAAmB9e,EAAiBkS,KACpC+M,GACAH,EAAmB9e,EAAiBmS,IACxC,MAEF,KAAKjD,GAEH3e,EAAQ2uB,GADOlf,EAAmB2K,MAAMwU,IAAIL,IAE5C,MAEF,KAAK1O,GACH,MAAM4L,EAAmB,GACzBrjB,EACGqH,EAAoBrI,KACrB,SAAUnD,EAAab,GACrBsI,EACE+f,EACA+C,GAAmBvqB,GACjByqB,GACAH,EAAmB9e,EAAoB+P,OAAOpc,OAItDpD,EAAQ6uB,GAAmBpD,GAC3B,MAEF,KAAKxR,GACHqU,EAAgBtsB,EAEhB,MAAMmZ,EAAa1L,EAEnBzP,EAAQ8uB,GACNb,EACA,CACEO,GAAmBrT,EAAWxQ,MAC9BwQ,EAAWnB,OAAS+U,GAAiBjvB,EACrCqb,EAAWtV,OAAS,EAAI2oB,GAAmBrT,EAAWtV,QAAU/F,EAChEqH,EAAS4nB,GAAiBjvB,EAC1BguB,EAAYiB,GAAiBjvB,EAC7BiuB,GAAgBjuB,IAGpB,MAEF,KAAKua,GACHiU,EAAgBtsB,EAEhB,MAAMmY,KAAEA,EAAI/T,QAAEA,EAAOgU,MAAEA,EAAKJ,OAAEA,EAAMnU,OAAEA,GAAW4J,EAEjDuf,EAA2B5U,EAAQA,EAAMwU,IAAIL,GAAqB,GAIhEvuB,EAFEma,EAAK3Y,OAASyY,GAER6U,GACNb,EACA,CACEa,GACEZ,EACA,CACEM,GAAoBrU,EAAoBxP,MACxCgkB,GAAkBK,KAGtBhV,EAAS+U,GAAiBjvB,EAC1B+F,EAAS,EAAI2oB,GAAmB3oB,GAAU/F,EAC1CqH,EAAS4nB,GAAiBjvB,EAC1BguB,EAAYiB,GAAiBjvB,EAC7BiuB,GAAgBjuB,IAOZgvB,GACNX,EAJK/T,EAKL,CACEmU,EAAkBpU,GAClBra,EACA6uB,GAAkBK,GAClB7nB,EAAS4nB,GAAiBjvB,GAS5B,CACEyuB,EAAkBpU,GAClBqU,GAAmBpoB,GACnBtG,EACAqH,EAAS4nB,GAAiBjvB,IAKhC,MAEF,QACEwuB,EAAgBtsB,EAChB,MAAMhB,KAAEA,GAASyO,EACjBzP,EAAQ8uB,GACNV,EACA,CACEG,EAAmB9e,EAAc9E,MACjC3J,EAAKsB,OACDqsB,GAAkB3tB,EAAK4tB,IAAIL,IAC3BzuB,EACJqH,EAAS4nB,GAAiBjvB,IAOlC,OAAKqH,EAKDknB,EACKC,EACHtuB,EAAQ,IAAM8mB,EACd9mB,EAICsuB,EACHtuB,EACA6uB,GAAmB,CAAC/H,EAAgB4H,GAAkB1uB,IAbjDA,EDrEFivB,CACLpX,EACAuU,GACAC,GACAC,GACAC,GACAplB,EACA2mB,EACAC,GAIJ,SAASmB,GAAgBC,GACvB,MAAM1D,EAAmB,GAYzB,OAXA5f,GACEsjB,EACA,SAAUnvB,EAAYiE,GAChB7C,EAAMpB,IACR0L,EACE+f,EACA+C,GAAmBvqB,GAAOyqB,GAAkB1uB,KAK7C6uB,GAAmBpD,GAG5B,SAAS2D,GAAkBlsB,EAAuB2oB,GAChD,SAAU5rB,KAAoB4rB,GAAO9mB,MAAqB7B,GAAU6B,KAGtE,SAASsqB,GAAe/R,GACtB,UAAWA,KAGb,SAASgS,GAAoBzX,EAAsBhP,GACjD,MAAM7I,EAAQ6tB,GAAiBhW,GAC/B,OAAOhP,EACHimB,GACAtB,GACA,CACExtB,IAGFA,EAYN,SAASuvB,GAAuB1X,GAC9B,OAAOgW,GAAiBhW,EAAMrV,EAAWA,EAAWirB,IAGtD,SAAS+B,GAAexvB,EAAY6X,EAA6B1E,GAC/D,OAAI/R,EAAMpB,GACDwuB,GAAmBxuB,GAGxB6X,EACKyX,GAAoBzX,GAGzB1E,GACFya,GAAmBza,EAAS7Q,OAAS,EAC9BmtB,GAAkBtc,SAF3B,EAMF,SAASsc,GAAkBtc,EAAkBmF,GAK3C,MAAMoX,EAASvc,EAAS7Q,OAAS,IAAMgW,EAEvC5M,EAAWugB,GAAWyD,GACtB,MAAM1vB,EAAQob,GACZjI,EAASyb,IACP,SAAUrc,GACR,OAAO4Z,GAAc5Z,EAAM/Q,MAAM+Q,KAGrCmd,EAASC,GAAiBC,IAI5B,OAFAtL,EAAU2H,IAEHjsB,EAIT,SAAS6vB,GAA2B1c,EAAyBmF,GAC3D,GAAInF,EAAU,CACZ,MAAMjQ,EAASusB,GAAkBtc,EAAUmF,GAC3C,OAAOnF,EAAS7Q,OAAS,GAAKgW,EAC1B+W,GAAensB,GACfA,GAiER,SAAS4sB,GAAcxf,EAAczG,EAAoB+c,EAAsBmJ,EAAuB7e,GACpG,OAAO4d,GACL3B,GACA,CAAC7c,EAAMzG,EAAK+c,EAAOmJ,EAAQ7e,IE7P/B,SAAS8e,GAAQnwB,EAAa8K,EAAc1G,EAAajE,IAC1CH,EAAO8K,KAAU9K,EAAO8K,GAAQ,KACxC1G,GAAOjE,EFwTdmsB,GAAcjI,IAAoB,SAAUzU,GAE1C,IAIAwgB,EAIAC,EAEAC,GAVItmB,IAAEA,EAAGsH,YAAEA,EAAW4C,MAAEA,EAAKd,QAAEA,EAAOC,SAAEA,EAAQqB,SAAEA,EAAQ+D,UAAEA,EAAS3N,KAAEA,EAAIqG,IAAEA,EAAG/M,IAAEA,EAAGoP,KAAEA,EAAIuT,MAAEA,EAAKzT,SAAEA,GAAa1D,EAEjHa,EAAa,GAIb8f,EAAwB,GAMxB,GAAIvmB,IAAQwN,EAAc,CACxB,MAAMrW,EAAO,CAACwtB,GAAmB6B,GAA0B1lB,IAS3D,OARIwI,GACFzH,EACE1K,EACAouB,GACEK,GAAkBtc,EAAUnR,KAI3B8sB,GAAiB1B,GAAapsB,GA2EvC,OAxEA0K,EAAWwgB,GAAc1pB,GAErBokB,GACFxe,EACEwe,EACA,SAAU7W,GACRrE,EACE0kB,EACAjE,GAAcpc,EAAKvO,MAAMuO,MAON,KAAvB0N,GAAc5T,GAChBomB,EAAYzB,GAAmBziB,GAAalC,EAAK,IAGjDyG,EAAKzG,IAAM2kB,GAAmB3kB,GAG5BkK,IACFzD,EAAKyD,MAAQgb,IAGX9b,IACF3C,EAAK2C,QAAU8b,IAGb7b,IACF5C,EAAK4C,SAAW6b,IAGdxa,IACFjE,EAAKiE,SAAWwa,IAGd/d,IACFV,EAAKU,IAAMwe,GAAexe,EAAIhR,MAAOgR,EAAI6G,KAAM7G,EAAImC,WAGjDlP,IACFqM,EAAKrM,IAAMurB,GAAevrB,EAAIjE,MAAOiE,EAAI4T,KAAM5T,EAAIkP,WAGjDE,IACF/C,EAAK+C,KAAOic,GAAoBjc,EAAMrR,IAGpCmP,GACFb,EAAKa,YAAc4d,GACf5b,IACF+Y,GAAaA,GAAa5pB,OAAS,GAAKN,EACxCmuB,EA1IN,SAA2Bhd,GAEzB,MAAMjQ,EAAiC,GAEvCgO,EAAgC,GAEhCof,EAAU,SAAU3lB,EAAcyP,GAE3BmW,GAAYnW,IAEf1O,EACEwF,EAFFvG,EAAO0lB,GAA0B1lB,KAEfuG,EAAMvG,GAAQ,IAC9ByP,IAuCN,GAjCAhS,EACE+K,EACA,SAAUZ,GAER,GAAIA,EAAM/Q,OAAS0iB,GAAkB,CACnC,MAAMC,EAAU5R,EAChB,GAAI4R,EAAQ/O,KAOV,YANAkb,EACEnM,EAAQ/O,KACR+O,EAAQta,MAAQyN,EACZ6M,EAAQhR,SACR,CAACgR,IAOXmM,EAAQpJ,GAA0B,CAAC3U,MAKvC1G,GACEqF,EACA,SAAUiC,EAAUxI,GAElBzH,EAAOyH,GAAQykB,GACbK,GAAkBtc,EAAUnR,OAK7BwuB,GAAattB,GAChB,OAAOgsB,GAAgBhsB,GAsFPutB,CAAkBtd,KAG3BA,IACPya,GAAmB5rB,EACnBkqB,GAAaA,GAAa5pB,OAAS,GAAKgW,EACxC4X,EAAeT,GAAkBtc,EAAUmF,GACvCA,EACF4X,EAAed,GAAkBc,IAGjC5f,EAAK8C,KAAO8c,EACZA,EAAepwB,IAInBwkB,EAAU4H,IAEH4D,GACLZ,GAAgB5e,GAChB2f,EACAM,GAAYH,GACRtwB,EACAsvB,GACEhU,GAAWgV,EAAaR,KAE9BM,EACAC,IAKJhE,GAAcxU,IAAsB,SAAUlI,GAE5C,MAAMzP,EAAQyP,EAAK6W,QACfwI,GACAjC,GACA,CACE2B,GAAmB/e,EAAK9E,MACxBkjB,GAAiBpe,EAAKoI,KAAwB7V,EAAUA,KAG1DwtB,GAAe/f,EAAKzP,MAAOyP,EAAKoI,KAAMpI,EAAK0D,UAE/C,OAAO2b,GACLrC,GACA,CACE+B,GAAmB/e,EAAK9E,MACxB3K,KAMNmsB,GAAclU,IAAqB,SAAUxI,GAE3C,MAAMzP,EAAQyP,EAAK6W,QACfwI,GACAjC,GACA,CACE2B,GAAmB/e,EAAK9E,MACxBkjB,GAAiBpe,EAAKoI,KAAwB7V,EAAUA,GACxDwsB,GAAmB/e,EAAKY,QAG1Bmf,GAAe/f,EAAKzP,MAAOyP,EAAKoI,KAAMpI,EAAK0D,UAE/C,OAAO2b,GACLpC,GACA,CACE8B,GAAmB/e,EAAK9E,MACxB6jB,GAAmB/e,EAAKY,MACxBrQ,KAMNmsB,GAAcrU,IAAsB,SAAUrI,GAE5C,MAAMjF,GAAEA,EAAEG,KAAEA,EAAI1G,IAAEA,EAAGjE,MAAEA,EAAK6X,KAAEA,GAASpI,EAEvC,GAAIjF,IAAOge,GACT,OAAOsG,GACLnC,GACA,CACE6B,GAAmB7jB,GACnB6jB,GAAmBxuB,KAMzB,GAAIwK,IAAO2d,EACT,OAAO2G,GACLlC,GACA,CACE4B,GAAmBxuB,KAMzB,GAAIwK,IAAO6G,GACT,OAAOyd,GACLhC,GACA,CACEe,GAAiBhW,EAAwB7V,EAAUA,KAKzD,IAAI0uB,EAAazD,GAEjBjsB,EAA+B,CAC7BwtB,GAAmB7jB,GACnB6jB,GAAmBvqB,GACnBuqB,GAAmBxuB,IA8DrB,OApDI6X,IAGEA,EAAKrW,OAASmvB,IACZnmB,IAAO+d,KACTmI,EAAa3D,IAGfrhB,EACE1K,EACAwtB,GAAqB3W,EAAwBlN,KAA8BA,OAGxE4lB,GAAa1Y,EAAwB7W,OAExC0K,EACE1K,EACAouB,GACE1B,GAAciB,GAAmB9W,EAAwB7W,KAAK4tB,IAAIW,KAClE9B,MAMCjjB,IAAO+d,IACdmI,EAAa1D,GACbthB,EACE1K,EACAwtB,GAAmB3W,EAAKgC,OAGnBrP,IAAOke,IAIV7Q,EAAKrW,OAASklB,KAChBhb,EAAW1K,EAAMlB,GACjB4L,EAAW1K,EAAMlB,GACjB4L,EACE1K,EACAouB,GACE1B,GAAc6B,GAAuB1X,GACrC4V,OASHqB,GAAiB4B,EAAY1vB,IAItCmrB,GAAcpC,IAAmB,SAAUta,GACzC,OAAOqf,GACL5B,GACA,CACEW,GAAiBpe,EAAKoI,KAAM7V,EAAUyN,EAAK6W,YAKjD6F,GAAc5T,IAAiB,SAAU9I,GAEvC,MAAMvM,EAASsrB,GAAmB/e,EAAK2D,MAEvC,OAAI6Q,EAAWiI,MAAkBjI,EAAWgI,IACnC6C,GACLtC,GACA,CACEtpB,IAKCA,GAGTipB,GAAcpH,IAAuB,SAAUtV,GAK7C,OAAIwU,EAAWiI,MAAkBjI,EAAWgI,IA9d9C,SAAkCpU,EAAsBhP,GACtD,OAAOimB,GACLtC,GACA,CACE8C,GAAoBzX,EAAMhP,KA2drB+nB,CACLnhB,EAAKoI,KACL+V,IAIG0B,GACL7f,EAAKoI,KACL+V,KAKJzB,GAAc5U,IAAe,SAAU9H,GACrC,OAlbF,SAASohB,EAAYphB,EAAmBqY,GAEtC,IAMAlG,EAEA1e,GARIiQ,SAAEA,EAAQmF,UAAEA,EAASnC,KAAEA,GAAS1G,EAEpCnG,EAAOgmB,GAAoB7f,EAAKoI,MAEhC8J,EAAMkO,GAA2B1c,EAAUmF,GAqB3C,GAfInC,EACFyL,EAAKzL,EAAK3U,OAASmmB,GACfkI,GAA2B1Z,EAAKhD,SAAUgD,EAAKmC,WAC/CuY,EAAY1a,EAAgB2R,GAGzBA,IACPlG,EAAKkO,GACHZ,GAAgB,CACdnc,UAAWgc,GACX3b,KAAM0d,OAKR1vB,EAAMugB,IAAQvgB,EAAMwgB,GAAK,CAE3B,MAAM8N,EAASzL,EAAWgI,IAsB1B,OApBIyD,IACEqB,EAAQpP,KACVA,EAAMmP,IAEJC,EAAQnP,KACVA,EAAKkP,KAKP5tB,EADE6tB,EAAQnP,GACDtY,EAAO0nB,GAAgBrP,EAEzBoP,EAAQpP,GACNsP,GAAgB3nB,EAAO0nB,GAAgBpP,EAGvCtY,EAAOmlB,GAAqB9M,EAAM+M,GAAkB9M,EAIxD8N,EACHL,GAAensB,GACfA,EAIN,OAAO4tB,GAyXAD,CAAYphB,EAAMA,EAAKqY,OAGhCqE,GAAc3U,IAAiB,SAAU/H,GAEvC,OAAOqf,GACLvB,GACA,CAEE6B,GACEK,GAAkBhgB,EAAK0D,SAAoB1D,EAAK6I,YAElDuV,GAAiBpe,EAAK0I,KAAMnW,GAC5ByN,EAAK2I,GAAKyV,GAAiBpe,EAAK2I,GAAIpW,GAAYlC,EAChD2P,EAAK4I,MAAQ0W,GAAiBjvB,EAC9B2P,EAAKrM,MAAQorB,GAAmB/e,EAAKrM,OAAStD,KAMpDqsB,GAAc1U,IAAoB,SAAUhI,GAE1C,OAAOqf,GACLzB,GACA,CACEmB,GAAmB/e,EAAK9E,MAExBykB,GACEK,GAAkBhgB,EAAK0D,SAAoB1D,EAAK6I,eAOxD6T,GAAc5C,IAAmB,SAAU9Z,GAEzC,OAAOqf,GACLxB,GACA,CACEkB,GAAmB/e,EAAK9E,SEnpB9B,MAAMumB,GAAiB,aCjBvB,IAAIC,GAAY,cAEhBC,GAAY,YAEZC,GAAc,SAAUC,GACtB,MAAM7hB,EAAQ8hB,EAA0BC,cAAcF,GACtD,GAAI7hB,EACF,OAAOA,GAIXgiB,GAAmB,SAAUhiB,EAAuCjO,EAAc2J,GAChFsE,EAAKgiB,iBAAiBjwB,EAAM2J,EAAU3I,IAGxCkvB,GAAsB,SAAUjiB,EAAuCjO,EAAc2J,GACnFsE,EAAKiiB,oBAAoBlwB,EAAM2J,EAAU3I,IAI3CmvB,GAAkB,SAAUliB,EAAmBmiB,GAC7CniB,EAAKoiB,UAAUC,IAAIF,IAGrBG,GAAqB,SAAUtiB,EAAmBmiB,GAChDniB,EAAKoiB,UAAUtuB,OAAOquB,IAGxBI,GAAc,SAAUjnB,EAAY0E,GAClC,OAAO1E,GAIP,GAAIwmB,IAGGA,EAAaU,gBAAgBJ,YAChCF,GAAkB,SAAUliB,EAAmBmiB,GAC7C,MAAMM,EAAUziB,EAAKmiB,UAAUprB,MAAM2rB,IAChCjnB,EAAUgnB,EAASN,KACtBlmB,EAAWwmB,EAASN,GACpBniB,EAAKmiB,UAAYxW,GAAW8W,EAASC,MAGzCJ,GAAqB,SAAUtiB,EAAmBmiB,GAChD,MAAMM,EAAUziB,EAAKmiB,UAAUprB,MAAM2rB,IACjCC,EAAaF,EAASN,KACxBniB,EAAKmiB,UAAYxW,GAAW8W,EAASC,QAQpCZ,EAAaE,kBAAkB,CAElC,MAAMY,EAAkB,iBAExBZ,GAAmB,SAAUhiB,EAAWjO,EAAc2J,GvCVnC,UuCWb3J,EACFiwB,GACEhiB,EACA4iB,EAEAlnB,EAASmnB,IAAW,SAAUvnB,GACxBA,EAAMwnB,eAAiBzL,KACzB/b,EAAQ,IAAIzJ,EAAYyJ,IAClBvJ,KvCnBG,QuCoBTmC,EAAQwH,EAAUzJ,KAAMqJ,MAKvBvJ,IAASgxB,GAAoBC,EAAahjB,GACjDgiB,GACEhiB,EACAijB,EACAvnB,EAASmnB,IAAW,SAAUvnB,IAC5BA,EAAQ,IAAIzJ,EAAYyJ,IAClBvJ,KAAOgxB,EACb7uB,EAAQwH,EAAUzJ,KAAMqJ,KAK5B0E,EAAKkjB,iBAAiBnxB,IAAQ2J,IAIlCumB,GAAsB,SAAUjiB,EAAWjO,EAAc2J,GvCzCtC,UuC0Cb3J,GACFkwB,GAAoBjiB,EAAM4iB,EAAiBlnB,EAASmnB,YAC7CnnB,EAASmnB,KAET9wB,IAASgxB,GAAoBC,EAAahjB,IACjDiiB,GAAoBjiB,EAAMijB,EAAiBvnB,EAASmnB,YAC7CnnB,EAASmnB,KAGhB7iB,EAAKmjB,iBAAiBpxB,IAAQ2J,IAIlC,MAAMsnB,EAAe,SAAUhjB,GAC7B,MAAwB,UAAjBA,EAAK2U,UACQ,UAAd3U,EAAKjO,MAAkC,aAAdiO,EAAKjO,OAGtC,MAAMqxB,EAQJtxB,YAAYwJ,EAAcoZ,GAExB2O,GAAcpxB,KAAMqJ,GAEpBrJ,KAAKqxB,cAAgB5O,EACrBziB,KAAK7B,OAASkL,EAAMioB,YAAc7O,EAClCziB,KAAKD,cAAgBsJ,EAIvBxJ,iBACEG,KAAKD,cAAcwxB,YAAczwB,EAGnCjB,kBACEG,KAAKD,cAAcyxB,aAAelxB,GAMtCmvB,GAAY,YAEZa,GAAc,SAAUjnB,EAAOoZ,GAC7B,OAAO,IAAI0O,EAAQ9nB,EAAOoZ,IAG5BkN,GAAc,SAAUC,GAEa,KAA/B7T,GAAc6T,EAAU,KAC1BA,EAAWvlB,GAAaulB,EAAU,IAKpC,MAAM7hB,EAAQ8hB,EAA0B4B,eAAe7B,GACvD,GAAI7hB,EACF,OAAOA,GAWnB,MAAM0iB,GAAkB,IAKxBG,GAAU,WAKVc,GAAc,aAcdC,GAAa,CACXC,IAAKC,8BAKPC,GAAmD,YAsCnCjgB,GAAcH,GAC5B,OAAQme,EAA0Bhe,cAAcH,GAGlD,SAAgBjD,GAAKV,EAAmB9E,EAAc3K,GACpD,GAAIoB,EAAMpB,GACRyzB,GAAWhkB,EAAM9E,EAAM3K,EAAOwC,OAE3B,CACH,MAAM2E,EAASusB,GAAWjkB,EAAM9E,GAChC,GAAIxD,EACF,OAAOA,EAAOnH,OAgBpB,SAAgB+P,GAAKN,EAAmB9E,EAAc3K,GACpD,GAAIoB,EAAMpB,GACRyP,EAAKkkB,aAAahpB,EAAM3K,OAErB,CAEH,MAAMA,EAAQyP,EAAKmkB,aAAajpB,GAChC,GAAI3K,GAASM,EACX,OAAON,YAaGqS,GAAOH,EAAkBzC,GACvCyC,EAAW2hB,YAAYpkB,GArFzB+jB,GAAcM,GAAmB,CAC/BvyB,GAAGkO,EAAuCtE,GACxC,IAAI4oB,EAASvxB,EACbwxB,GAAGvkB,EApBa,mBAoBYtE,EAA0B,iBAAI,WACxD4oB,EAAS/xB,IAEXgyB,GAAGvkB,EAlBW,iBAkBYtE,EAAwB,eAAI,SAAUJ,GAC9DgpB,EAASvxB,EACT2I,EAASJ,KAEX0mB,GAAiBhiB,EvC9JM,QuC8JiBtE,EAAwB,MAAI,SAAUJ,GACvEgpB,GACH5oB,EAASJ,MAIfxJ,IAAIkO,EAAuCtE,GACzCI,GAAIkE,EAlCY,mBAkCatE,EAA0B,kBACvDI,GAAIkE,EA9BU,iBA8BatE,EAAwB,gBACnDumB,GAAoBjiB,EvCvKG,QuCuKoBtE,EAAwB,OACnEA,EAA0B,iBAC1BA,EAAwB,eACxBA,EAAwB,MAAIrL,IAwFzB,MAAMm0B,GAAO5C,GA8BpB,SAAgBhe,GAAK5D,EAAe4D,EAAeJ,EAAmBC,GACpE,IAAI9R,EAAMiS,GAiBR,OAAO5D,EAAK2hB,IAfNne,GAAWS,GAAWjE,EAAM2jB,IAC9B3jB,EAAK2jB,IAAac,QAAU7gB,GAGxBH,IACDzD,EAA2BzP,MAAQqT,GAEtC5D,EAAK2hB,IAAa/d,GAYnB,MAAM8gB,GAAWxC,GAEXyC,GAAcrC,GAE3B,SAAgBiC,GAAGvkB,EAAuCjO,EAAc2J,GAEtE,MAAMkpB,EAAmB5kB,EAAK6iB,MAAa7iB,EAAK6iB,IAAW,IAAI/nB,IAE/D+pB,EAAkBD,EAAQC,kBAAoBD,EAAQC,gBAAkB,IAGxE,IAAKA,EAAgB9yB,GAAO,CAG1B,MAAM+yB,EAAUf,GAAchyB,GAG9BgzB,EAAiB,SAAUzpB,GAEzB,MAAM0pB,EAAc1pB,aAAiBzJ,EACjCyJ,EACA,IAAIzJ,EAAYyJ,EAAMvJ,KAAMwwB,GAAYjnB,EAAO0E,IAE/CglB,EAAYjzB,OAASA,IACvBizB,EAAYjzB,KAAOA,GAGrB6yB,EAAQK,KAAKlzB,EAAM,CAACizB,KAItBH,EAAgB9yB,GAAQgzB,EAEpBD,EACFA,EAAQP,GAAGvkB,EAAM+kB,GAGjB/C,GAAiBhiB,EAAMjO,EAAMgzB,GAKjCH,EAAQL,GAAGxyB,EAAM2J,GAGnB,SAAgBI,GAAIkE,EAAuCjO,EAAc2J,GAEvE,MAAMkpB,EAAmB5kB,EAAK6iB,KAE9B7nB,UAAEA,EAAS6pB,gBAAEA,GAAoBD,EAMjC,GAHAA,EAAQ9oB,IAAI/J,EAAM2J,GAGdmpB,IAAoBD,EAAQ5wB,IAAIjC,GAAO,CAEzC,MAAM+yB,EAAUf,GAAchyB,GAE9BgzB,EAAiBF,EAAgB9yB,GAE7B+yB,EACFA,EAAQhpB,IAAIkE,EAAM+kB,GAGlB9C,GAAoBjiB,EAAMjO,EAAMgzB,UAG3BF,EAAgB9yB,GAIrBgvB,GAAa/lB,KACfgF,EAAK6iB,IAAWxyB,gDAjNU+J,EAAakK,GACzC,OAAOA,EACFwd,EAA0BoD,gBAAgBtB,GAAWC,IAAKzpB,GAC1D0nB,EAA0Bzd,cAAcjK,wBAGpBuJ,GACzB,OAAQme,EAA0BqD,eAAexhB,wCAmBnD,SAA2B3D,EAAmB9E,EAAc0F,GAC1DojB,GACEhkB,EACA9E,EACA0F,IAAS4V,GACLzjB,EACAuC,EACJvC,gCAiBuBiN,EAAmB9E,GAC5C8E,EAAKolB,gBAAgBlqB,WAGvB,SAAuBuH,EAAkBzC,EAAYqlB,GACnD5iB,EAAWD,aAAaxC,EAAMqlB,sBAOhC,SAAwB5iB,EAAkBzC,EAAY6X,GACpDpV,EAAWgU,aAAazW,EAAM6X,oBAGTpV,EAAkBzC,GACvCyC,EAAW6iB,YAAYtlB,oBAGFA,GACrB,MAAMyC,WAAEA,GAAezC,EACvB,GAAIyC,EACF,OAAOA,iBAIUzC,GACnB,MAAMulB,YAAEA,GAAgBvlB,EACxB,GAAIulB,EACF,OAAOA,wBAMSvlB,GAClB,GAAsB,IAAlBA,EAAKwlB,SACP,OAAOnM,GAAcrZ,EAAqB2U,eAI9C,SAAqB3U,EAAY2D,EAAeH,EAAmBC,GACjE,IAAI9R,EAAMgS,GAiBR,OAAO3D,EAAK0hB,IAfNle,GAAWS,GAAWjE,EAAM2jB,IAC9B3jB,EAAK2jB,IAAac,QAAU9gB,GAGxBF,IACDzD,EAA2BzP,MAAQoT,GAEtC3D,EAAK0hB,IAAa/d,6EAgHM5R,EAAcuP,GAO5CyiB,GAAchyB,GAAQuP,KC1bxB,MAAqBmkB,GAWnB3zB,aAAa6E,EAAiB+uB,EAA6BnqB,GAEzD,IAMAoqB,EAEAC,EARIpuB,EAAQjF,EAEZszB,EAAOtzB,EAEPuzB,EAAiB,GA4BjB,GAtBIt0B,EAAQ+J,GACVoqB,EAASpqB,EAEF3C,EAAU2C,KACbwqB,EAAWxqB,EAAQ/D,SACrBA,EAAQ+D,EAAQ/D,OAEduuB,EAAWxqB,EAAQsqB,QACrBA,EAAOtqB,EAAQsqB,MAGbp0B,EAAS8J,EAAQuqB,QACnBA,EAAOzqB,GAAYE,EAAQuqB,OAEzBt0B,EAAQ+J,EAAQ1C,OAClB8sB,EAASpqB,EAAQ1C,KAEfrH,EAAQ+J,EAAQtC,OAClB2sB,EAASrqB,EAAQtC,MAIjB0sB,EACF,OAAO,IAAIF,GAAS9uB,EAASkvB,EAAMruB,EAAOsuB,EAAMJ,EAAUC,EAAQC,GA6BtE9zB,YACE6E,EACAkvB,EACAruB,EACAsuB,EACAJ,EACAC,EACAC,GAGA,MAAMxzB,EAAWH,KAEjBG,EAASuE,QAAUA,EACnBvE,EAASoF,MAAQA,EAEjBpF,EAAS0zB,KAAOA,EAEhB1zB,EAASd,QAAUo0B,EAASp0B,QAC5Bc,EAASszB,SAAWA,EACpBtzB,EAASuzB,OAASA,EAClBvzB,EAASwzB,OAASA,EAElBxzB,EAAS4zB,OAAS,GAElB5zB,EAAS6zB,QAAU,SAAU/wB,EAASC,EAAS+wB,GAI7C,MAAM7lB,EAAWjO,EAAS7B,MAC1B4P,EAAW/N,EAASyG,IAAItG,GAEpB4N,IAAaE,GACfqlB,EAASS,KAAKxvB,EAASwJ,EAAUE,IAKrCjO,EAASg0B,eAAiB,CACxBP,KAAAA,EACAI,QAAS7zB,EAAS6zB,UAGhB7zB,EAASi0B,OAASvF,GAAYgF,KAChCntB,EACEmtB,EACA,SAAUQ,GACRZ,EAASa,MACPD,EACAl0B,EAASg0B,kBAanBt0B,IAAI00B,GAEF,MAAMp0B,EAAWH,MAEjB0zB,OAAEA,EAAMr0B,QAAEA,GAAYc,EAGtB,GAAKA,EAASoF,OAKT,GAAIgvB,IAAUviB,GAAW7R,EAAUilB,GAGtC,GAAIjlB,EAASi0B,MACXj0B,EAAS7B,MAAQ2D,EAAQyxB,EAAQr0B,OAE9B,CAGHc,EAASiP,SAGT,MAAMolB,EAAehB,GAASiB,QAC9BjB,GAASiB,QAAUt0B,EAEnBA,EAAS7B,MAAQ2D,EAAQyxB,EAAQr0B,GAGjCc,EAASgP,OAETqkB,GAASiB,QAAUD,QAxBrBr0B,EAAS7B,MAAQ2D,EAAQyxB,EAAQr0B,GA6BnC,OAAOc,EAAS7B,MAGlBuB,IAAIvB,GACF,MAAMq1B,OAAEA,EAAMt0B,QAAEA,GAAYW,KACxB2zB,GACFA,EAAOh0B,KAAKN,EAASf,GAWzBuB,IAAIw0B,GACFr0B,KAAK+zB,OAAOM,GAAO/zB,EAMrBT,OAEE,MAAMk0B,OAAEA,EAAMF,KAAEA,EAAIJ,SAAEA,EAAQU,eAAEA,GAAmBn0B,KAEnDmK,GACE4pB,EACA,SAAU7tB,EAAQmuB,GAChBrqB,EAAW6pB,EAAMQ,GACjBZ,EAASa,MACPD,EACAF,KAONn0B,KAAK+zB,OAAS,GAOhBl0B,SAEE,MAAMg0B,KAAEA,EAAIJ,SAAEA,EAAQO,QAAEA,GAAYh0B,KAEpC0G,EACEmtB,EACA,SAAUQ,GACRZ,EAASiB,QAAQL,EAAKL,IAExB1zB,GAGFuzB,EAAKjzB,OAAS,eCtPO+zB,EAAkBjwB,GAEzC,IAAIlD,EAgBJ,OAdAkF,EACEiuB,EACA,SAAUhwB,GACR,MAAM/D,EAASg0B,GAAkBlwB,EAASC,GAC1C,GAAI/D,GAAU,EAKZ,OAJAY,EAAS,CACPyH,KAAMtE,EACN8J,KAAMpE,GAAa3F,EAAS9D,IAEvBE,IAKNU,cC1BgB+lB,EAAa7iB,GAEpC,GAAI6iB,GAAU3oB,GAAY8F,IAAYrB,EACpC,OAAOkkB,EAGT,MAAM/lB,EAASwwB,GAAWzK,EAAQ7iB,GAClC,OAAIlD,EACKA,EAAOlD,WADhB,WCFsBu2B,GACtBnwB,EACAwJ,EACAE,EACA0mB,EACAp0B,GAGA,MAAMwzB,EAAO,SAAUa,EAAoBC,EAAkBC,GAE3D,GAAID,IAAgBC,EAAa,CAE/B,MAAMC,EAAa7e,GAAiB3R,EAASqwB,GAE7CruB,EACEouB,EACA,SAAUK,GACJz1B,EAAM01B,GAAuBF,EAAYC,KAC3Cz0B,EACEy0B,EAAcD,EAAYF,EAAaC,KAM/CJ,GAAcK,EAAYF,EAAaC,EAAaH,EAAoBp0B,eCtB5EwN,EACAE,EACA1N,GAGA,MAAM20B,EAAcnxB,EAAUgK,GAE9BonB,EAAcpxB,EAAUkK,GAExB,GAAIinB,GAAeC,EAMjB,OALA50B,EACE60B,EACAF,EAAcnnB,EAAStN,OAASxC,EAChCk3B,EAAclnB,EAASxN,OAASxC,GAE3BkC,GDaTk1B,CAAWtnB,EAAUE,EAAU8lB,aE5B/BhmB,EACAE,EACA1N,GAGA,MAAM+0B,EAAaj2B,EAAS0O,GAE5BwnB,EAAal2B,EAAS4O,GAEtB,GAAIqnB,GAAcC,EAAY,CAE5B,MAAMC,EAAYF,EAAavnB,EAAStN,OAASxC,EAEjDw3B,EAAYF,EAAatnB,EAASxN,OAASxC,EAE3CsC,EACE60B,EACAI,EACAC,GAGF,IAAK,IAAI/0B,EAAI,EAAGD,EAASi1B,KAAKjsB,IAAI+rB,GAAa,EAAGC,GAAa,GAAI/0B,EAAID,EAAQC,IAC7EH,EACE,GAAKG,EACLqN,EAAWA,EAASrN,GAAKzC,EACzBgQ,EAAWA,EAASvN,GAAKzC,GAI7B,OAAOkC,GFAJw1B,CAAU5nB,EAAUE,EAAU8lB,aG5BnChmB,EACAE,EACA1N,GAGA,MAAMq1B,EAAcpvB,EAAUuH,GAE9B8nB,EAAcrvB,EAAUyH,IAEpB2nB,GAAeC,KAEjB9nB,EAAW6nB,EAAc7nB,EAAWC,EACpCC,EAAW4nB,EAAc5nB,EAAWD,EAEhC4nB,GACF5rB,GACE+D,EACA,SAAU5P,EAAYiE,GAChBjE,IAAU8P,EAAS7L,IACrB7B,EAAS6B,EAAKjE,EAAO8P,EAAS7L,MAMlCyzB,GACF7rB,GACEiE,EACA,SAAU9P,EAAYiE,GAChBjE,IAAU4P,EAAS3L,IACrB7B,EAAS6B,EAAK2L,EAAS3L,GAAMjE,MHDlC23B,CAAW/nB,EAAUE,EAAU8lB,eI/BpCxvB,EACAwJ,EACAE,EACA4lB,EAAiBkC,EACjBx1B,GAGA,IAAIy1B,EAGJhsB,GACE6pB,EACA,SAAU9tB,EAAGkwB,GAGX,GAAIC,GAAoBD,GAwBtB,YAjBI12B,EAAM01B,GAAuB1wB,EAAS0xB,IACxC11B,EACE01B,EAAc1xB,EAASwJ,EAAUE,GAG5B8nB,IACHC,EACFnsB,EACEmsB,EACAC,GAIFD,EAAgB,CAACC,KASvB,MAAMx1B,EAASg0B,GAAkBwB,EAAc1xB,GAC/C,GAAI9D,GAAU,EAAG,CAEf,MAAMm0B,EAAa1qB,GAAa+rB,EAAcx1B,GAC9Co0B,EAAcsB,GAAUpoB,EAAU6mB,GAClCE,EAAcqB,GAAUloB,EAAU2mB,GAE9BC,IAAgBC,GAClBv0B,EACE01B,EAAcA,EAAcpB,EAAaC,MAY/CkB,GACFtB,GAAcnwB,EAASwJ,EAAUE,EAAU+nB,EAAez1B,eClErCwF,EAAW5G,EAAoBgK,GAEtD,GAAIA,EAAQitB,OAASj3B,EASnB,OAHAgK,EAAQitB,QAGDj3B,EAAK,KAAOA,EAAK,GCX5B,MAAMk3B,GAAgC,CACpCxC,QAASnsB,eAQcyB,EAA0CmtB,GAEjE,OAAIl3B,EAAQ+J,IACVktB,GAAcxC,QAAU1qB,EACxBktB,GAAcC,UAAYA,IAAcn2B,EACjCk2B,IAGLltB,GAAYA,EAA2B0qB,QAClC1qB,OADT,ECyBF,MAAqBotB,GAoBnB72B,YAAY+O,EAAavP,GAENW,KAER4O,KAAOA,GAAQ,GAFP5O,KAGRX,QAAUA,GAHFW,KAAAA,KAIR+S,SAAW,IAAI5H,GAJPnL,KAMR22B,YAAc,IAAI9tB,GANV7I,KAOR42B,aAAe,IAAI/tB,GAPX7I,KAQR62B,aAAe,GAY1Bh3B,IACE6E,EACAwC,EACAklB,GAGA,MAEA0K,EAAkBtD,GAASiB,SAE3B7lB,KAAEA,EAAImoB,SAAEA,EAAQC,qBAAEA,GAJDh3B,KAOjB,GAAI0E,IAAYrB,EACd,OAAOuL,EAST,IAAIpN,EAA4BrD,EAEhC,GANI24B,IAAoB1K,GACtB0K,EAAgB1G,IAAI1rB,GAKlBqyB,EAAU,CAEZ,GADA54B,EAAS44B,EAASryB,GAEhB,OAAOvG,EAAOyI,MAEhB,GAAIowB,EAAsB,CACxB,MAAMvyB,EAAQwyB,GAAUD,EAAsBtyB,GAC1CD,GAASA,EAAMgK,OACjBjN,EAASwwB,GACP+E,EAAStyB,EAAMwE,MAAMrC,MACrBnC,EAAMgK,QAUd,OAJKjN,IACHA,EAASwwB,GAAWpjB,EAAMlK,IAGrBlD,EAASA,EAAOlD,MAAQ4I,EAUjCrH,IACE6E,EACApG,GAGA,MAAM6B,EAAWH,MAEjB4O,KAAEA,EAAImoB,SAAEA,EAAQC,qBAAEA,GAAyB72B,EAE3C+2B,EAAW,SAAUhpB,EAAexJ,GAElC,MAAM0J,EAAWjO,EAASyG,IAAIlC,GAC9B,GAAIwJ,IAAaE,EACf,OAGF,IAAIjQ,EAEJ,GAAI44B,KACF54B,EAAS44B,EAASryB,KAEhBvG,EAAO6I,IAAIkH,GAET8oB,GAAsB,CACxB,MAAMvyB,EAAQwyB,GAAUD,EAAsBtyB,GAC9C,GAAID,GAASA,EAAMgK,OACjBtQ,EAAS44B,EAAStyB,EAAMwE,OACZ,CACV,MAAMkuB,EAAch5B,EAAOyI,MACvBD,EAAUwwB,IACZpF,GAAWoF,EAAa1yB,EAAMgK,KAAMP,IAOzC/P,GACH4zB,GAAWnjB,EAAMlK,EAASwJ,GAG5B/N,EAAS+zB,KAAKxvB,EAASwJ,EAAUE,IAI/BlK,EAAUQ,GACZwyB,EAAS54B,EAAOoG,GAETiC,EAAUjC,IACjByF,GAAYzF,EAAiBwyB,GAYjCr3B,KACE6E,EACAwJ,EACAE,GAGA,MAAMjO,EAAWH,MAEjB22B,YAAEA,EAAWC,aAAEA,EAAYC,aAAEA,GAAiB12B,EAO9C+1B,EAAyC,KAA3Bna,GAAcrX,GAE5B0yB,GACE1yB,EAASwJ,EAAUE,EACnBuoB,EAAY5tB,UAAWmtB,EACvB,SAAUE,EAAsB1xB,EAAiBwJ,EAAeE,GAC9DuoB,EAAY3D,KAAKoD,EAAc,CAACloB,EAAUE,EAAU1J,MAgBxD0yB,GACE1yB,EAASwJ,EAAUE,EACnBwoB,EAAa7tB,UAAWmtB,EACxB,SAAUE,EAAsB1xB,EAAiBwJ,EAAeE,GAE9D1H,EACEkwB,EAAa7tB,UAAUqtB,GACvB,SAAUp1B,GACPA,EAAKu1B,UAIV,MAAMc,SAAEA,GAAaR,EAAanyB,KAAamyB,EAAanyB,GAAW,CAAEpG,MAAO8P,EAAUipB,SAAU,KAC/F7tB,EAAU6tB,EAAUjB,IACvBpsB,EAAWqtB,EAAUjB,GAGlBj2B,EAASm3B,UACZn3B,EAASm3B,QAAUh3B,EACnBH,EAAS4S,SAASpC,OAChB,WACMxQ,EAASm3B,UACXn3B,EAASm3B,QAAUl5B,EACnB+B,EAASo3B,kBAavB13B,YAEE,MAAMM,EAAWH,MAEjB42B,aAAEA,EAAYC,aAAEA,GAAiB12B,EAEjCA,EAAS02B,aAAe,GAExB1sB,GACE0sB,EACA,SAAUW,EAAqB9yB,GAE7B,MAAMpF,EAAO,CAACa,EAASyG,IAAIlC,GAAU8yB,EAAOl5B,MAAOoG,GAKnDgC,EACE8wB,EAAOH,SACP,SAAUjB,GACRQ,EAAa5D,KAAKoD,EAAc92B,EAAMm4B,QAehD53B,YACE6E,EACA4E,GAGA,MAAMnJ,EAAWH,KAEjB+2B,EAAWvD,GAASkE,MAAMhzB,EAASvE,EAAUmJ,GAE7C,GAAIytB,EASF,OAPK52B,EAAS42B,WACZ52B,EAAS42B,SAAW,IAGtB52B,EAAS42B,SAASryB,GAAWqyB,EAC7B52B,EAAS62B,qBAAuBW,GAAYx3B,EAAS42B,SAAUz2B,GAExDy2B,EAWXl3B,eACE6E,GAGA,MAAMvE,EAAWH,MAEjB+2B,SAAEA,GAAa52B,EAEX42B,GAAY/kB,GAAW+kB,EAAUryB,YAC5BqyB,EAASryB,GAChBvE,EAAS62B,qBAAuBW,GAAYZ,EAAUz2B,IAY1DT,MACE6E,EACAsvB,EACAyC,GAGA,MAAMt2B,EAAWH,MAEjBX,QAAEA,EAAOs3B,YAAEA,EAAWC,aAAEA,GAAiBz2B,EAEzCgP,EAAO,SAAUzK,EAAiB4E,GAEhC,MAAMqpB,EAAUrpB,EAAQsqB,KAAO+C,EAAcC,EAG7CntB,EAA2B,CACzBrK,GAAIkK,EAAQ0qB,QACZtqB,IAAKrK,EACLk3B,MAAO,GAGLjtB,EAAQ4F,OACVzF,EAASG,IAAM,GAGjB+oB,EAAQL,GAAG5tB,EAAS+E,GAEhBH,EAAQmtB,WACVx0B,EACEqH,EAAQ0qB,QACR30B,EACA,CACEc,EAASyG,IAAIlC,GACbtG,EACAsG,KAOJR,EAAUQ,GACZyK,EACEzK,EACAkzB,GAAqB5D,EAASyC,IAKlCtsB,GACEzF,EACA,SAAU4E,EAAmC5E,GAC3CyK,EAAKzK,EAASkzB,GAAqBtuB,MAYzCzJ,QACE6E,EACAsvB,GAEAh0B,KAAK22B,YAAY9sB,IAAInF,EAASsvB,GAC9Bh0B,KAAK42B,aAAa/sB,IAAInF,EAASsvB,GAWjCn0B,OAAO6E,GACL,MAAMpG,GAAS0B,KAAK4G,IAAIlC,GAExB,OADA1E,KAAKgH,IAAItC,EAASpG,GACXA,EAYTuB,SAAS6E,EAAiBoX,EAAelS,GACvC,MAAMtL,EAAQomB,GAAS1kB,KAAK4G,IAAIlC,GAAU,IAAMoX,GAAQ,GACxD,IAAKtY,EAAUoG,IAAQtL,GAAUsL,EAE/B,OADA5J,KAAKgH,IAAItC,EAASpG,GACXA,EAaXuB,SAAS6E,EAAiBoX,EAAe+b,GACvC,MAAMv5B,EAAQomB,GAAS1kB,KAAK4G,IAAIlC,GAAU,IAAMoX,GAAQ,GACxD,IAAKtY,EAAUq0B,IAAQv5B,GAAUu5B,EAE/B,OADA73B,KAAKgH,IAAItC,EAASpG,GACXA,EAWXuB,OAAO6E,EAAiB1D,EAAWU,GAEjC,IAAImD,EAAO7E,KAAK4G,IAAIlC,GACpBG,EAAQrF,EAASqF,GAAauE,GAAYvE,GAAjB,GAEzB,MAAMjE,OAAEA,GAAWiE,EACnB,GAAInD,IAAUpB,GAAYoB,IAAUd,EAClCiE,EAAKxD,KAAKL,QAEP,GAAIU,IAAUZ,GAAuB,IAAVY,EAC9BmD,EAAK3D,QAAQF,OAEV,CAAA,KAAIU,EAAQ,GAAKA,EAAQd,GAI5B,OAHAiE,EAAK/C,OAAOJ,EAAO,EAAGV,GAQxB,OAFAhB,KAAKgH,IAAItC,EAASG,GAEXvE,EAUTT,OAAO6E,EAAiB1D,GACtB,OAAOhB,KAAK83B,OAAOpzB,EAAS1D,EAAMV,GASpCT,QAAQ6E,EAAiB1D,GACvB,OAAOhB,KAAK83B,OAAOpzB,EAAS1D,EAAMF,GASpCjB,SAAS6E,EAAiBhD,GACxB,IAAImD,EAAO7E,KAAK4G,IAAIlC,GACpB,GAAIlF,EAASqF,IACRnD,GAAS,GACTA,EAAQmD,EAAKjE,OAKhB,OAHAiE,EAAOuE,GAAYvE,IACd/C,OAAOJ,EAAO,GACnB1B,KAAKgH,IAAItC,EAASG,GACXvE,EAUXT,OAAO6E,EAAiB1D,GACtB,IAAI6D,EAAO7E,KAAK4G,IAAIlC,GACpB,GAAIlF,EAASqF,IAEP6rB,EADJ7rB,EAAOuE,GAAYvE,GACI7D,GAErB,OADAhB,KAAKgH,IAAItC,EAASG,GACXvE,EAWbT,KAAQ+O,EAASnI,GACf,OAAO2C,GAAYwF,EAAMnI,GAM3B5G,UACmBG,KACR22B,YAAY9sB,MADJ7J,KAER42B,aAAa/sB,MAFL7J,KAGR+S,SAAS9M,QAClB8xB,GAJiB/3B,mBClkBIZ,EAAc44B,EAAevB,GAEpD,IAAIwB,EAEJ,OAAO,WAEL,IAAKA,EAAO,CAEV,MAAM34B,EAAO44B,GAAcC,WACvB1B,GACFx0B,EAAQ7C,EAAIhB,EAAekB,GAG7B24B,EAAQhtB,WACN,WACEgtB,EAAQ75B,EACHq4B,GACHx0B,EAAQ7C,EAAIhB,EAAekB,IAG/B04B,yCChBajqB,EAAkCkB,EAAsBpB,GAE3E,IAAI5E,KAAEA,EAAImvB,QAAEA,GAAYnpB,GAAW8X,KAAEA,GAASlZ,EAE9C,GAAKuqB,EAAL,CAIA,GAAIrR,EAAM,CAER,MAAMzoB,EAAQyoB,EAAK9d,IAAS8d,EAAK1jB,GAE7B/E,IAAUgC,EACZ2I,EAAO6nB,EAEAxyB,EAAQ,IACf85B,EAAUC,GACRD,EACA95B,EAGA2K,IAAS+nB,GAAmB/nB,IAASqvB,IAMvCzqB,EAAM4B,aAEP1B,EAAsBukB,GAAGrpB,EAAMmvB,GAChCvqB,EAAMe,KAAKK,EAAU1M,KAAO,WACzBwL,EAAsBlE,IAAIZ,EAAMmvB,MAMnCG,GAAUxqB,EAAqB9E,EAAMmvB,GACrCvqB,EAAMe,KAAKK,EAAU1M,KAAO,WAC1Bi2B,GAAWzqB,EAAqB9E,EAAMmvB,cAO5C,SAAuBrqB,EAAkCkB,EAAsBpB,GAC7E5L,EAAQ4L,EAAMe,KAAKK,EAAU1M,SC9B/B,SAASk2B,GAAiBr5B,EAAc2nB,GAEtC,OAAOA,GAAQA,IAASzmB,EACpB+3B,GAASj5B,EAAI2nB,GACb3nB,EAGN,MAAMs5B,GAA8B,CAClC74B,IAAIkO,EAAwBzP,GAC1ByP,EAAKzP,MAAQ6I,GAAS7I,IAExBuB,KAAKkO,EAAwBrJ,EAAiBrF,GAC5CA,EAAQ2H,IAAItC,EAASqJ,EAAKzP,QAE5B2K,KAAMmc,GAyCRuT,GAA+B,CAC7B94B,IAAIkO,EAAyBzP,GAC3BoI,EACEwxB,GAAcnqB,EAAKzE,SACnByE,EAAK6qB,SACD,SAAUC,GACVA,EAAOC,SAAWtvB,EAAUlL,EAAOu6B,EAAOv6B,MAAOwC,IAEjD,SAAU+3B,EAA2Bn3B,GACrC,GAAIm3B,EAAOv6B,OAASA,EAElB,OADAyP,EAAKgrB,cAAgBr3B,EACdZ,KAKjBjB,KAAKkO,EAAyBrJ,EAAiBrF,GAC7C,MAAMiK,QAAEA,GAAYyE,EACpB,GAAIA,EAAK6qB,SAAU,CACjB,MAAM9a,EAAmB,GACzBpX,EACEwxB,GAAc5uB,GACd,SAAUuvB,GACJA,EAAOC,UACT9uB,EACE8T,EACA+a,EAAOv6B,SAKfe,EAAQ2H,IAAItC,EAASoZ,QAGrBze,EAAQ2H,IACNtC,EACA4E,EAAQyE,EAAKgrB,eAAez6B,QAIlC2K,KAAMmc,GAGR4T,GAAa,CACXC,MAlF4B,CAC5Bp5B,IAAIkO,EAAwBzP,GAC1ByP,EAAKmrB,QAAUnrB,EAAKzP,QAAU6I,GAAS7I,IAEzCuB,KAAKkO,EAAwBrJ,EAAiBrF,GACxC0O,EAAKmrB,SACP75B,EAAQ2H,IAAItC,EAASqJ,EAAKzP,QAG9B2K,KAAM,WA0ENkwB,SAvE+B,CAC/Bt5B,IAAIkO,EAAwBzP,GAC1ByP,EAAKmrB,QAAU15B,EAASlB,GACpBkL,EAAUlL,EAAOyP,EAAKzP,MAAOwC,KAC3BxC,GAERuB,KAAKkO,EAAwBrJ,EAAiBrF,GAC5C,MAAMf,EAAQe,EAAQuH,IAAIlC,GACtBlF,EAASlB,GACPyP,EAAKmrB,QACP75B,EAAQsR,OAAOjM,EAASqJ,EAAKzP,OAG7Be,EAAQ+5B,SACN10B,EACAqhB,EAAcznB,EAAOyP,EAAKzP,MAAOwC,IAKrCzB,EAAQ2H,IAAItC,EAASqJ,EAAKmrB,UAG9BjwB,KAAM,YAmDKiG,GAAO5O,qCAEpB,SAAqByN,EAAkCkB,EAAsBpB,GAE3E,IAMA7G,EAEA4sB,EAEAxkB,GAVI/P,QAAEA,EAAO0nB,KAAEA,EAAItX,YAAEA,GAAgB5B,EAErCwrB,EAAcpqB,EAAU2V,QAExB0U,EAAYvS,IAASA,EAAKpX,KAA2BoX,EAAK1jB,IAQ1D,GAAIoM,EAAa,CAEf,IAAImD,EAAY7E,EAEhBwrB,EAAc3mB,EAAUhD,OAExB5I,EAAM,SAAUkH,GACVlH,GACF4L,EAAU5L,IAAIuyB,EAAarrB,IAI/B0lB,EAAO6E,GACL,SAAUvqB,GACR7O,EAAQ2H,IAAIqyB,EAAanrB,IAE3BorB,GAGFlqB,EAAS,WACPwD,EAAU8hB,QAAQ6E,EAAa3F,IAGjChhB,EAAU0hB,MAAMiF,EAAa3F,OAG1B,CAEH,IAAInR,EAAU1U,EAEdyrB,EAAwB,WAAd3rB,EAAM1F,IACZwwB,GACAD,GAGJe,EAAY3I,EAEZ,GAAI0I,IAAYd,GAAc,CAC5B,MAAM54B,EAAQiO,EAA0BjO,KACpCk5B,GAAWl5B,GACb05B,EAAUR,GAAWl5B,GAKdw5B,IAAch5B,IACrBm5B,EAAYrH,GAIhBprB,EAAM,SAAUkH,GACVlH,GACFwyB,EAAQxyB,IAAIyb,EAASvU,IAIzB0lB,EAAO6E,GACL,WACEe,EAAQ5F,KAAKnR,EAAS4W,EAAah6B,IAErCi6B,GAGFlqB,EAAS,WACPopB,GAAW/V,EAASgX,EAAW7F,IAGjC2E,GAAU9V,EAASgX,EAAW7F,GAE9B4F,EAAQxyB,IAAIyb,EAASxT,EAAU3Q,OAKjCe,EAAQi1B,MAAM+E,EAAaryB,GAE3B6G,EAAMe,KAAKK,EAAU1M,KAAO,WAC1BlD,EAAQq1B,QAAQ2E,EAAaryB,GAC7BA,EAAM5I,EACNgR,aAKJ,SAAuBrB,EAAkCkB,EAAsBpB,GAC7E5L,EAAQ4L,EAAMe,KAAKK,EAAU1M,SC5NxB,MAAM2M,GAAO5O,qCAEpB,SAAqByN,EAAkCkB,EAAsBpB,GAI3E,IAAI+W,EAAU3V,EAAU2V,QAGxB1f,EAAUmxB,GAAoBzR,GAE9BoP,EAA0B,SAAU9lB,EAAehI,EAAQxB,GAEzD,GAAIsvB,EAAS,CACX,MAAM/qB,EAAO/D,EACTkwB,GAAuB1wB,EAASkgB,GAChC3V,EAAUhG,KAEd,GAAI4E,EAAM4B,YAAa,CACrB,MAAMmD,EAAY7E,EAClB6E,EAAU8mB,UAAUzwB,EAAMiF,GAC1B0E,EAAU5L,IAAIiC,EAAMiF,OAEjB,CACH,MAAMuU,EAAU1U,EACZrO,EAAMuP,EAAUN,MAClBgrB,GAAYlX,EAASxZ,EAAMiF,GAG3B0rB,GAAYnX,EAASxZ,EAAMiF,MAOnCL,EAAMxO,QAAQi1B,MAAM1P,EAASoP,GAE7BnmB,EAAMe,KAAKK,EAAU1M,KAAO,WAC1BsL,EAAMxO,QAAQq1B,QAAQ9P,EAASoP,GAC/BA,EAAU51B,WAKd,SAAuB2P,EAAkCkB,EAAsBpB,GAC7E5L,EAAQ4L,EAAMe,KAAKK,EAAU1M,SCG/B,MAAMs3B,GAAmB,GAEzBC,GAAoB,GAEpBC,GAAmB,GAEnBC,GAAiB,GAEjBC,GAAgB,GAEhBC,GAAe,GAEfC,GAAoB,KAEpBC,GAAkB,gBAElB,MAAqBC,GAgLnBx6B,YAAYyJ,GAEV,MAAMnJ,EAAWH,KAAMs6B,EAAuBhxB,GAAW6E,EAKzDhO,EAASo6B,SAAW,IAAI1xB,GAAQvI,GAE5Bg6B,EAASE,QACXr6B,EAASmyB,GAAGgI,EAASE,QAMjBF,EAASxpB,SACX3Q,EAASs6B,QAAUH,EAASxpB,QAI9B7O,EAAQq4B,EAASI,IAA4Bv6B,EAAUm6B,GAEvDn6B,EAAS6yB,KAAK0H,GAA4BC,GAAuBL,GAInE,IAAI1rB,KACFA,EAAIW,MACJA,EAAK1B,MACLA,EAAK+sB,UACLA,EAAS7D,SACTA,EAAQ8D,QACRA,EAAOC,SACPA,EAAQC,WACRA,GACET,EAEJn6B,EAASm6B,SAAWA,EAEhBS,GACF3J,GAAcjxB,EAAU46B,GAI1B,MAAMxT,EAAShY,EAAQnG,GAAYmG,GAAS,GAEtCqrB,GACFzwB,GACEywB,EACA,SAAUI,EAAgBz4B,GACxB,IAAIjE,EAAQipB,EAAOhlB,GAIf8sB,EAAQ/wB,IAENoB,EADJpB,EAAQ08B,EAAK18B,SAEXipB,EAAOhlB,GAAOy4B,EAAKl7B,OAASvB,EACxBD,EACAiB,EAAQjB,GACLA,IACDA,KAUlB,MAAMm1B,EAAWtzB,EAAS2S,UAAY,IAAI4jB,GAASnP,EAAQpnB,GAEvD42B,GACF5sB,GACE4sB,EACA,SAAUztB,EAA2C5E,GACnD+uB,EAASwH,YAAYv2B,EAAS4E,KAYpC,MAAMnD,EAAS5G,EAAQqP,GAAQ3M,EAAQ2M,EAAMzO,EAAUmJ,GAAWsF,EAC9DjI,EAAUR,IACZgE,GACEhE,EACA,SAAU7H,EAAOiE,GAMfglB,EAAOhlB,GAAOjE,IAKhBu8B,GACF1wB,GACE0wB,EACA,SAAUK,EAAkBjyB,GAM1B9I,EAAS8I,GAAQiyB,IAKvB,CAEE,IAAIC,EAA2B/8B,GAE/Bg9B,GACEA,EAAEC,KACFA,EAAI3rB,MACJA,EAAKrQ,QACLA,EAAO2D,QACPA,EAAOs4B,SACPA,EAAQC,YACRA,EAAWC,WACXA,EAAU3sB,WACVA,EAAU4sB,SACVA,EAAQC,QACRA,EAAOlsB,MACPA,GACE8qB,EA2BJ,GAzBI5qB,IACFvP,EAASyP,OAASF,GAIhBF,GACF4hB,GAAc7J,EAAQ/X,GAIpBtL,EAAUo3B,IAERlB,GAAgBxyB,KAAK0zB,KACvBH,EAAcQ,GAAYL,MAExBA,EAAWM,GAAYT,GACvBA,EAAc/8B,GAShBg9B,EAAI,CAEN,GAAIl3B,EAAUk3B,GAAK,CACjB,MAAMxL,EAAWwL,EACbhB,GAAgBxyB,KAAKgoB,KACvBuL,EAAcQ,GAAY/L,SAY5BuL,EAAcC,EAGXp4B,GACH64B,GACEV,EACAA,EAAcW,GAAqBz4B,IAyBzC,GAlBIg4B,IACFl7B,EAAS47B,MAAQV,GAIfh8B,IACFc,EAAS67B,SAAW38B,GAGtB48B,GAAmB97B,EAAUsmB,EAAoB8U,GACjDU,GAAmB97B,EAAUgS,EAAmBqpB,GAChDS,GAAmB97B,EAAU+7B,EAAmBrtB,GAChDotB,GAAmB97B,EAAUg8B,EAAiBV,GAC9CQ,GAAmB97B,EAAUi8B,EAAgBV,GAKzCJ,EAAU,CAGZ,MAAMe,EAAcvB,EAChB1xB,GAAY0xB,GACZ,GAuDJ,OArDAuB,EAAYlC,IAAqB,CAE/BvG,KAAMtzB,EACN0zB,QAAS,SAAUnmB,GACjB1N,EAASwN,OAAOE,EAAO1N,EAASmT,UAKpCmgB,EAASwH,YACPd,GACA,CAEEvG,KAAM9yB,EACN8F,IAAK,WACH,OAAOzG,EAASm8B,YAKtBC,GAAgBp8B,EAAUk8B,GAO1Bl8B,EAASq8B,UAAYt4B,EAAUo3B,GAC3BjB,GAAI/e,QAAQggB,GACZA,EAECztB,IAQHA,E/BkEV,SAAuBD,EAAcG,EAAY1O,EAAuBqF,GACtE,MAAO,CACLyD,IAAKyF,EAAIzF,IAAI4F,GACba,KAAMsC,KACNnD,KAAAA,EACA1O,QAAAA,EACAqF,QAAAA,G+BxEc+3B,CACNC,GACAvB,EACAh7B,EACAkD,SAKJlD,EAASwN,OACPxN,EAASyG,IAAIuzB,IACbtsB,IAcN0uB,GAAgBp8B,EAAU26B,GAhZrBj7B,WAAW88B,GAChBA,EAAOC,QAAQvC,IAMVx6B,cAAcyJ,GACnB,OAAOA,EAMFzJ,gBAAgB0L,EAAgBlM,GACrC8L,GAASD,SAASyF,OAAOpF,EAAMlM,GAM1BQ,eAAey7B,EAAkBhR,GAGpC,IAAK4P,GAAaoB,GAAW,CAC3B,MAAM5iB,EAAQmkB,GAAyBvB,GAMvCpB,GAAaoB,InBohBIvtB,EmBphBmC2K,EAAM,GnBshB3DuT,KACHA,eACEvS,GAAW,CACTgR,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACCoC,QACAlC,MAGAC,GAAaxB,GAAc1c,EAAKjO,MAAMiO,GAAQ,KmB/iBjD,OADAutB,EAAWpB,GAAaoB,GACjBhR,EACHgR,EACA,IAAIzd,mBAAmByd,IAAvB,OnB+gBevtB,EmBrgBhBlO,iBACLoJ,EACAgG,GAGE,GAAI/K,EAAU+E,KAAUgG,EACtB,OAAO6tB,GAAYjD,GAAkB5wB,GAEvC8zB,GAAYlD,GAAkB5wB,EAAMgG,GAOjCpP,kBACLoJ,EACAoK,GAGE,GAAInP,EAAU+E,KAAUoK,EACtB,OAAOypB,GAAYhD,GAAmB7wB,GAExC8zB,GAAYjD,GAAmB7wB,EAAMoK,GAOlCxT,iBACLoJ,EACA2J,GAGE,GAAI1O,EAAU+E,KAAU2J,EACtB,OAAOkqB,GAAY/C,GAAkB9wB,GAEvC8zB,GAAYhD,GAAkB9wB,EAAM2J,GAOjC/S,eACLoJ,EACAgc,GAGE,GAAI/gB,EAAU+E,KAAUgc,EACtB,OAAO6X,GAAY9C,GAAgB/wB,GAErC8zB,GAAY/C,GAAgB/wB,EAAMgc,EAASoV,GAAI/e,SAO5Czb,cACLoJ,EACAD,GAGE,GAAI9E,EAAU+E,KAAUD,EACtB,OAAO8zB,GAAY7C,GAAehxB,GAEpC8zB,GAAY9C,GAAehxB,EAAMD,GAqSrCnJ,YACE6E,EACAqyB,GAEA,OAAO/2B,KAAK8S,UAAUmoB,YAAYv2B,EAASqyB,GAM7Cl3B,eACE6E,GAEA1E,KAAK8S,UAAUkqB,eAAet4B,GAMhC7E,IACE6E,EACAwC,EACAklB,GAEA,OAAOpsB,KAAK8S,UAAUlM,IAAIlC,EAASwC,EAAcklB,GAMnDvsB,IACE6E,EACApG,GAIA,MAAMwU,UAAEA,GAAc9S,KAClB8S,GACFA,EAAU9L,IAAItC,EAASpG,GAO3BuB,GACEC,EACA2J,GAEA,OAAOwzB,GAAUj9B,KAAMF,EAAM2J,GAM/B5J,KACEC,EACA2J,GAEA,OAAOwzB,GAAUj9B,KAAMF,EAAM2J,EAAUnJ,GAMzCT,IACEC,EACA2J,GAGA,OADAzJ,KAAKu6B,SAAS1wB,IAAI/J,EAAM2J,GACjBzJ,KAMTH,KACEC,EACA8O,EACAsuB,GAOA,IAMA/zB,EANIhJ,EAAWH,KAEfqJ,EAAQvJ,aAAgBF,EAAcE,EAAO,IAAIF,EAAYE,GAE7DR,EAAc,CAAC+J,GAkBf,GAbKA,EAAMlL,SACTkL,EAAMlL,OAASgC,GAIbwG,EAAUiI,GACZ5E,EAAW1K,EAAMsP,GAEVA,IAAStO,IAChB48B,EAAW58B,GAGb6I,EAAahJ,EAASo6B,SAASvH,KAAK3pB,EAAMvJ,KAAMR,GAChC,CACd,MAAMm7B,QAAEA,EAAO0C,UAAEA,GAAch9B,EAC3B+8B,EACEC,IACF9zB,EAAMpJ,MAAQL,EAAYw9B,eAC1B12B,EACEy2B,EACA,SAAUtsB,GACR,OAAO1H,EAAa0H,EAAMmiB,KAAK3pB,EAAOuF,EAAMtO,MAK3Cm6B,IACPpxB,EAAMpJ,MAAQL,EAAYy9B,aAC1Bl0B,EAAasxB,EAAQzH,KAAK3pB,EAAOuF,IAIrC,OAAOzF,EAOTtJ,MACE6E,EACAsvB,EACAyC,GAGA,OADAz2B,KAAK8S,UAAUwhB,MAAM5vB,EAASsvB,EAASyC,GAChCz2B,KAMTH,QACE6E,EACAsvB,GAGA,OADAh0B,KAAK8S,UAAU4hB,QAAQhwB,EAASsvB,GACzBh0B,KASTH,cAAcoJ,EAAcvI,GAEnBqR,GAAc/R,KAAKs9B,YAAar0B,EAAMvI,IAOvCqR,GAAcgoB,GAAkB9wB,EAAMvI,GAY9Cb,gBAAgByJ,EAAqBuE,GACnC,CAEE,MAAM1N,EAAWH,MAEjBsJ,EAAUF,GAAYE,IACd+xB,KAAOl7B,EAAS47B,OAAS57B,EACjCmJ,EAAQwH,OAAS3Q,EACjBmJ,EAAQjK,QAAUwO,EAAMxO,QACxBiK,EAAQuE,MAAQA,EAChBvE,EAAQtG,QAAU1C,EAElB,IAAIiP,MAAEA,EAAKC,MAAEA,EAAKX,WAAEA,GAAehB,EAEnC6B,EAAQb,GAAcA,EAAWc,IAEjC,GAAID,EAAO,CACJH,IACHA,EAAQ,IAEV,MAAMhN,EAAM+G,EAAQoG,OAAS6tB,GAC7BhuB,EAAMhN,GAAOmN,EAAMpR,MACnBgL,EAAQoG,MAAQnN,EAGdgN,IACFjG,EAAQiG,MAAQA,GAGdC,IACFlG,EAAQkG,MAAQA,GAGlB,MAAMqB,EAAQ,IAAIwpB,GAAI/wB,GAEtBU,EACE7J,EAASg9B,YAAch9B,EAASg9B,UAAY,IAC5CtsB,GAGF,MAAM9C,EAAO8C,EAAM2sB,IAQnB,OAPIzvB,IACFF,EAAME,KAAOA,GAMR8C,GAUXhR,UACEoJ,EACAgG,GAEA,CACE,MAAM9O,EAAWH,MAAMy9B,YAAEA,GAAgBt9B,EACzC,GAAI+D,EAAU+E,KAAUgG,EACtB,OAAO6tB,GAAYW,EAAax0B,EAAgBoxB,GAAIprB,WAEtD8tB,GACEU,IAAgBt9B,EAASs9B,YAAc,IACvCx0B,EACAgG,IAQNpP,WACEoJ,EACAoK,GAEA,CACE,MAAMlT,EAAWH,MAAM09B,aAAEA,GAAiBv9B,EAC1C,GAAI+D,EAAU+E,KAAUoK,EACtB,OAAOypB,GAAYY,EAAcz0B,EAAgBoxB,GAAIhnB,YAEvD0pB,GACEW,IAAiBv9B,EAASu9B,aAAe,IACzCz0B,EACAoK,IAQNxT,UACEoJ,EACA2J,GAEA,CACE,MAAMzS,EAAWH,MAAMs9B,YAAEA,GAAgBn9B,EACzC,GAAI+D,EAAU+E,KAAU2J,EACtB,OAAOkqB,GAAYQ,EAAar0B,EAAgBoxB,GAAIznB,WAEtDmqB,GACEO,IAAgBn9B,EAASm9B,YAAc,IACvCr0B,EACA2J,IAQN/S,QACEoJ,EACAgc,GAEA,CACE,MAAM9kB,EAAWH,MAAM29B,UAAEA,GAAcx9B,EACvC,GAAI+D,EAAU+E,KAAUgc,EACtB,OAAO6X,GAAYa,EAAW10B,EAAgBoxB,GAAIpV,SAEpD8X,GACEY,IAAcx9B,EAASw9B,UAAY,IACnC10B,EACAgc,EACAoV,GAAI/e,UAQVzb,OACEoJ,EACAD,GAEA,CACE,MAAM7I,EAAWH,MAAM49B,SAAEA,GAAaz9B,EACtC,GAAI+D,EAAU+E,KAAUD,EACtB,OAAO8zB,GAAYc,EAAU30B,EAAgBoxB,GAAIrxB,QAEnD+zB,GACEa,IAAaz9B,EAASy9B,SAAW,IACjC30B,EACAD,IASNnJ,YAAY+O,GACV,CAEE,MAAMzO,EAAWH,MAEjBsT,OAAEA,EAAMR,UAAEA,GAAc3S,GAExB42B,SAAEA,GAAajkB,EAEf,GAAIQ,GAAUyjB,EAAU,CAEtB,MAAMuE,EAAWvE,EAASoD,IAE1B/rB,EAAWktB,EAAS10B,MAEhBgI,GACFzO,EAAS6G,IAAI4H,GAIfkE,EAAUC,SAAS1H,MAGduD,GAAQR,IAAaktB,EAAS10B,OACjCzG,EAASwN,OACP2tB,EAAS10B,IAAItG,GACbgT,KAUVzT,SACE,CACE,MAAMM,EAAWH,KACjB,gBjBt3BJX,EACAi8B,EACAI,EACAD,EACA5sB,EACA0sB,GAGA,IAIAjoB,EAJIuqB,EAAe,CAAEC,SAAUz6B,GAE/B06B,EAAS,CAAEF,GAIXG,EAAwB,GAExBC,EAA0C,GAE1CC,EAAY,SAAU7R,EAAc3qB,EAAea,EAAa+V,EAAiB8T,EAAqB+R,GAEpG,IAAIC,EAAQ/R,EAAM3qB,GAAQgD,EAAU2R,GAAiB+nB,EAAMN,SAAUv7B,GAAMjE,EAAa+tB,EAAO5mB,EAAS44B,GA6BxG,GA1BIhP,EAAQ8O,KACVA,EAAiBz5B,GAIfhF,EAAM0+B,EAAM77B,IACdjE,EAAQ8/B,EAAM77B,GAIP7C,EAAM0+B,EAAME,SACnBF,EAAQA,EAAME,MAMV/7B,IAAQc,EACV/E,EAAQ8/B,EAGDA,GAASx/B,GAAYc,EAAM0+B,EAAM77B,MACxCjE,EAAQ8/B,EAAM77B,KAIdjE,IAAU+tB,IAEZ/tB,EAAQe,EAAQuH,IAAIlC,EAAS2nB,EAAOD,MACtBC,EAAO,CAEnB,GAAI/T,GAAU5W,EAAQ,EAIpB,OAAOw8B,EAAU7R,EAAO3qB,EAAQ,EAAGa,EAAK+V,EAAQ8T,EAAW+R,GAI7D,MAAM38B,EAASwwB,GAAW0J,EAASn5B,GASnC,OARIf,GACFiE,EAASjE,GACFkD,QAAUnC,GAGjBkD,EAAOnH,MAAQF,EACfqH,EAAOf,QAAUy5B,GAEZ14B,EAQX,OAHAA,EAAOnH,MAAQA,EACfmH,EAAOf,QAAUA,EAEVe,GAeT84B,EAAuB,SACrBt1B,EACA3J,EACA+sB,GAEA,OAAO,SAAUhjB,EAAoBuF,GAEnC,MAAMssB,EAAS77B,EAAQ4J,GAEvB,GAAII,aAAiBzJ,EAAa,CAEhC,IAAI4B,EAAcpD,EAElB,GAAIkB,EAAM,CACR,MAAM8+B,EAAQ7b,EAAW8J,GACrB+R,IACFA,EAAMI,OAASn1B,EACf+0B,EAAMK,MAAQ7vB,EACdpN,EAASS,EAAQi5B,EAAQ77B,EAASC,EAAK+sB,IACvC+R,EAAMI,OACNJ,EAAMK,MAAQrgC,QAIhBoD,EAASS,EAAQi5B,EAAQ77B,EAASuP,EAAO,CAACvF,EAAOuF,GAAQvF,GAG3D,OAAO7H,EAIPS,EACEi5B,EACA77B,EACAC,EAAOA,EAAK+sB,GAASjuB,KAO7BsgC,EAAe,SAAUhL,EAAkBrH,GACzC,OAAO,WACL,OAAOqH,EAAOrH,KAIlBsS,EAAkB,SAAUjtB,GAC1B,MAAMktB,EAAYrc,EAAWyb,GAC7B,GAAIY,EAAW,CACb,MAAMC,EAAYtc,EAAWqc,GACzBC,GAAaA,EAAUvtB,OACxButB,EAAUntB,MAAmBA,EAS9B1H,EAAW40B,EANY,CACrBttB,OAAQhR,EACRoR,KAAAA,EACArS,QAAAA,EACAqF,QAASm5B,EAAOC,aAOxBgB,EAAuB,SAAU71B,EAAc3K,GACzCgV,EAAO7D,YACT6e,GAAQhb,EAAQ,QAASrK,EAAM3K,GAG/BgwB,GAAQhb,EAAQ,cAAerK,EAAM,CAAEA,KAAAA,EAAM3K,MAAAA,KAIjDygC,EAAsB,SAAU91B,EAAc0F,EAAoBrQ,GAChEgwB,GAAQhb,EAAQ,cAAerK,EAAM,CAAEA,KAAAA,EAAM3K,MAAAA,EAAOqQ,KAAAA,KAGtDqwB,EAAkB,SAAU/1B,EAAc3K,GACxCgwB,GAAQhb,EAAQ,OAAQrK,EAAM3K,IAGhC2gC,EAAwB,SAAUh2B,GAChCqK,EAAOD,WAAakoB,EAAYtyB,IAQlCi2B,EAAqB,SAAUj2B,EAAcxD,EAAqBkJ,GAEhE,MAAMpM,EAAM8T,GAAiB8oB,GAA0Bl2B,GAgBvD,OAdAqlB,GACEhb,EACAkc,GACAjtB,EACA,CACEuG,GAAIq2B,GACJl2B,KAAAA,EACA1G,IAAAA,EACA8M,MAAOR,EAAWswB,IAClBva,QAASnf,EAAOf,QAChBiK,KAAAA,IAIGlJ,EAAOnH,OAIhB8gC,EAAmB,SAAU35B,GAC3B6oB,GACEhb,EACAkc,GACA7f,GACA,CACE7G,GAAI6G,GACJ1G,KAAM5F,EACNd,IAAKoN,GACLrR,MAAOmH,EAAOnH,MACdsmB,QAASnf,EAAOf,QAChB2K,MAAOR,EAAWc,OAKxB0vB,EAAyB,SACvBp2B,EAAc1G,EAAajE,EAC3B48B,EAAgB57B,GAEhBgvB,GACEhb,EACAkc,GACAjtB,EACA,CACEuG,GAAI+d,GACJ5d,KAAAA,EACA1G,IAAAA,EACAjE,MAAAA,EACA+Q,MAAOR,EAAWgY,IAClBuR,QAASmG,EAAqBrD,EAAkB57B,EAAMy+B,MAK5DuB,EAAuB,SACrBr2B,EAAc1G,EAAajE,EAC3B+K,GAlKoB,IAAUvJ,EAoK9BwuB,GACEhb,EACAkc,GACAjtB,EACA,CACEuG,GAAI+d,GACJ5d,KAAAA,EACA1G,IAAAA,EACAjE,MAAAA,EACA+Q,MAAOR,EAAWgY,IAClBuR,SA9K0Bt4B,EA8KGuJ,EA7K1B,SAAUA,EAAoBuF,GAG/B9O,IAASuJ,EAAMvJ,OACjBuJ,EAAQ,IAAIzJ,EAAYE,EAAMuJ,IAEhChK,EAAQ2zB,KAAK3pB,EAAOuF,QA4KxB2wB,EAAuB,SACrBt2B,EAAc1G,EAAajE,EAC3B48B,EAAuB57B,EAAuBo0B,GAG9C,MAAMrkB,EAAQR,EAAW5F,GAQzBqlB,GACEhb,EACAkc,GACAjtB,EACA,CACEuG,GAAIke,GACJ/d,KAAAA,EACA1G,IAAAA,EACAjE,MAAAA,EACA+Q,MAAAA,EACAqkB,OAAQA,EAASgL,EAAahL,EAAQqK,GAAU3/B,EAChDg6B,QAAS8C,EAASqD,EAAqBrD,EAAQ57B,EAAMy+B,GAAU3/B,KAMrEohC,EAAoB,SAAU/5B,GAE5B,MAAMnH,MAAEA,EAAKoG,QAAEA,GAAYe,EAG3B,GAAInH,GAASM,GAEP+H,EAAUrI,KAAWkB,EAASlB,KAEhC6L,GACE7L,EACA,SAAUA,EAAOiE,GACf+rB,GAAQhb,EAAQ,QAAS/Q,EAAKjE,KAI9BoG,GAAS,CACX,MAAMnC,EAAM8T,GAAiB8oB,GAA0Bz6B,GACvD4pB,GACEhb,EACAkc,GACAjtB,EACA,CACEuG,GAAIq2B,GACJl2B,KAAM5F,EACNd,IAAAA,EACA8M,MAAOR,EAAWswB,IAClBva,QAASvO,GAAiB3R,EAASU,OAU/Cq6B,EAAqB,SACnB5xB,EACA1F,EACA+c,EACAmJ,EACA7e,GAGA,GAAIrH,EAAK,CACP,MAAMu3B,EAAgBrgC,EAAQuH,IAAIuB,GAMlC0F,EAAM1F,IAAMu3B,EAUd,GAPIxa,IACF5R,EAASzF,EACTqX,IACA5R,EAASlV,GAIPiwB,EACF2P,EAAW38B,KAAKwM,EAAM4D,SAAW,IACjC4c,IACAzL,EAAUob,QAEP,GAAIxuB,EAAO,CACd,MAAMmwB,EAAc,GACpBx1B,GACEqF,EACA,SAAUkE,EAAgBzK,GACxB+0B,EAAW38B,KAAK,IAChBqS,IACA,MAAMtD,EAASwS,EAAUob,GACzB2B,EAAY12B,GAAQmH,EAAOxP,OAASwP,EAAShS,IAGjDyP,EAAM2B,MAAQmwB,EAGhB9xB,EAAMxO,QAAUA,EAChBwO,EAAMnJ,QAAUm5B,EAAOC,SAEvB,MAAMc,EAAYrc,EAAWyb,GAK7B,OAJIY,GACF50B,EAAW40B,EAAW/wB,GAGjBA,GAIT+xB,EAA6B,SAC3B32B,EACAqP,EACAnU,EACAsB,EACA2mB,EACAC,GAEA,MAAMwT,EAAUxT,GAAS0R,EACzBv8B,EAAS08B,EACP2B,EACAA,EAAQj/B,SAAWuD,GAAU,GAAK,GAClC8E,EACAqP,EACA8T,GAEF,OAAO3mB,EAASjE,EAASA,EAAOlD,OAGlCwhC,EAAgC,SAC9BrmB,EACAsmB,GAGA,OADAz0B,EAAcy0B,EAAgBtmB,GACvBC,GAAWqmB,EAAgBpmB,KAGpCqmB,EAAgC,SAC9B1hC,EACA2hC,EACAF,EACAt6B,GAEI/F,EAAMqgC,KACRE,EAAgBvmB,GAAWqmB,EAA4BpmB,KAEzD,MAAMlV,EAAQutB,GAAW1zB,EAAO2hC,GAGhC,OAFA5B,GAAa35B,QAAUtG,EACvBigC,GAAa//B,MAAQmG,EAAQA,EAAMnG,MAAQF,EACpCqH,EAAS44B,GAAeA,GAAa//B,OAG9C4hC,EAAuB,SACrB9gC,EACAE,EACAmG,GAKA,OAHA44B,GAAa35B,QAAUtG,EAEvBigC,GAAa//B,MAAQ2D,EAAQ7C,EAAIC,EAASC,GAAQlB,GAC3CqH,EAAS44B,GAAeA,GAAa//B,OAI9C6hC,EAAa,SAAUl3B,EAAcm3B,GAEnC,MAAMxB,EAAYrc,EAAWyb,GAE7B5tB,EAAS/Q,EAAQuH,IAAIqC,GAEjB21B,IACExuB,EACF1J,EACE0J,EACA,SAAUvC,GACR7D,EAAW40B,EAAW/wB,GACtBA,EAAM6F,KAAOzK,EACb4E,EAAMiD,OAASzR,IAIZ+gC,GACPA,MASNC,EAAgB,SAAUp3B,EAAcqzB,GACtC2B,EAAch1B,GAAQqzB,GAIxBgE,EAAe,SAAUr3B,GACvB,GAAIg1B,EAAch1B,GAChBg1B,EAAch1B,SAEX,CACH,MAAMgc,EAAUwW,EAASxyB,GACrBgc,GACFA,EACE2a,EACAE,EACAE,EACAE,EACAvB,EACAG,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAU,EACAE,EACAC,EACAC,EACAp5B,MASRq5B,EAAc,SACZlU,EACAtrB,EACAuB,EACAmC,EACAhD,EACAd,GAGA,MAAM6/B,EAAY5C,EAAQ6C,EAAY3C,EAGtCF,EAAS,CAAEC,SAAUp5B,GACrBq5B,EAAS2C,EAAUC,OAAO9C,GAGtBn+B,EAAMkB,KACRi9B,EAAO+C,QAAUhgC,GAIfc,IACFm8B,EAAOn8B,GAASa,GAKbmC,IACHm5B,EAAOS,MAAQt9B,GAGjBsrB,IAEAuR,EAAS4C,EACT1C,EAAS2C,GAIXH,EAAa,SACXjU,EACA7V,EACAC,EACAC,EACAjV,GAGA,MAAMm/B,EAAYpqB,EAAKnY,MAEvBwiC,EAAcrqB,EAAK/R,QAEnB,GAAIgS,EAAI,CACN,IAAIqqB,EAAUrqB,EAAGpY,MAAOi4B,EAAQ,EAChC,GAAIsK,EAAYE,EACd,GAAIpqB,EACF,IAAK,IAAI9V,EAAIggC,EAAWhgC,GAAKkgC,EAASlgC,IACpC2/B,EACElU,EACAzrB,EACA01B,IACAlzB,EACA3B,QAKJ,IAAK,IAAIb,EAAIggC,EAAWhgC,EAAIkgC,EAASlgC,IACnC2/B,EACElU,EACAzrB,EACA01B,IACAlzB,EACA3B,QAMN,GAAIiV,EACF,IAAK,IAAI9V,EAAIggC,EAAWhgC,GAAKkgC,EAASlgC,IACpC2/B,EACElU,EACAzrB,EACA01B,IACAlzB,EACA3B,QAKJ,IAAK,IAAIb,EAAIggC,EAAWhgC,EAAIkgC,EAASlgC,IACnC2/B,EACElU,EACAzrB,EACA01B,IACAlzB,EACA3B,QAOR,GAAIlC,EAASqhC,GACX,IAAK,IAAIhgC,EAAI,EAAGD,EAASigC,EAAUjgC,OAAQC,EAAID,EAAQC,IACrD2/B,EACElU,EACAuU,EAAUhgC,GACVA,EACAigC,EACIzqB,GAAiByqB,EAAaz9B,EAAmBxC,GACjDwC,EACJ3B,EACAd,QAID,GAAI+F,EAAUk6B,GACjB,IAAK,IAAIt+B,KAAOs+B,EACdL,EACElU,EACAuU,EAAUt+B,GACVA,EACAu+B,EACIzqB,GAAiByqB,EAAav+B,GAC9Bc,EACJ3B,IAQV,OAAO45B,EACLsE,EACAE,EACAE,EACAE,EACAvB,EACAG,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAU,EACAE,EACAC,EACAC,EACAp5B,IiBgOS65B,CACL7gC,EACAA,EAASq8B,UACT1sB,GAAa3P,EAASy9B,SAAU3D,IAChCnqB,GAAa3P,EAASw9B,UAAW3D,IACjClqB,GAAa3P,EAASs9B,YAAa5D,IACnC/pB,GAAa3P,EAASu9B,aAAc5D,MAW1Cj6B,OAAOgO,EAAcC,GACnB,CACE,IAIAmzB,EAJI9gC,EAAWH,MAEfsT,OAAEA,EAAMgnB,SAAEA,GAAan6B,EAOvBA,EAAS8P,MAAQ,GAEbqD,GACFrR,EAAQq4B,EAAS4G,IAA4B/gC,GAC7CA,EAAS6yB,KAAKkO,GAA4BvG,IAC1CwG,GAAezE,GAAQ7uB,EAAOC,GAC9BmzB,EAAYG,KAGZn/B,EAAQq4B,EAAS+G,IAA2BlhC,GAC5CA,EAAS6yB,KAAKqO,GAA2B1G,IACzCwG,GAAezE,GAAQ7uB,EAAOC,GAC9B3N,EAASq9B,IAAM3vB,EAAME,KACrBkzB,EAAYK,IAGdnhC,EAASmT,OAASzF,EAIlBwsB,GAAI7vB,SACF,WACMrK,EAASmT,SACXrR,EAAQq4B,EAAS2G,GAAY9gC,GAC7BA,EAAS6yB,KAAKiO,EAAYtG,QAYpC96B,WAAW0P,IAYX1P,UAAU0C,EAAajE,IAevBuB,UAEE,MAAMM,EAAWH,MAEjBy6B,QAAEA,EAAOH,SAAEA,EAAQC,SAAEA,EAAQznB,UAAEA,GAAc3S,EAE7C,CAEE8B,EAAQq4B,EAASiH,IAA6BphC,GAC9CA,EAAS6yB,KAAKuO,GAA6B5G,IAE3C,MAAMrnB,OAAEA,GAAWnT,EAEfs6B,GAAWA,EAAQ0C,WACrBzM,EAAa+J,EAAQ0C,UAAWh9B,GAG9BmT,IAEFnT,EAASmT,OAASlV,E/B9b1B,SAAwBwP,EAAcC,EAAc2zB,GAClD,GAAIA,EAAU,CACZ,MAAMhxB,EAAa5C,EAAIkD,OAAOjD,EAAME,MAChCyC,GACF0C,GAAYtF,EAAK4C,EAAY3C,QAO/BuF,GAAaxF,EAAKC,G+Bobd4zB,CAAiB/E,GAAQppB,GAASmnB,IAKtC3nB,EAAUc,UAGR3R,EAAQq4B,EAASoH,IAA4BvhC,GAC7CA,EAAS6yB,KAAK0O,GAA4B/G,IAI5CJ,EAAS1wB,MAETkuB,GAAa53B,GAOfN,SAAS0L,GACPvL,KAAK8S,UAAUC,SAASpC,OAAOpF,EAAMvL,MAQvCH,OAAO6E,GACL,OAAO1E,KAAK8S,UAAU6uB,OAAOj9B,GAY/B7E,SAAS6E,EAAiBoX,EAAelS,GACvC,OAAO5J,KAAK8S,UAAU8uB,SAASl9B,EAASoX,EAAMlS,GAYhD/J,SAAS6E,EAAiBoX,EAAe+b,GACvC,OAAO73B,KAAK8S,UAAU+uB,SAASn9B,EAASoX,EAAM+b,GAUhDh4B,OAAO6E,EAAiB1D,EAAWU,GACjC,OAAO1B,KAAK8S,UAAUglB,OAAOpzB,EAAS1D,EAAMU,GAS9C7B,OAAO6E,EAAiB1D,GACtB,OAAOhB,KAAK8S,UAAUnC,OAAOjM,EAAS1D,GASxCnB,QAAQ6E,EAAiB1D,GACvB,OAAOhB,KAAK8S,UAAUE,QAAQtO,EAAS1D,GASzCnB,SAAS6E,EAAiBhD,GACxB,OAAO1B,KAAK8S,UAAUsmB,SAAS10B,EAAShD,GAS1C7B,OAAO6E,EAAiB1D,GACtB,OAAOhB,KAAK8S,UAAUjR,OAAO6C,EAAS1D,GASxCnB,KAAQ+O,EAASnI,GACf,OAAOzG,KAAK8S,UAAUtM,KAAKoI,EAAMnI,IAqErC,SAAS81B,GAAgBp8B,EAAe26B,GAElCA,GACF36B,EAASm0B,MAAMwG,GAIf74B,EAAQ9B,EAASm6B,SAASwH,IAA2B3hC,GACrDA,EAAS6yB,KAAK8O,GAA2BnH,IAK7C,SAASsB,GAAmB97B,EAAeoC,EAAajE,GAClDiB,EAAQjB,GACV6B,EAASoC,GAAKN,EAAQ3D,EAAO6B,IAEtBwG,EAAUrI,IACjB6B,EAASoC,GAAKjE,GAIlB,SAASyjC,GAAS5hC,EAAeL,EAAc2J,EAAoByF,GACjE,MAAM5F,EAA0B,CAC9BlK,GAAIqK,EACJC,IAAKvJ,GAEH+O,IACF5F,EAAQM,IAAM,GAEhBzJ,EAASo6B,SAASjI,GAAGxyB,EAAMwJ,GAG7B,SAAS2zB,GACP98B,EACAL,EACA2J,EACAyF,GAaA,OAXIhL,EAAUpE,GACZiiC,GAAS5hC,EAAUL,EAAgB2J,EAAsByF,GAGzD/E,GACErK,EACA,SAAUxB,EAAiBiE,GACzBw/B,GAAS5hC,EAAUoC,EAAKjE,EAAO4Q,KAI9B/O,EAGT,SAAS4R,GACPiwB,EACA/4B,EACAvI,GAGA,GAAIshC,GAAYA,EAAS/4B,GAAO,CAE9B,MAAM2J,EAAYovB,EAAS/4B,GAG3B,GAAI1J,EAAQqT,GAAY,CAEtBovB,EAAS/4B,GAAQ,CAACvI,GAElB,MAAMuhC,EAAoB,SAAUzgC,GAElC,MAAM0gC,EAAQF,EAAS/4B,GAAOK,EAAU9H,EAAgB,SAAKA,EAE7DwgC,EAAS/4B,GAAQK,EAEjB5C,EACEw7B,EACA,SAAUxhC,GACRA,EAAS4I,MAMf64B,EAAWvvB,EAA8BqvB,GACrCE,GACFA,EAAQC,KAAKH,QAKRziC,EAASoT,GAChB5I,EACE4I,EACAlS,GAKFA,EAASkS,GAEX,OAAOtS,GAKX,SAASw8B,GAAYkF,EAAuB/4B,EAAcqP,GACxD,OAAI0pB,GAAYA,EAAS/4B,GAChB+4B,EAAS/4B,GAETqP,EACAA,EAAOrP,QADX,EAKP,SAAS8zB,GAAYiF,EAAgB/4B,EAAqB3K,EAAa+jC,GACjEn+B,EAAU+E,GACZ+4B,EAAS/4B,GAAkBo5B,EAAcA,EAAY/jC,GAASA,EAG9D6L,GACElB,EACA,SAAU3K,EAAOiE,GACfy/B,EAASz/B,GAAO8/B,EAAcA,EAAY/jC,GAASA,IA3sC3C+7B,WAAU,iBAKVA,MAAahc,EACbgc,OAAeqC,GACfrC,SAAmB77B,GACnB67B,UAAqB17B,GACrB07B,UAAqBx7B,GACrBw7B,UAAqBiI,GACrBjI,SAA0Bz6B,EAC1By6B,WAAwBxxB,GAusCtCwxB,GAAIprB,UAAU,CAAE5F,MAAAA,GAAOqG,MAAAA,GAAOkV,QAAAA,KAE9ByV,GAAIrxB,OAAO,CAAEu5B,QCr0Cf,SAAyBt5B,GACvB,OAAOvJ,EAAMM,KAAK4G,IAAI+nB,GAA0B1lB"}