{"version":3,"file":"yox.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-common/src/function/isUndef.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-common/src/function/guid.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/matchBest.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target === constant.UNDEFINED\n}\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  const list = splitCache.hasOwnProperty(keypath)\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(constant.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder\n} from 'yox-type/src/type'\n\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\ntype Namespace = {\n\n  // 事件名称\n  type: string\n\n  // 命名空间\n  ns?: string\n\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = constant.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === constant.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = constant.FALSE\n            }\n          }\n\n          if (result === constant.FALSE) {\n            return isComplete = constant.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | Namespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | Namespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | Namespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (!oldValue[name]\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (!oldValue[name]\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport guid from 'yox-common/src/function/guid'\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: Data = {\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      $vnode,\n      $vnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair($vnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair($vnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          $vnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    return appendVnode({\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    text: string | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: string | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      text,\n      html,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    staticTag: string | void,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void,\n    dynamicTag: string | void\n  ) {\n\n    let tag: string\n\n    // 组件支持动态名称\n    if (dynamicTag) {\n      const componentName = observer.get(dynamicTag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`The dynamic component \"${dynamicTag}\" can't be found.`)\n        }\n      }\n      tag = componentName\n    }\n    else {\n      tag = staticTag as string\n    }\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        vnodeSlots[name] = vnodes.length ? vnodes : constant.UNDEFINED\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - 1 - (offset || 0),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n          vnodes[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange,\n    toString\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = constant.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return constant.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, constant.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, constant.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\ntype YoxClass = typeof Yox\n\ntype YoxPlugin = {\n  install(Yox: YoxClass): void\n}\n\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return constant.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (isUndef(event.ns)) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    isComplete = $emitter.fire(event, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return isDef((this as YoxInterface).get(SLOT_DATA_PREFIX + name))\n    }\n  })\n}\n"],"names":["DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_DOT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","constant.UNDEFINED","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","constant.MINUS_ONE","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","str","start","end","is.number","constant.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","upper","toUpperCase","lower","toLowerCase","is.string","replace","$0","$1","trim","offset","charAt","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","constant.RAW_DOT","list","hasOwnProperty","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","Error","ns","listeners","Emitter","filter","instance","namespace","parse","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","name","ns_1","matchListener_1","createMatchListener","object.each","matchListener","string.indexOf","string.slice","matchTrue","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","_a","once","bind","unbind","ref","props","slots","isComponent","model","$model","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","setPair","KEY_DIRECTIVES","innerText","innerHTML","createEvent","event","findElement","selector","constant.DOCUMENT","querySelector","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","documentElement","classes","CHAR_WHITESPACE","array.join","array.remove","isBoxElement_1","tagName","IEEvent_1","element","object.extend","currentTarget","srcElement","IEEvent","returnValue","cancelBubble","string.codeAt","getElementById","EMITTER","propertyName","constant.EVENT_CHANGE","constant.EVENT_CLICK","attachEvent","detachEvent","STYLE_SHEET","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","value_1","getAttribute","appendChild","constant.EVENT_MODEL","on","locked","find","cssText","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","object.falsy","createElementNS","createTextNode","removeAttribute","beforeNode","oldNode","replaceChild","removeChild","nextSibling","nodeType","string.lower","hooks","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","array.falsy","dep","watch","Computed","force","lastComputed","current","unwatch","sorted","keypathUtil.match","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","keypathUtil.join","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","depIgnore","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","object.sort","formatWatcherOptions","step","toNumber","min","insert","object.clear","delay","timer","args_1","array.toArray","arguments","modifier","handler","lazy","debounce","constant.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","array.indexOf","selectControl","multiple","option","selected","selectedIndex","values_1","dataBinding","lazyValue","viewBinding_1","viewSyncing_1","element_1","control_1","eventName_1","sync_1","binding","checkProp","hint","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","rule","isUndef","addComputed","method","placeholder","el","root","model_1","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_TRANSITION","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","render","$template","Yox","compile","snabbdom.create","domApi","plugin","install","stringify","getResource","setResource","partial","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","model_2","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","renderComponentVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","renderRange","renderEqualRange","$keypath","stack","lookup","defaultKeypath","scope","globalHolder","$item","array.last","$event","$data","vnodeList","generate","lastScope","lastStack","concat","$length","myStack","identifier","runtimeKeypath","staticKeypath","lastVnode","attrs","childs","array.pop","staticTag","dynamicTag","vnodeSlots","defaultRender","from","to","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","is","logger","addEvent","registry","componentCallback","queue","promise","then","formatValue","hasSlot"],"mappings":"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"}