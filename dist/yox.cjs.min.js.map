{"version":3,"file":"yox.cjs.min.js","sources":["../node_modules/yox-common/src/util/env.ts","../node_modules/yox-common/src/function/isDef.ts","../node_modules/yox-common/src/util/is.ts","../node_modules/yox-common/src/function/execute.ts","../node_modules/yox-common/src/util/Event.ts","../node_modules/yox-common/src/util/array.ts","../node_modules/yox-common/src/util/string.ts","../node_modules/yox-common/src/function/toString.ts","../node_modules/yox-common/src/util/keypath.ts","../node_modules/yox-common/src/util/object.ts","../node_modules/yox-common/src/util/logger.ts","../node_modules/yox-common/src/function/nextTick.ts","../node_modules/yox-common/src/util/Emitter.ts","../node_modules/yox-common/src/function/isNative.ts","../node_modules/yox-common/src/util/NextTask.ts","../node_modules/yox-config/index.ts","../node_modules/yox-snabbdom/src/field.ts","../node_modules/yox-snabbdom/src/nativeAttr.ts","../node_modules/yox-snabbdom/src/nativeProp.ts","../node_modules/yox-snabbdom/src/directive.ts","../node_modules/yox-snabbdom/src/component.ts","../node_modules/yox-snabbdom/index.ts","../node_modules/yox-common/src/function/toNumber.ts","../node_modules/yox-expression-compiler/src/nodeType.ts","../node_modules/yox-expression-compiler/src/creator.ts","../node_modules/yox-expression-compiler/src/interpreter.ts","../node_modules/yox-expression-compiler/src/compiler.ts","../node_modules/yox-template-compiler/src/nodeType.ts","../node_modules/yox-template-compiler/src/helper.ts","../node_modules/yox-template-compiler/src/creator.ts","../node_modules/yox-template-compiler/src/compiler.ts","../node_modules/yox-common/src/function/isUndef.ts","../node_modules/yox-common/src/function/toJSON.ts","../node_modules/yox-template-compiler/src/stringify.ts","../node_modules/yox-expression-compiler/src/executor.ts","../node_modules/yox-template-compiler/src/renderer.ts","../node_modules/yox-observer/src/Computed.ts","../node_modules/yox-observer/src/function/matchBest.ts","../node_modules/yox-observer/src/function/readValue.ts","../node_modules/yox-observer/src/function/diffString.ts","../node_modules/yox-observer/src/function/diffArray.ts","../node_modules/yox-observer/src/function/diffObject.ts","../node_modules/yox-observer/src/function/diffRecursion.ts","../node_modules/yox-observer/src/function/diffWatcher.ts","../node_modules/yox-observer/src/function/filterWatcher.ts","../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../node_modules/yox-observer/src/Observer.ts","../node_modules/yox-dom/index.ts","../node_modules/yox-common/src/function/debounce.ts","../src/config/event.ts","../src/directive/event.ts","../src/directive/model.ts","../src/directive/binding.ts","../src/filter/hasSlot.ts","../src/Yox.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport function EMPTY_FUNCTION() {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || plain` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 dom 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from '../util/env'\n\nexport default function (target: any, defaultValue = env.EMPTY_STRING): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : defaultValue\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\nimport toString from '../function/toString'\n\nconst SEPARATOR = '.', patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: any, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  if (string.falsy(keypath)) {\n    callback(\n      keypath,\n      env.TRUE\n    )\n  }\n  else {\n    let startIndex = 0, endIndex = 0\n    while (env.TRUE) {\n      endIndex = string.indexOf(keypath, SEPARATOR, startIndex)\n      if (endIndex > 0) {\n        if (\n          callback(\n            string.slice(keypath, startIndex, endIndex),\n            env.FALSE\n          ) === env.FALSE\n        ) {\n          break\n        }\n        startIndex = endIndex + 1\n      }\n      else {\n        callback(\n          string.slice(keypath, startIndex),\n          env.TRUE\n        )\n        break\n      }\n    }\n  }\n}\n\n\nfunction formatKeypath(keypath: any): string {\n  return is.string(keypath)\n    ? keypath\n    : is.number(keypath)\n      ? toString(keypath)\n      : env.EMPTY_STRING\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: any, keypath2: any): string {\n\n  keypath1 = formatKeypath(keypath1)\n  keypath2 = formatKeypath(keypath2)\n\n  return keypath1 === env.EMPTY_STRING\n    ? keypath2\n    : keypath2 !== env.EMPTY_STRING\n      ? keypath1 + SEPARATOR + keypath2\n      : keypath1\n\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string | number): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string | number, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    let channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`绑定的事件已被全部移除`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Attribute from 'yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Property from 'yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}\n\n//\n// 旧 [ child1, child2 ]\n// 新 innerHTML\n//\n// 这种情况，要让外部先把 child1 child2 正常移除掉，再用 innerHTML 覆盖，否则指令无法销毁\n//\n// 旧 innerHTML\n// 新 [ child1, child2 ]\n//\n// 这种情况，先用 innerHTML 覆盖，再处理 child1 child2\n//\n// export default {\n//   create: createProps,\n//   update: removeProps,\n//   postpatch: createProps,\n// }\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from 'yox-type/src/vnode/VNode'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n      if (props) {\n        node.set(node.checkPropTypes(props))\n      }\n      if (slots) {\n        node.set(slots)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport API from 'yox-type/src/API'\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxOptions from 'yox-type/src/options/Yox'\n\nimport * as field from './src/field'\n\nimport * as nativeAttr from './src/nativeAttr'\nimport * as nativeProp from './src/nativeProp'\nimport * as directive from './src/directive'\nimport * as component from './src/component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions | void) {\n\n  if (!options) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`component [${vnode.tag}] is not found.`)\n    }\n    return\n  }\n\n  // 渲染同步加载的组件时，vnode.node 为空\n  // 渲染异步加载的组件时，vnode.node 不为空，因为初始化用了占位节点\n  const child = (vnode.parent || vnode.context).create(options, vnode, vnode.node),\n\n  // 组件初始化创建的元素\n  node = child.$el as Node\n\n  if (node) {\n    vnode.node = node\n  }\n  else {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`the root element of component [${vnode.tag}] is not found.`)\n    }\n  }\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Record<string, any> {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let isAsync = env.TRUE\n\n    context.component(\n      tag as string,\n      function (options: any) {\n        if (isDef(data[field.LOADING])) {\n          // 异步组件\n          if (data[field.LOADING]) {\n            // 尝试使用最新的 vnode\n            if (data[field.VNODE]) {\n              vnode = data[field.VNODE]\n              // 用完就删掉\n              delete data[field.VNODE]\n            }\n            enterVnode(\n              vnode,\n              createComponent(vnode, options)\n            )\n          }\n        }\n        // 同步组件\n        else {\n          createComponent(vnode, options)\n          isAsync = env.FALSE\n        }\n      }\n    )\n\n    if (isAsync) {\n      vnode.node = api.createComment(env.RAW_COMPONENT)\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.append(\n        node,\n        api.createText(text)\n      )\n    }\n    else if (html) {\n      api.html(node as Element, html)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= (end as number)) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.nextTick(enter, env.TRUE)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, context } = vnode\n\n  if (parent\n    // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n    // 这里表示的是宿主组件还没被销毁\n    // 如果宿主组件被销毁了，则它的一切都要进行销毁\n    && parent.$vnode\n    // 是从外部传入到组件内的\n    && parent !== vnode.context\n  ) {\n    return\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement,\n        env.EMPTY_FUNCTION\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING)\n  }\n\n}\n\nexport function create(api: API, node: Node, isComment: boolean, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    isComment,\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`destroy vnode is not work without parent node.`)\n      }\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\n\nexport default function (target: any, defaultValue = 0): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import isDef from 'yox-common/src/function/isDef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(elements: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    elements,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(callee: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    callee,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean | void, offset: number | void, staticKeypath: string | void): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath: isDef(staticKeypath) ? staticKeypath as string : name,\n  }\n}\n\nfunction createMemberInner(raw: string, props: Node[], lookup: boolean | void, offset: number, staticKeypath: string | void) {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    props,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup: boolean | void, offset: number | void\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, arg: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    arg,\n  }\n}\n\nfunction getLiteralNode(nodes: Node[], index: number): Literal | void {\n  if (nodes[index]\n    && nodes[index].type === nodeType.LITERAL\n  ) {\n    return nodes[index] as Literal\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: (Node | Identifier | Literal)[]): Node | Identifier | Member {\n\n  let { length } = nodes,\n\n  lookup: boolean | void,\n\n  offset = 0,\n\n  staticKeypath: string | void,\n\n  name = env.EMPTY_STRING,\n\n  list: (Node | Identifier | Literal)[] = [],\n\n  literal: Literal | void,\n\n  identifier: Identifier\n\n  if (length > 1) {\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n    if (nodes[0].type === nodeType.IDENTIFIER) {\n\n      identifier = nodes[0] as Identifier\n\n      name = identifier.name\n      lookup = identifier.lookup\n      staticKeypath = identifier.staticKeypath\n\n      if (identifier.offset > 0) {\n        offset += identifier.offset as number\n      }\n\n      if (name) {\n        array.push(list, identifier)\n      }\n\n      // 优化 1：计算 staticKeypath\n      //\n      // 计算 staticKeypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n      // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n      // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n      // 下面这段属于性能优化，避免在运行时反复计算 Member 的 keypath\n\n      // 优化 2：计算 offset 并智能转成 Identifier\n      //\n      // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n      for (let i = 1; i < length; i++) {\n        literal = getLiteralNode(nodes, i)\n        if (literal) {\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            continue\n          }\n          if (isDef(staticKeypath)\n            && literal.raw !== env.KEYPATH_CURRENT\n          ) {\n            staticKeypath = keypathUtil.join(staticKeypath as string, literal.value)\n          }\n        }\n        else {\n          staticKeypath = env.UNDEFINED\n        }\n        array.push(list, nodes[i])\n      }\n\n      // 表示 nodes 中包含路径，并且路径节点被干掉了\n      if (list.length < length) {\n        nodes = list\n        // 剩下的节点，第一个如果是 Literal，把它转成 Identifier\n        literal = getLiteralNode(nodes, 0)\n        if (literal) {\n          name = literal.value\n          nodes[0] = createIdentifierInner(literal.raw, name, lookup, offset)\n        }\n      }\n\n    }\n\n    // 如果全是路径节点，如 ../../this，nodes 为空数组\n    // 如果剩下一个节点，则可转成标识符\n    return nodes.length < 2\n      ? createIdentifierInner(raw, name, lookup, offset, staticKeypath)\n      : createMemberInner(raw, nodes, lookup, offset, staticKeypath)\n\n  }\n\n  return nodes[0]\n\n}\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n\n  '->': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i > b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i < b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  },\n  '=>': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i >= b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i <= b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  }\n}\n","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const { length } = content\n    this.index = -1\n    this.end = length\n    this.code = CODE_EOF\n    this.content = content\n    this.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? -1 : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this\n\n    // 走一步\n    if (instance.code === CODE_EOF) {\n      instance.go(step)\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (step && step < 0) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(-1)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys = [], values = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'dev') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'dev') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string | void\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // +、/、%、~、^\n      case CODE_PLUS:\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // -、->\n      case CODE_MINUS:\n        instance.go()\n        if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===、=>\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        else {\n          // 一个等号要报错\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n          }\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.code > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorInfo: any | void,\n\n    lastOperator: string | void,\n\n    lastOperatorInfo: any | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorInfo = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorInfo = interpreter.binary[lastOperator])\n            && lastOperatorInfo.prec >= operatorInfo.prec\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(index, `三元表达式谁教你这样写的？`)\n        }\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(index, `大兄弟，我怀疑你表达式写错了吧？`)\n        }\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from 'yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as env from 'yox-common/src/util/env'\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, modifier?: string, value?: string | number, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    name,\n    modifier,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: number, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(expr: ExpressionNode, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    expr,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from 'yox-config/index'\n\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 缓存编译模板\nconst compileCache = {},\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和  lazy-click\ndirectiveSeparator = '-',\n\n// 分割符，即 {{ xx }} 和 {{{ xx }}}\nblockPattern = /(\\{?\\{\\{)\\s*([^\\}]+?)\\s*(\\}\\}\\}?)/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 属性的 name\nattributePattern = /^\\s*([-:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\n/**\n * trim 文本开始和结束位置的换行符\n *\n * 换行符比较神奇，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\n *\n */\nfunction trimBreakline(content: string): string {\n  return content.replace(\n    /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n    env.EMPTY_STRING\n  )\n}\n\nexport function compile(content: string): Node[] {\n\n  let nodeList: Node[] = compileCache[content]\n  if (nodeList) {\n    return nodeList\n  }\n\n  nodeList = []\n\n  let nodeStack: Node[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  // 干掉 html 注释\n  str = content.replace(\n    /<!--[\\s\\S]*?-->/g,\n    env.EMPTY_STRING\n  ),\n\n  startQuote: string | void,\n\n  length: number | void,\n\n  isSafeBlock = env.FALSE,\n\n  nextIsBlock = env.FALSE,\n\n  match: RegExpMatchArray | null,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode\n      && lastNode.type === nodeType.ELEMENT\n      && lastNode.tag !== popingTagName\n      && array.has(selfClosingTagNames, lastNode.tag)\n    ) {\n      popStack(lastNode.type, lastNode.tag)\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node: Branch = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch: Branch = array.last(nodeStack)\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex\n          && (node.isComplex || isElement)\n        ) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'dev') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n        // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n        // 1. 很难做性能优化\n        // 2. 全局搜索不到事件名，不利于代码维护\n        // 3. 不利于编译成静态函数\n        if (process.env.NODE_ENV === 'dev') {\n          if (isDirective) {\n            fatal(`指令的值不能用插值或 if 语法`)\n          }\n        }\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`出栈节点类型不匹配`)\n      }\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child\n\n    // lazy 不需要编译表达式\n    // 因为 lazy 的值必须是大于 0 的数字\n    if (directive.name === config.DIRECTIVE_LAZY) {\n      if (is.numeric(text)) {\n        const value = toNumber(text)\n        if (value > 0) {\n          directive.value = value\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal(`lazy 指令的值 [${text}] 必须大于 0`)\n          }\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`lazy 指令的值 [${text}] 必须是数字`)\n        }\n      }\n    }\n    else {\n\n      // 指令的值是纯文本，可以预编译表达式，提升性能\n      const expr = exprCompiler.compile(text),\n\n      // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n      isModel = directive.name === config.DIRECTIVE_MODEL,\n\n      // on-click=\"xx\" on-click=\"method()\" 值只能是标识符或函数调用\n      isEvent = directive.name === config.DIRECTIVE_EVENT\n\n      if (expr) {\n\n        if (process.env.NODE_ENV === 'dev') {\n          // 如果指令表达式是函数调用，则只能调用方法（难道还有别的好调用的吗？）\n          if (expr.type === exprNodeType.CALL) {\n            const { callee } = expr as ExpressionCall\n            if (callee.type !== exprNodeType.IDENTIFIER) {\n              fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n            }\n          }\n          // 上面检测过方法调用，接下来事件指令只需要判断是否是标识符\n          else if (isEvent && expr.type !== exprNodeType.IDENTIFIER) {\n            fatal('事件指令的表达式只能是 标识符 或 函数调用')\n          }\n\n          if (isModel && !expr[env.RAW_STATIC_KEYPATH]) {\n            fatal(`model 指令的值格式错误: [${expr.raw}]`)\n          }\n        }\n\n        directive.expr = expr\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (isModel || isEvent) {\n            fatal(`${directive.name} 指令的表达式错误: [${text}]`)\n          }\n        }\n      }\n\n      directive.value = text\n\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    // 变成一维数组，方便遍历\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      const isTemplate = element.tag === env.RAW_TEMPLATE\n\n      if (element.slot) {\n        if (!isTemplate) {\n          fatal(`slot 属性只能用于 <template>`)\n        }\n        else if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (element.attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n      }\n      else if (isTemplate) {\n        fatal(`<template> 不写 slot 属性是几个意思？`)\n      }\n      else if (element.tag === env.RAW_SLOT && !element.name) {\n        fatal(`<slot> 不写 name 属性是几个意思？`)\n      }\n    }\n\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'dev') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch: Branch | void = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch: Branch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('大哥，else 后面不能跟 else if 啊')\n          }\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('大哥，只能写一个 else 啊！！')\n          }\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal('不写 if 是几个意思？？')\n        }\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n    text = trimBreakline(text)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'dev') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !lastNode.isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'dev') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name)\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = name.toLowerCase()\n\n              // <slot> 或 <template> 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag]) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (nextIsBlock) {\n          text = content\n          addTextChild(text)\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal(`${currentAttribute.name} 没有找到结束引号`)\n          }\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        text = match && match.index as number > 0\n          ? string.slice(content, 0, match.index)\n          : content\n\n        addTextChild(text)\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const expr = exprCompiler.compile(string.trim(terms[0]))\n          if (expr) {\n            if (!currentElement) {\n              return creator.createEach(\n                expr,\n                string.trim(terms[1])\n              )\n            }\n            else {\n              if (process.env.NODE_ENV === 'dev') {\n                fatal(\n                  currentAttribute\n                    ? `each 不能写在属性的值里`\n                    : `each 不能写在属性层级`\n                )\n              }\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(\n                currentAttribute\n                  ? `import 不能写在属性的值里`\n                  : `import 不能写在属性层级`\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(\n                currentAttribute\n                  ? `partial 不能写在属性的值里`\n                  : `partial 不能写在属性层级`\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              is.string(expr[env.RAW_STATIC_KEYPATH])\n                ? env.TRUE\n                : env.FALSE\n            )\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(`延展属性只能用于组件属性`)\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, isSafeBlock)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (content: string) {\n    let tpl = content\n    while (tpl) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(tpl)\n          if (match) {\n            tpl = string.slice(tpl, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n    str = string.slice(str, content.length)\n  },\n\n  parseBlock = function (content: string, all: string) {\n    if (content) {\n      // 结束当前 block\n      // 正则会去掉 {{ xx }} 里面两侧的空白符，因此如果有 /，一定是第一个字符\n      if (string.charAt(content) === '/') {\n\n        /**\n         * 处理可能存在的自闭合元素，如下\n         *\n         * {{#if xx}}\n         *    <input>\n         * {{/if}}\n         */\n        popSelfClosingElementIfNeeded()\n\n        const name = string.slice(content, 1)\n\n        let type = helper.name2Type[name], isCondition: boolean | void\n        if (type === nodeType.IF) {\n          const node = array.pop(ifStack)\n          if (node) {\n            type = node.type\n            isCondition = env.TRUE\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(`if 还没开始就结束了？`)\n            }\n          }\n        }\n\n        const node: any = popStack(type)\n        if (node && isCondition) {\n          checkCondition(node)\n        }\n      }\n      else {\n        // 开始下一个 block 或表达式\n        array.each(\n          blockParsers,\n          function (parse) {\n            const node = parse(content)\n            if (node) {\n              addChild(node)\n              return env.FALSE\n            }\n          }\n        )\n      }\n    }\n    str = string.slice(str, all.length)\n  }\n\n  while (str) {\n    // 匹配 {{ }}\n    match = str.match(blockPattern)\n    if (match) {\n\n      nextIsBlock = env.TRUE\n\n      // 裁剪开头到 {{ 之间的模板内容\n      if (match.index as number > 0) {\n        parseHtml(\n          string.slice(str, 0, match.index)\n        )\n      }\n\n      // 获取开始分隔符的长度，用于判断是否是安全输出\n      length = match[1].length\n\n      // 避免手误写成 {{{ name }} 或 {{ name }}}\n      if (length === match[3].length) {\n        isSafeBlock = length === 2\n        parseBlock(match[2], match[0])\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`${match[1]} and ${match[3]} is not a pair.`)\n        }\n      }\n\n    }\n    else {\n      nextIsBlock = env.FALSE\n      parseHtml(str)\n    }\n  }\n\n  return compileCache[content] = nodeList\n\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds\n      ? elementChilds\n      : env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport invoke from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.LITERAL] = function (node: Literal): any {\n  return node.value\n}\n\nnodeExecutor[nodeType.IDENTIFIER] = function (node: Identifier, getter: (keypath: string, node: Keypath) => any): any {\n  return getter(node.name, node)\n}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let { props, staticKeypath } = node, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.unary[node.operator].exec(\n    execute(node.arg, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.binary[node.operator].exec(\n    execute(node.left, getter, context),\n    execute(node.right, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return node.elements.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key, index) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return invoke(\n    execute(node.callee, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Event from 'yox-common/src/util/Event'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport Keypath from 'yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from 'yox-expression-compiler/src/executor'\n\nimport * as signature from 'yox-type/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\n\nimport * as nodeType from './nodeType'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const map = target[name] || (target[name] = {})\n  map[key] = value\n}\n\nexport function render(\n  context: Yox,\n  filters: Record<string, Function>,\n  partials: Record<string, Function | void>,\n  directives: Record<string, DirectiveHooks | void>,\n  transitions: Record<string, TransitionHooks | void>,\n  template: Function\n) {\n\n  let $keypath = env.EMPTY_STRING,\n\n  $scope: Record<string, any> = { $keypath },\n\n  $stack = [$keypath, $scope],\n\n  eventScope: Record<string, any> | void,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let keypath = keypathUtil.join(stack[index], key),\n\n    scope = stack[index + 1]\n\n    node.absoluteKeypath = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    if (eventScope && object.has(eventScope, key)) {\n      return eventScope[key]\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 keypath\n    if (object.has(scope, key)) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (object.has(scope, '$item')) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope && object.has(scope, key)) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    let result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 1) {\n        index -= 2\n        return lookup(stack, index, key, node, depIgnore, defaultKeypath)\n      }\n      result = object.get(filters, key)\n      if (!result) {\n        node.absoluteKeypath = defaultKeypath\n        logger.warn(`data [${node.raw}] is not found.`)\n        return\n      }\n      result = result.value\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - 2 * ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: any, attr: Record<string, any>): any {\n\n    const { expr } = attr,\n\n    value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, attr.name),\n\n    hooks = directives[config.DIRECTIVE_BINDING]\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns: config.DIRECTIVE_BINDING,\n          name: attr.name,\n          key,\n          hooks,\n          binding: expr.absoluteKeypath,\n          hint: attr.hint,\n        }\n      )\n    }\n\n    return value\n\n  },\n\n  spreadObject = function (vnode: any, attr: Record<string, any>) {\n\n    let { expr } = attr,\n\n    value = getValue(expr, attr.binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair(vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr[env.RAW_ABSOLUTE_KEYPATH]\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath),\n        hooks = directives[config.DIRECTIVE_BINDING]\n        if (hooks) {\n          setPair(\n            vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks,\n              binding: keypathUtil.join(absoluteKeypath, '*'),\n            }\n          )\n        }\n      }\n\n    }\n    else {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n  },\n\n  addDirective = function (vnode: any, attr: Record<string, any>) {\n\n    let { ns, name, value } = attr,\n\n    key = keypathUtil.join(ns, name),\n\n    binding: string | void,\n\n    hooks: DirectiveHooks | void,\n\n    getter: signature.directiveGetter | void,\n\n    handler: signature.directiveHandler | signature.eventListener | void,\n\n    transition: TransitionHooks | void\n\n    switch (ns) {\n\n      case config.DIRECTIVE_EVENT:\n        hooks = directives[config.DIRECTIVE_EVENT]\n        handler = attr.event\n          ? createEventListener(attr.event)\n          : createMethodListener(attr.method, attr.args, $stack)\n        break\n\n      case env.RAW_TRANSITION:\n        transition = transitions[value]\n        if (transition) {\n          vnode.transition = transition\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`transition [${value}] is not found.`)\n          }\n        }\n        return\n\n      case config.DIRECTIVE_MODEL:\n        hooks = directives[config.DIRECTIVE_MODEL]\n        vnode.model = getValue(attr.expr, env.TRUE)\n        binding = attr.expr.absoluteKeypath\n        break\n\n      case config.DIRECTIVE_LAZY:\n        setPair(vnode, 'lazy', name, value)\n        return\n\n      default:\n        hooks = directives[name]\n        if (attr.method) {\n          handler = createMethodListener(attr.method, attr.args, $stack)\n        }\n        else if (attr.getter) {\n          getter = createGetter(attr.getter, $stack)\n        }\n        break\n\n    }\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns,\n          name,\n          key,\n          value,\n          binding,\n          hooks,\n          getter,\n          handler\n        }\n      )\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`directive [${key}] is not found.`)\n      }\n    }\n\n  },\n\n  createEventListener = function (type: string): signature.eventListener {\n    return function (event: Event, data?: Record<string, any>) {\n      if (event.type !== type) {\n        event = new Event(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    method: string,\n    args: Function | void,\n    stack: any[]\n  ): signature.directiveHandler {\n    return function (event?: Event, data?: Record<string, any>) {\n\n      const callee = context[method]\n\n      if (event instanceof Event) {\n\n        let result: any | void\n\n        if (args) {\n          // 给当前 scope 加上 event 和 data\n          eventScope = {\n            $event: event,\n            $data: data,\n          }\n          result = execute(callee, context, args(stack))\n          // 阅后即焚\n          eventScope = env.UNDEFINED\n        }\n        else {\n          result = execute(callee, context, data ? [event, data] : event)\n        }\n\n        if (result === env.FALSE) {\n          event.prevent().stop()\n        }\n      }\n      else {\n        execute(\n          callee,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): signature.directiveGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        lastVnode.text += text\n      }\n      else {\n        array.push(\n          vnodeList,\n          {\n            isText: env.TRUE,\n            text,\n            context,\n            keypath: $keypath,\n          }\n        )\n      }\n    }\n  },\n\n  renderElementVnode = function (\n    vnode: Record<string, any>,\n    attrs: any[] | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (attrs) {\n      array.each(\n        attrs,\n        function (attr: any) {\n\n          let { name, value } = attr\n\n          switch (attr.type) {\n\n            case nodeType.ATTRIBUTE:\n\n              if (attr.binding) {\n                value = addBinding(vnode, attr)\n              }\n\n              if (vnode.isComponent) {\n                setPair(vnode, 'props', name, value)\n              }\n              else {\n                setPair(vnode, 'nativeAttrs', name, { name, value })\n              }\n\n              break\n\n            case nodeType.PROPERTY:\n              setPair(\n                vnode,\n                'nativeProps',\n                name,\n                {\n                  name,\n                  value: attr.binding ? addBinding(vnode, attr) : value,\n                  hint: attr.hint,\n                }\n              )\n              break\n\n            case nodeType.DIRECTIVE:\n              addDirective(vnode, attr)\n              break\n\n            case nodeType.SPREAD:\n              spreadObject(vnode, attr)\n              break\n\n          }\n        }\n      )\n      // 确保有 directives 就必然有 lazy\n      if (vnode.directives && !vnode.lazy) {\n        vnode.lazy = env.EMPTY_OBJECT\n      }\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack), vnodes = context.get(name)\n\n    if (vnodes) {\n      array.each(\n        vnodes,\n        function (vnode: any) {\n          array.push(vnodeList, vnode)\n          vnode.parent = context\n        }\n      )\n    }\n    else if (defaultRender) {\n      defaultRender()\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n      return\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n        return\n      }\n    }\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`partial [${name}] is not found.`)\n    }\n  },\n\n  renderEach = function (expr: ExpressionNode, index: string | Function | void, handler?: Function) {\n\n    let eachIndex: string | void, eachHandler: Function\n\n    if (is.func(index)) {\n      eachHandler = index as Function\n      eachIndex = env.UNDEFINED\n    }\n    else {\n      eachHandler = handler as Function\n      eachIndex = index as string\n    }\n\n    const value = getValue(expr),\n\n    exprKeypath = expr[env.RAW_ABSOLUTE_KEYPATH],\n\n    eachKeypath = exprKeypath || keypathUtil.join($keypath, expr.raw),\n\n    callback = function (item: any, key: string | number) {\n\n      let lastKeypath = $keypath, lastScope = $scope, lastKeypathStack = $stack\n\n      $keypath = keypathUtil.join(eachKeypath, key)\n      $scope = {}\n      $stack = object.copy($stack)\n\n      array.push($stack, $keypath)\n      array.push($stack, $scope)\n\n      // 从下面这几句赋值可以看出\n      // scope 至少会有 '$keypath' '$item' eachIndex 等几个值\n      $scope.$keypath = $keypath\n\n      // 类似 {{#each 1 -> 10}} 这样的临时循环，需要在 scope 上加上当前项\n      // 因为通过 context.get() 无法获取数据\n      if (!exprKeypath) {\n        $scope.$item = item\n      }\n\n      if (eachIndex) {\n        $scope[eachIndex] = key\n      }\n\n      eachHandler(item, key)\n\n      $keypath = lastKeypath\n      $scope = lastScope\n      $stack = lastKeypathStack\n\n    }\n\n    if (is.array(value)) {\n      array.each(value, callback)\n    }\n    else if (is.object(value)) {\n      object.each(value, callback)\n    }\n    else if (is.func(value)) {\n      value(callback)\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, 'value')) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      'length',\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string | number, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      'length',\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string | number, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// textContent 不兼容 IE 678\ninnerText = 'textContent',\n\naddEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\nremoveEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\naddClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nremoveClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nfindElement: (selector: string) => Element | void = env.EMPTY_FUNCTION\n\nif (doc) {\n  if (isUndef(doc.body[innerText])) {\n    innerText = 'innerText'\n  }\n  if (doc.addEventListener) {\n    addEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.addEventListener(type, listener, env.FALSE)\n    }\n    removeEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.removeEventListener(type, listener, env.FALSE)\n    }\n  }\n  else {\n    addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.attachEvent(`on${type}`, listener)\n    }\n    removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.detachEvent(`on${type}`, listener)\n    }\n  }\n  if (doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      node.classList.add(className)\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      node.classList.remove(className)\n    }\n  }\n  else {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n  if (doc.querySelector) {\n    findElement = function (selector: string): Element | void {\n      const node = (doc as Document).querySelector(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n  else {\n    findElement = function (selector: string): Element | void {\n      // 去掉 #\n      if (string.codeAt(selector, 0) === 35) {\n        selector = string.slice(selector, 1)\n      }\n      const node = (doc as Document).getElementById(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 输入事件\n */\nINPUT = 'input',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  createEvent(event: any, node: HTMLElement): any {\n    return event\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string): string | void {\n    if (isDef(text)) {\n      node[innerText] = text as string\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string): string | void {\n    if (isDef(html)) {\n      node.innerHTML = html as string\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, domApi.createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = INPUT\n      listener(event)\n    })\n    addEventListener(node, INPUT, listener[INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, INPUT, listener[INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: number\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = 0\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const INPUT = 'input'\n\n/**\n * 表单控件的修改事件\n */\nexport const CHANGE = 'change'\n\n/**\n * IE 模拟输入事件的特殊事件\n */\nexport const PROPERTY_CHANGE = 'propertychange'\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\nimport * as event from '../config/event'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([event.CLICK, event.TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = event.CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as config from 'yox-config/index'\nimport api from 'yox-dom/index'\n\nimport * as event from '../config/event'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\n\nfunction getOptionValue(option: HTMLOptionElement) {\n  return isDef(option.value)\n    ? option.value\n    : option.text\n}\n\ninterface Control {\n\n  set(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  sync(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nconst syncWatcherOptions = { sync: env.TRUE },\n\ninputControl: Control = {\n  set(input: HTMLInputElement, keypath: string, context: Yox) {\n    input.value = toString(context.get(keypath))\n  },\n  sync(input: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, input.value)\n  },\n  name: 'value'\n},\n\nselectControl: Control = {\n  set(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    array.each(\n      array.toArray(select.options),\n      select.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, getOptionValue(option), env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (getOptionValue(option) == value) {\n            select.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const options = array.toArray(select.options)\n    if (select.multiple) {\n      const values = []\n      array.each(\n        options,\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              getOptionValue(option)\n            )\n          }\n        }\n      )\n      // 如果新旧值都是 []，set 没有意义\n      if (!array.falsy(values) || !array.falsy(context.get(keypath))) {\n        context.set(keypath, values)\n      }\n    }\n    else {\n      context.set(\n        keypath,\n        getOptionValue(\n          options[select.selectedIndex]\n        )\n      )\n    }\n  },\n  name: 'value'\n},\n\nradioControl: Control = {\n  set(radio: HTMLInputElement, keypath: string, context: Yox) {\n    radio.checked = radio.value === toString(context.get(keypath))\n  },\n  sync(radio: HTMLInputElement, keypath: string, context: Yox) {\n    if (radio.checked) {\n      context.set(keypath, radio.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: Control = {\n  set(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    checkbox.checked = is.array(value)\n      ? array.has(value, checkbox.value, env.FALSE)\n      : (is.boolean(value) ? value : !!value)\n  },\n  sync(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (checkbox.checked) {\n        context.append(keypath, checkbox.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, checkbox.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, checkbox.checked)\n    }\n  },\n  name: 'checked'\n},\n\ncomponentControl: Control = {\n  set(component: Yox, keypath: string, context: Yox) {\n    component.set(\n      component.$model,\n      context.get(keypath)\n    )\n  },\n  sync(component: Yox, keypath: string, context: Yox) {\n    context.set(\n      keypath,\n      component.get(component.$model)\n    )\n  },\n  name: 'value'\n},\n\nspecialControls = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n  select: selectControl,\n},\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { binding } = directive,\n\n    { context, nativeProps } = vnode,\n\n    lazy = vnode.lazy[config.DIRECTIVE_MODEL] || vnode.lazy[env.EMPTY_STRING],\n\n    set = function () {\n      if (!isSyncing) {\n        control.set(component || element, binding as string, context)\n      }\n    },\n\n    sync = function () {\n      isSyncing = env.TRUE\n      control.sync(component || element, binding as string, context)\n      isSyncing = env.FALSE\n    },\n\n    isSyncing = env.FALSE,\n\n    component: Yox,\n\n    element: HTMLElement,\n\n    control: Control,\n\n    type: string\n\n    if (lazy && lazy !== env.TRUE) {\n      sync = debounce(sync, lazy)\n    }\n\n    if (vnode.isComponent) {\n\n      component = node as Yox\n      control = componentControl\n\n      // 监听交互，修改数据\n      component.watch(component.$model, sync)\n\n    }\n    else {\n\n      element = node as HTMLElement\n      control = specialControls[element['type']] || specialControls[api.tag(element) as string]\n\n      // checkbox,radio,select 监听的是 change 事件\n      type = event.CHANGE\n\n      // 如果是输入框，则切换成 input 事件\n      if (!control) {\n        control = inputControl\n        if (lazy !== env.TRUE) {\n          type = event.INPUT\n        }\n      }\n\n      // 如果模板里没写对应的属性，则这里先设值\n      if (!nativeProps || !object.has(nativeProps, control.name)) {\n        set()\n      }\n\n      // 监听交互，修改数据\n      api.on(element, type, sync)\n\n    }\n\n    // 监听数据，修改界面\n    // 这里使用同步监听，这样才能使 isSyncing 生效\n    context.watch(binding as string, set, syncWatcherOptions)\n\n    vnode.data[directive.key] = function () {\n      if (vnode.isComponent) {\n        component.unwatch(component.$model, sync)\n      }\n      else {\n        api.off(element, type, sync)\n      }\n      context.unwatch(binding as string, set)\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\n\nimport api from 'yox-dom/index'\n\nconst directive: DirectiveHooks = {\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    const { binding } = directive\n\n    if (binding) {\n\n      const isFuzzy = keypathUtil.isFuzzy(binding),\n\n      watcher = function (newValue: any, oldValue: any, keypath: string) {\n\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          (node as Yox).set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n\n      }\n\n      vnode.context.watch(binding, watcher)\n\n      vnode.data[directive.key] = function () {\n        vnode.context.unwatch(binding, watcher)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import * as config from 'yox-config/index'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  if (process.env.NODE_ENV === 'dev') {\n    logger.warn('hasSlot 过滤器已不建议使用')\n  }\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = '1.0.0-alpha'\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[ config.HOOK_BEFORE_CREATE ], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n            }\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"el\" option 格式错误`)\n            }\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`\"${name}\" method is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[ config.HOOK_AFTER_CREATE ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (placeholder) {\n            logger.fatal('有 el 没 template 是几个意思？')\n          }\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[ config.HOOK_BEFORE_UPDATE ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[ config.HOOK_BEFORE_MOUNT ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || 'value'\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[ config.HOOK_BEFORE_DESTROY ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        delete instance.$vnode\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[ config.HOOK_AFTER_DESTROY ], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","RAW_KEY","RAW_REF","RAW_TAG","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_THIS","RAW_FUNCTION","RAW_TEMPLATE","RAW_STATIC_KEYPATH","RAW_ABSOLUTE_KEYPATH","KEYPATH_PARENT","KEYPATH_CURRENT","win","window","doc","document","EMPTY_FUNCTION","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","originalEvent","this","CustomEvent","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toArray","execute","slice","toObject","key","result","indexOf","strict","index","has","last","pop","remove","splice","falsy","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","camelize","str","replace","$0","$1","toUpperCase","hyphenate","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","is.string","defaultValue","SEPARATOR","patternCache","match","keypath","prefix","string.startsWith","string.falsy","startIndex","endIndex","string.indexOf","string.slice","formatKeypath","keypath1","keypath2","isFuzzy","string.has","matchFuzzy","pattern","cache","RegExp","keys","is.object","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","_i","objects","array.each","copy","deep","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","nativeConsole","console","env.RAW_UNDEFINED","useSource","test","env.EMPTY_FUNCTION","isDebug","env.win","debug","is.boolean","log","msg","warn","error","fatal","Error","nextTick","ns","listeners","Emitter","bullet","data","filter","event","instance","_a","name","list","isComplete","object.copy","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","matchListener","createMatchListener","object.each","addListener","object.extend","array.push","ns_1","matchListener_1","parseNamespace","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","nextTasks","NextTask","task","array.unshift","run","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","bind","unbind","node_2","ref","props","slots","isComponent","checkPropTypes","refs","$refs","isPatchable","tag","createKeyToIndex","vnodes","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","create","$el","field.LOADING","component.update","directive.update","guid","createData","field.ID","createVnode","isComment","isText","children","text","html","createText","createComment","isAsync_1","component","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","removeVnodes","removeVnode","component_2","done","destroyVnode","leaveVnode","$vnode","component_3","directive.remove","destroy","transition","field.LEAVING","leave","updateChildren","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","patch","next","oldText","oldHtml","isRemove","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createArray","elements","raw","nodeType.ARRAY","createBinary","left","operator","right","nodeType.BINARY","createCall","callee","nodeType.CALL","createIdentifierInner","lookup","staticKeypath","nodeType.IDENTIFIER","createMemberInner","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createObject","values","nodeType.OBJECT","createTernary","yes","no","nodeType.TERNARY","createUnary","arg","nodeType.UNARY","getLiteralNode","nodes","createMemberIfNeeded","literal","identifier","keypathUtil.join","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","->","=>","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","creator.createArray","scanTuple","CODE_CBRACK","pick","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","creator.createUnary","isNumber","endCode","loop","CODE_BACKSLASH","Function","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","creator.createObject","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createCall","creator.createMemberIfNeeded","object.has","keywordLiterals","CODE_PLUS","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_MINUS","CODE_GREAT","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","token","operatorInfo","lastOperator","lastOperatorInfo","output","scanToken","interpreter.binary","creator.createBinary","scanBinary","CODE_QUESTION","creator.createTernary","message","env.RAW_TRUE","env.RAW_FALSE","env.RAW_NULL","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","env.RAW_KEY","env.RAW_REF","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","expr","nodeType.DIRECTIVE","createProperty","nodeType.PROPERTY","createEach","isComplex","isSvg","nodeType.ELEMENT","createElse","nodeType.ELSE","createElseIf","nodeType.ELSE_IF","createExpression","safe","nodeType.EXPRESSION","isLeaf","createIf","createImport","nodeType.IMPORT","createPartial","createSpread","binding","nodeType.SPREAD","nodeType.TEXT","compileCache","directiveSeparator","blockPattern","tagPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","split","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","trimBreakline","nodeList","currentElement","currentAttribute","startQuote","nodeStack","ifStack","isSafeBlock","nextIsBlock","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","isSpecialAttr","bindSpecialAttr","element","slot","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","env.RAW_STATIC_KEYPATH","config.DIRECTIVE_LAZY","exprCompiler.compile","partial","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","attrs","array.indexOf","addChild","prev","stub","addTextChild","creator.createText","htmlParsers","match_1","creator.createElement","match_2","config.DIRECTIVE_MODEL","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","config.DIRECTIVE_EVENT","lazy","config.DIRECTIVE_CUSTOM","custom","creator.createAttribute","lowerName","helper.specialTags","creator.createProperty","config.HINT_STRING","blockParsers","source","config.SYNTAX_EACH","terms","creator.createEach","config.SYNTAX_IMPORT","creator.createImport","config.SYNTAX_PARTIAL","creator.createPartial","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","creator.createElse","config.SYNTAX_SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","tpl","parse","parseBlock","all","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","JSON","stringify","isStringRequired","joinStack","collectStack","nodeStringify","RENDER_SLOT","RENDER_EACH","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_EXPRESSION_VNODE","RENDER_TEXT_VNODE","RENDER_ELEMENT_VNODE","RENDER_PARTIAL","RENDER_IMPORT","ARG_CONTEXT","SEP_COMMA","SEP_COLON","SEP_PLUS","STRING_TRUE","STRING_FALSE","STRING_EMPTY","toJSON","CODE_RETURN","CODE_PREFIX","array.join","CODE_SUFFIX","stringifyObject","obj","fields","stringifyArray","arr","stringifyCall","stringifyFunction","stringifyGroup","stringifyExpression","renderName","extra","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","map","stringifyConditionChildren","stringifyIf","renderElement","trimArgs","removable","childs","getComponentSlots","addSlot","array.falsy","config.SLOT_DATA_PREFIX","object.falsy","hasStringify","elementChilds","elementSlots","elementAttrs","exprNodeType.CALL","method","exprNodeType.LITERAL","getter","isUndef","nodeExecutor","setPair","render","filters","partials","transitions","template","eventScope","$keypath","$scope","$stack","vnodeStack","localPartials","stack","depIgnore","defaultKeypath","scope","absoluteKeypath","$item","object.get","logger.warn","getValue","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","hooks","createEventListener","Event","fire","createMethodListener","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","lastVnode","renderElementVnode","handler","model","addDirective","env.RAW_ABSOLUTE_KEYPATH","spreadObject","renderSlots_1","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachIndex","eachHandler","exprKeypath","eachKeypath","lastKeypath","lastScope","lastKeypathStack","first","len","invoke","syncWatcherOptions","sync","asyncWatcherOptions","deps","observer","setter","unique","$2","oldValue","newValue","diff","fixed","dep","add","Computed","env.EMPTY_ARRAY","force","lastComputed","current","watch","unwatch","sorted","keypathUtil.match","newIsString","oldIsString","newIsArray","oldIsArray","newLength","oldLength","Math","newIsObject","oldIsObject","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","diffString","diffArray","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","immediate","nextTask","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","diffWatcher","pending","diffAsync","filterWatcher","build","object.sort","once","emitter","on","formatWatcherOptions","min","insert","array.remove","object.clear","env.doc","innerText","addEventListener","removeEventListener","addClass","removeClass","findElement","body","attachEvent","detachEvent","classList","className","classes","CHAR_WHITESPACE","querySelector","selector","getElementById","EMITTER","INPUT","COMPOSITION_START","COMPOSITION_END","domain","namespaces","svg","specialEvents","domApi","createElementNS","createTextNode","createEvent","setAttribute","value_1","getAttribute","removeAttribute","appendChild","removeChild","nextSibling","find","nodeType","innerHTML","nativeListeners","special","nativeListener","delay","timer","args_1","array.toArray","arguments","locked","TAP","CLICK","CHANGE","immediateTypes","array.toObject","event.CLICK","event.TAP","event.CHANGE","debounce","el_1","getOptionValue","option","inputControl","input","selectControl","select","multiple","selected","selectedIndex","values_1","radioControl","radio","checked","checkboxControl","checkbox","removeAt","componentControl","$model","specialControls","control","isSyncing","event.INPUT","isFuzzy_1","watcher_1","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","el","components","events","methods","watchers","extensions","$observer","addComputed","$emitter","placeholder","$parent","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","config.HOOK_AFTER_CREATE","$template","Yox","snabbdom.create","prepend","plugin","install","templateStringify.hasStringify","templateStringify.stringify","templateCompiler.compile","getResource","setResource","getComponentAsync","propTypes","rule","matched_1","required","actual","t","is.is","removeComputed","downward","eventData","$children","watcherOptions","$directives","$transitions","$components","$partials","$filters","templateRender.render","mergeResource","hook_1","instance_1","config.HOOK_BEFORE_UPDATE","snabbdom.patch","config.HOOK_AFTER_UPDATE","config.HOOK_BEFORE_MOUNT","config.HOOK_AFTER_MOUNT","model_1","config.HOOK_BEFORE_DESTROY","snabbdom.destroy","config.HOOK_AFTER_DESTROY","toggle","increase","decrease","logger","$queue_1","$queue","replacement","formatValue","locals","globals","hasSlot"],"mappings":"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"}