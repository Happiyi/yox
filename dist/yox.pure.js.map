{"version":3,"file":"yox.pure.js","sources":["../node_modules/yox-common/src/util/env.ts","../node_modules/yox-common/src/function/isDef.ts","../node_modules/yox-common/src/util/is.ts","../node_modules/yox-common/src/function/execute.ts","../node_modules/yox-common/src/util/Event.ts","../node_modules/yox-common/src/util/array.ts","../node_modules/yox-common/src/util/string.ts","../node_modules/yox-common/src/function/toString.ts","../node_modules/yox-common/src/util/keypath.ts","../node_modules/yox-common/src/util/object.ts","../node_modules/yox-common/src/util/logger.ts","../node_modules/yox-common/src/util/Emitter.ts","../node_modules/yox-common/src/function/isNative.ts","../node_modules/yox-common/src/function/nextTick.ts","../node_modules/yox-common/src/util/NextTask.ts","../node_modules/yox-config/index.ts","../node_modules/yox-common/src/function/toNumber.ts","../node_modules/yox-common/src/function/toJSON.ts","../node_modules/yox-template-compiler/src/stringify.ts","../node_modules/yox-observer/src/Computed.ts","../node_modules/yox-observer/src/function/matchBest.ts","../node_modules/yox-observer/src/function/readValue.ts","../node_modules/yox-observer/src/function/diffRecursion.ts","../node_modules/yox-observer/src/function/diffString.ts","../node_modules/yox-observer/src/function/diffArray.ts","../node_modules/yox-observer/src/function/diffObject.ts","../node_modules/yox-observer/src/function/diffWatcher.ts","../node_modules/yox-observer/src/function/filterWatcher.ts","../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../node_modules/yox-observer/src/Observer.ts","../node_modules/yox-dom/index.ts","../node_modules/yox-common/src/function/isUndef.ts","../src/directive/event.ts","../src/config/event.ts","../src/Yox.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport function EMPTY_FUNCTION() {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || plain` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 dom 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from '../util/env'\n\nexport default function (target: any, defaultValue = env.EMPTY_STRING): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : defaultValue\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\nimport toString from '../function/toString'\n\nconst SEPARATOR = '.', patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: any, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  if (string.falsy(keypath)) {\n    callback(\n      keypath,\n      env.TRUE\n    )\n  }\n  else {\n    let startIndex = 0, endIndex = 0\n    while (env.TRUE) {\n      endIndex = string.indexOf(keypath, SEPARATOR, startIndex)\n      if (endIndex > 0) {\n        if (\n          callback(\n            string.slice(keypath, startIndex, endIndex),\n            env.FALSE\n          ) === env.FALSE\n        ) {\n          break\n        }\n        startIndex = endIndex + 1\n      }\n      else {\n        callback(\n          string.slice(keypath, startIndex),\n          env.TRUE\n        )\n        break\n      }\n    }\n  }\n}\n\n\nfunction formatKeypath(keypath: any): string {\n  return is.string(keypath)\n    ? keypath\n    : is.number(keypath)\n      ? toString(keypath)\n      : env.EMPTY_STRING\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: any, keypath2: any): string {\n\n  keypath1 = formatKeypath(keypath1)\n  keypath2 = formatKeypath(keypath2)\n\n  return keypath1 === env.EMPTY_STRING\n    ? keypath2\n    : keypath2 !== env.EMPTY_STRING\n      ? keypath1 + SEPARATOR + keypath2\n      : keypath1\n\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string | number): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string | number, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`绑定的事件已被全部移除`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    let channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","import * as is from '../util/is'\n\nexport default function (target: any, defaultValue = 0): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds\n      ? elementChilds\n      : env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, 'value')) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string | number, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      'length',\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string | number, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      'length',\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// textContent 不兼容 IE 678\ninnerText = 'textContent',\n\naddEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\nremoveEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\naddClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nremoveClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nfindElement: (selector: string) => Element | void = env.EMPTY_FUNCTION\n\nif (doc) {\n  if (isUndef(doc.body[innerText])) {\n    innerText = 'innerText'\n  }\n  if (doc.addEventListener) {\n    addEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.addEventListener(type, listener, env.FALSE)\n    }\n    removeEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.removeEventListener(type, listener, env.FALSE)\n    }\n  }\n  else {\n    addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.attachEvent(`on${type}`, listener)\n    }\n    removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.detachEvent(`on${type}`, listener)\n    }\n  }\n  if (doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      node.classList.add(className)\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      node.classList.remove(className)\n    }\n  }\n  else {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n  if (doc.querySelector) {\n    findElement = function (selector: string): Element | void {\n      const node = (doc as Document).querySelector(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n  else {\n    findElement = function (selector: string): Element | void {\n      // 去掉 #\n      if (string.codeAt(selector, 0) === 35) {\n        selector = string.slice(selector, 1)\n      }\n      const node = (doc as Document).getElementById(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 输入事件\n */\nINPUT = 'input',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  createEvent(event: any, node: HTMLElement): any {\n    return event\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string): string | void {\n    if (isDef(text)) {\n      node[innerText] = text as string\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string): string | void {\n    if (isDef(html)) {\n      node.innerHTML = html as string\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, domApi.createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = INPUT\n      listener(event)\n    })\n    addEventListener(node, INPUT, listener[INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, INPUT, listener[INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\nimport * as event from '../config/event'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([event.CLICK, event.TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = event.CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const INPUT = 'input'\n\n/**\n * 表单控件的修改事件\n */\nexport const CHANGE = 'change'\n\n/**\n * IE 模拟输入事件的特殊事件\n */\nexport const PROPERTY_CHANGE = 'propertychange'\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = '1.0.0-alpha'\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[ config.HOOK_BEFORE_CREATE ], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n            }\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"el\" option 格式错误`)\n            }\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`\"${name}\" method is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[ config.HOOK_AFTER_CREATE ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (placeholder) {\n            logger.fatal('有 el 没 template 是几个意思？')\n          }\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[ config.HOOK_BEFORE_UPDATE ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[ config.HOOK_BEFORE_MOUNT ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || 'value'\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[ config.HOOK_BEFORE_DESTROY ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        delete instance.$vnode\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[ config.HOOK_AFTER_DESTROY ], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_FUNCTION","win","window","doc","document","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","originalEvent","this","CustomEvent","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toObject","key","result","indexOf","strict","index","has","remove","splice","falsy","execute","slice","pop","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","str","start","end","is.number","env.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","is.string","replace","$0","$1","toUpperCase","trim","offset","charAt","defaultValue","SEPARATOR","patternCache","match","keypath","prefix","string.startsWith","string.falsy","startIndex","endIndex","string.indexOf","string.slice","formatKeypath","matchFuzzy","pattern","cache","RegExp","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","_i","objects","array.each","copy","deep","is.object","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","nativeConsole","console","useSource","test","isDebug","env.win","debug","is.boolean","warn","msg","log","error","Error","ns","listeners","Emitter","bullet","data","filter","event","instance","_a","name","list","isComplete","object.copy","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","matchListener","createMatchListener","object.each","addListener","object.extend","array.push","ns_1","matchListener_1","parseNamespace","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","nextTasks","NextTask","task","array.unshift","nextTick","run","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","is.numeric","JSON","stringify","array.join","syncWatcherOptions","sync","asyncWatcherOptions","deps","observer","getter","setter","unique","$2","oldValue","newValue","diff","fixed","array.falsy","dep","add","bind","Computed","env.EMPTY_ARRAY","force","object.has","unbind","lastComputed","current","watch","unwatch","sorted","keypathUtil.match","prop","source","object.get","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","keypath2","keypath1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","env.EMPTY_OBJECT","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","string.has","keypathUtil.isFuzzy","readValue","count","immediate","nextTask","syncEmitter","asyncEmitter","asyncChanges","Observer","depIgnore","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","string.codeAt","diffWatcher","fire","pending","append","diffAsync","filterWatcher","build","object.sort","once","emitter","on","formatWatcherOptions","step","toNumber","min","insert","array.remove","object.clear","env.doc","innerText","isUndef","body","addEventListener","classList","querySelector","array.toObject","$options","config.HOOK_BEFORE_CREATE","props","model","slots","events","methods","watchers","extensions","$model","checkPropTypes","logger.warn","$observer","addComputed","$emitter","method","config.HOOK_AFTER_CREATE","prepend","Yox","plugin","install","template","directive","transition","component","partial","propTypes","rule","matched_1","required","actual","t","is.is","removeComputed","downward","eventData","Event","$children","child","$parent","watcherOptions","vnode","oldVnode","node","destroy","toggle","increase","decrease","removeAt","logger"],"mappings":"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"}