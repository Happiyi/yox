{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/function/toJSON.ts","../../../../yox-template-compiler/src/stringify.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-expression-compiler/src/executor.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst SEP_DOT = '.',\n\ndotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEP_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(SEP_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + SEP_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Attribute from '../../yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Property from '../../yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from '../../yox-type/src/vnode/VNode'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, model, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      // 更新组件时，如果写了 <Component model=\"xx\"/>\n      // 必须把双向绑定的值写到 props 里，否则一旦 propTypes 加了默认值\n      // 传下去的数据就错了\n      if (isDef(model)) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model\n      }\n\n      const result = object.merge(props ? node.checkProps(props) : env.UNDEFINED, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as type from '../../yox-type/src/type'\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxOptions from '../../yox-type/src/options/Yox'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): type.data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import isDef from '../../yox-common/src/function/isDef'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(a: Node, op: string, b: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    a,\n    op,\n    b,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean | void, offset: number | void, sk: string | void): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    sk: isDef(sk) ? sk as string : name,\n  }\n}\n\nfunction createMemberInner(raw: string, props: Node[], lookup: boolean | void, offset: number, sk: string | void) {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    props,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    sk,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup: boolean | void, offset: number | void\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(op: string, a: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    op,\n    a,\n  }\n}\n\nfunction getLiteralNode(nodes: Node[], index: number): Literal | void {\n  if (nodes[index]\n    && nodes[index].type === nodeType.LITERAL\n  ) {\n    return nodes[index] as Literal\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: (Node | Identifier | Literal)[]): Node | Identifier | Member {\n\n  let { length } = nodes,\n\n  lookup: boolean | void,\n\n  offset = 0,\n\n  staticKeypath: string | void,\n\n  name = env.EMPTY_STRING,\n\n  list: (Node | Identifier | Literal)[] = [],\n\n  literal: Literal | void,\n\n  identifier: Identifier\n\n  if (length > 1) {\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n    if (nodes[0].type === nodeType.IDENTIFIER) {\n\n      identifier = nodes[0] as Identifier\n\n      name = identifier.name\n      lookup = identifier.lookup\n      staticKeypath = identifier.sk\n\n      if (identifier.offset > 0) {\n        offset += identifier.offset as number\n      }\n\n      if (name) {\n        array.push(list, identifier)\n      }\n\n      // 优化 1：计算 staticKeypath\n      //\n      // 计算 staticKeypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n      // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n      // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n      // 下面这段属于性能优化，避免在运行时反复计算 Member 的 keypath\n\n      // 优化 2：计算 offset 并智能转成 Identifier\n      //\n      // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n      for (let i = 1; i < length; i++) {\n        literal = getLiteralNode(nodes, i)\n        if (literal) {\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            continue\n          }\n          if (isDef(staticKeypath)\n            && literal.raw !== env.KEYPATH_CURRENT\n          ) {\n            staticKeypath = keypathUtil.join(staticKeypath as string, toString(literal.value))\n          }\n        }\n        else {\n          staticKeypath = env.UNDEFINED\n        }\n        array.push(list, nodes[i])\n      }\n\n      // 表示 nodes 中包含路径，并且路径节点被干掉了\n      if (list.length < length) {\n        nodes = list\n        // 剩下的节点，第一个如果是 Literal，把它转成 Identifier\n        literal = getLiteralNode(nodes, 0)\n        if (literal) {\n          name = literal.value\n          nodes[0] = createIdentifierInner(literal.raw, name, lookup, offset)\n        }\n      }\n\n    }\n\n    // 如果全是路径节点，如 ../../this，nodes 为空数组\n    // 如果剩下一个节点，则可转成标识符\n    return nodes.length < 2\n      ? createIdentifierInner(raw, name, lookup, offset, staticKeypath)\n      : createMemberInner(raw, nodes, lookup, offset, staticKeypath)\n\n  }\n\n  return nodes[0]\n\n}\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n}\n","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.RAW_MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.RAW_MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.RAW_MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'dev') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'dev') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw].value, raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'dev') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'dev') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorInfo: any | void,\n\n    lastOperator: string | void,\n\n    lastOperatorInfo: any | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorInfo = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorInfo = interpreter.binary[lastOperator])\n            && lastOperatorInfo.prec >= operatorInfo.prec\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'dev') {\n        if (operator) {\n          instance.fatal(startIndex, '表达式错误')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, ValueHolder> = {}\n\n// object.has 无法判断出 undefined，因此这里改成 ValueHolder 结构\nkeywordLiterals[env.RAW_TRUE] = { value: env.TRUE }\nkeywordLiterals[env.RAW_FALSE] = { value: env.FALSE }\nkeywordLiterals[env.RAW_NULL] = { value: env.NULL }\nkeywordLiterals[env.RAW_UNDEFINED] = { value: env.UNDEFINED }\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: type.hint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from '../../yox-config/src/config'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 表达式的静态 keypath\nSTATIC_KEYPATH = 'sk',\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && array.has(selfClosingTagNames, element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'dev') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.RAW_MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.RAW_MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child: Node, index: number) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.RAW_MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的值不能用插值或 if 语法`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[STATIC_KEYPATH]) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[STATIC_KEYPATH]) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === config.DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === config.DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    isEvent = directive.ns === config.DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === config.DIRECTIVE_CUSTOM\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    let expr: ExpressionNode | void\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch {}\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'dev') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`lazy 指令的值 [${raw}] 必须是大于 0 的数字`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (!eventPattern.test(raw) && !eventNamespacePattern.test(raw)) {\n            fatal('事件转换名称只能是 [name] 或 [name.namespace] 格式')\n          }\n          else if (currentElement\n            && currentElement.isComponent\n            && directive.name === raw\n          ) {\n            fatal('转换组件事件的名称不能相同')\n          }\n        }\n\n        if (isModel && !expr[STATIC_KEYPATH]) {\n          fatal(`${directive.ns} 指令的值格式错误: [${raw}]`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        if (!isCustom) {\n          fatal(`${directive.ns} 指令的表达式错误: [${text}]`)\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    // 变成一维数组，方便遍历\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, attrs, slot, children } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n        else if (!slot) {\n          fatal(`<template> 不写 slot 属性是几个意思？`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = config.SLOT_NAME_DEFAULT\n    }\n    // 补全 style 标签的 type\n\n    // style 如果没有 type 则加一个 type=\"text/css\"\n    // 因为低版本 IE 没这个属性，没法正常渲染样式\n\n    else {\n      let hasType = env.FALSE, hasValue = env.FALSE\n      if (attrs) {\n        array.each(\n          attrs,\n          function (attr) {\n\n            const name = attr.type === nodeType.PROPERTY\n              ? (attr as Property).name\n              : env.UNDEFINED\n\n            if (name === 'type') {\n              hasType = env.TRUE\n            }\n            else if (name === env.RAW_VALUE) {\n              hasValue = env.TRUE\n            }\n\n          }\n        )\n      }\n      if (element.isStyle && !hasType) {\n        addProperty(\n          element,\n          creator.createProperty('type', config.HINT_STRING, 'text/css')\n        )\n      }\n      // 低版本 IE 需要给 option 标签强制加 value\n      else if (tag === 'option' && !hasValue) {\n        element.isOption = env.TRUE\n      }\n    }\n\n  },\n\n  addProperty = function (element: Element, prop: Property) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      prop\n    )\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'dev') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('只能写一个 else 啊')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('不写 if 是几个意思')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(\n      breaklinePattern,\n      env.EMPTY_STRING\n    )\n\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'dev') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'dev') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name),\n              env.EMPTY_STRING\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = string.lower(name)\n\n              // <slot> 、<template> 或 svg 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag] || currentElement.isSvg) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'dev') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `each 不能写在属性的值里`\n                : `each 不能写在属性层级`\n            )\n          }\n        }\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              is.string(expr[STATIC_KEYPATH])\n                ? env.TRUE\n                : env.FALSE\n            )\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ 和 }}} 无法配对`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ 和 }} 无法配对`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'dev') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (nodeStack.length) {\n        fatal('还有节点未出栈')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport toJSON from '../../yox-common/src/function/toJSON'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ATTRIBUTE_VNODE = 'g',\n\nRENDER_PROPERTY_VNODE = 'h',\n\nRENDER_LAZY_VNODE = 'i',\n\nRENDER_TRANSITION_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_PARTIAL = 'q',\n\nRENDER_IMPORT = 'r',\n\nARG_CONTEXT = 's',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ATTRIBUTE_VNODE,\n    RENDER_PROPERTY_VNODE,\n    RENDER_LAZY_VNODE,\n    RENDER_TRANSITION_VNODE,\n    RENDER_MODEL_VNODE,\n    RENDER_EVENT_METHOD_VNODE,\n    RENDER_EVENT_NAME_VNODE,\n    RENDER_DIRECTIVE_VNODE,\n    RENDER_SPREAD_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (!isDef(yes)) {\n        yes = STRING_EMPTY\n      }\n      if (!isDef(no)) {\n        no = STRING_EMPTY\n      }\n    }\n\n    if (!isDef(no)) {\n      result = `${test} && ${yes}`\n    }\n    else if (!isDef(yes)) {\n      result = `!${test} && ${no}`\n    }\n    else {\n      result = `${test}?${yes}:${no}`\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, tag, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(config.SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: type.data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          outputAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = toJSON(string.slice(tag, 1))\n  }\n  else {\n    data.tag = toJSON(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = STRING_TRUE\n  }\n\n  if (isOption) {\n    data.isOption = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, SEP_COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const { binding } = node\n  return stringifyCall(\n    RENDER_ATTRIBUTE_VNODE,\n    array.join(\n      trimArgs([\n        toJSON(node.name),\n        binding ? STRING_TRUE : env.UNDEFINED,\n        binding ? toJSON(node.expr) : env.UNDEFINED,\n        binding ? env.UNDEFINED : stringifyValue(node.value, node.expr, node.children)\n      ]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const { binding } = node\n  return stringifyCall(\n    RENDER_PROPERTY_VNODE,\n    array.join(\n      trimArgs([\n        toJSON(node.name),\n        toJSON(node.hint),\n        binding ? STRING_TRUE : env.UNDEFINED,\n        binding ? toJSON(node.expr) : env.UNDEFINED,\n        binding ? env.UNDEFINED : stringifyValue(node.value, node.expr, node.children)\n      ]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr } = node\n\n  if (ns === config.DIRECTIVE_LAZY) {\n    return stringifyCall(\n      RENDER_LAZY_VNODE,\n      array.join(\n        [toJSON(name), toJSON(value)],\n        SEP_COMMA\n      )\n    )\n  }\n\n  if (ns === env.RAW_TRANSITION) {\n    return stringifyCall(\n      RENDER_TRANSITION_VNODE,\n      toJSON(value)\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === config.DIRECTIVE_MODEL) {\n    return stringifyCall(\n      RENDER_MODEL_VNODE,\n      toJSON(expr)\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    toJSON(name),\n    toJSON(key),\n    toJSON(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === config.DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        toJSON(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_CONTEXT\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === config.DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        toJSON(expr.raw)\n      )\n    }\n    else if (ns === config.DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyExpressionArg(expr),\n            ARG_CONTEXT\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return stringifyCall(\n    renderName,\n    array.join(\n      trimArgs(args),\n      SEP_COMMA\n    )\n  )\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyCall(\n    RENDER_SPREAD_VNODE,\n    array.join(\n      trimArgs([toJSON(node.expr), node.binding ? STRING_TRUE : env.UNDEFINED]),\n      SEP_COMMA\n    )\n  )\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const generate = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(\n    RENDER_EACH,\n    array.join(\n      trimArgs([\n        generate,\n        toJSON(node.from),\n        node.to ? toJSON(node.to) : env.UNDEFINED,\n        node.equal ? STRING_TRUE : env.UNDEFINED,\n        node.index ? toJSON(node.index) : env.UNDEFINED\n      ]),\n      SEP_COMMA\n    )\n  )\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name}${SEP_COMMA}${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport invoke from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\ntype Getter = (keypath: string, node: Keypath) => any\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: Getter, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let staticKeypath = node.sk, props = node.props, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      staticKeypath = env.EMPTY_STRING\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: Getter, context?: any): any {\n  return interpreter.unary[node.op].exec(\n    execute(node.a, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: Getter, context?: any): any {\n  return interpreter.binary[node.op].exec(\n    execute(node.a, getter, context),\n    execute(node.b, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: Getter, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: Getter, context?: any): any {\n  return node.nodes.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: Getter, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key: string, index: number) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: Getter, context?: any): any {\n  return invoke(\n    execute(node.name, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: Getter, context?: any): any {\n  // LITERAL 和 IDENTIFIER 避免再一次的函数调用\n  return node.type === nodeType.LITERAL\n    ? (node as Literal).value\n    : node.type === nodeType.IDENTIFIER\n      ? (getter as Getter)((node as Identifier).name, (node as Identifier))\n      : nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport Keypath from '../../yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from '../../yox-expression-compiler/src/executor'\n\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nexport function render(\n  context: Yox,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: type.data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key)\n\n    node.ak = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope != env.NULL && isDef(scope[key])) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    const result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 0) {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.debug(`Can't find [${keypath}], start looking up.`)\n        }\n        return lookup(stack, index - 1, key, node, depIgnore, defaultKeypath)\n      }\n      const holder = object.get(filters, key)\n      return holder\n        ? holder.value\n        : (node.ak = defaultKeypath, env.UNDEFINED)\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: type.data, name: string, expr: Keypath, hint?: type.hint): any {\n\n    const value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: expr.ak,\n        hint,\n      }\n    )\n\n    return value\n\n  },\n\n  createEventListener = function (type: string): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): type.getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, binding: boolean | void, expr: Keypath | void, value: string | void) {\n    if (binding) {\n      value = addBinding($vnode, name, expr as Keypath)\n    }\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: type.hint, binding: boolean | void, expr: Keypath | void, value: any | void) {\n    if (binding) {\n      value = addBinding($vnode, name, expr as Keypath, hint)\n    }\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: type.lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'dev') {\n      if (!$vnode.transition) {\n        logger.fatal(`transition [${name}] is not found.`)\n      }\n    }\n  },\n\n  renderModelVnode = function (expr: Keypath) {\n\n    $vnode.model = getValue(expr, env.TRUE)\n\n    setPair(\n      $vnode,\n      'directives',\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        binding: expr.ak,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!hooks) {\n        logger.fatal(`directive [${name}] is not found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (expr: ExpressionNode, binding?: boolean) {\n\n    const value = getValue(expr, binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair($vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr['ak']\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath)\n        setPair(\n          $vnode,\n          'directives',\n          key,\n          {\n            ns: config.DIRECTIVE_BINDING,\n            name: env.EMPTY_STRING,\n            key,\n            hooks: directives[config.DIRECTIVE_BINDING],\n            binding: keypathUtil.join(absoluteKeypath, env.RAW_WILDCARD),\n          }\n        )\n      }\n\n    }\n    else if (process.env.NODE_ENV === 'dev') {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: type.data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'dev') {\n        if (!componentName) {\n          logger.warn(`Dynamic component [${tag}] is not found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`partial [${name}] is not found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ExpressionNode,\n    to: ExpressionNode | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = getValue(from)\n\n    if (to) {\n      let toValue = getValue(to), count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      const eachKeypath = from['ak']\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            eachKeypath\n              ? keypathUtil.join(eachKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            eachKeypath\n              ? keypathUtil.join(eachKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'dev') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as type from '../../yox-type/src/type'\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport API from '../../yox-type/src/interface/API'\nimport SpecialEventHooks from '../../yox-type/src/hooks/SpecialEvent'\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n      : (env.DOCUMENT as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (env.DOCUMENT as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (env.DOCUMENT as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      const holder = object.get(node, name)\n      if (holder) {\n        return holder.value\n      }\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value as string\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, beforeNode: Node): void {\n    parentNode.insertBefore(node, beforeNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return string.lower((node as HTMLElement).tagName)\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = text as string\n          }\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = html as string\n          }\n          node[innerHTML] = html as string\n        }\n      }\n      else {\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      return node[innerHTML]\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        const customEvent = event instanceof CustomEvent\n          ? event\n          : new CustomEvent(event.type, createEvent(event, node))\n\n        if (customEvent.type !== type) {\n          customEvent.type = type\n        }\n\n        emitter.fire(type, [customEvent])\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n\n    emitter.on(type, listener)\n  },\n\n  off(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n    if (process.env.NODE_ENV === 'dev') {\n      if (specialEvents[type]) {\n        logger.error(`Special event \"${type}\" is existed.`)\n      }\n      logger.info(`Special event \"${type}\" add success.`)\n    }\n    specialEvents[type] = hooks\n  },\n\n}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nconst directive: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive, { lazy } = vnode\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n\n      const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n      if (value === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else if (value > 0) {\n        handler = debounce(\n          handler,\n          value,\n          // 避免连续多次点击，主要用于提交表单场景\n          // 移动端的 tap 事件可自行在业务层打补丁实现\n          name === env.EVENT_CLICK || name === env.EVENT_TAP\n        )\n      }\n\n    }\n\n    if (vnode.isComponent) {\n\n      (node as Yox).on(name, handler)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(name, handler as type.listener)\n      }\n\n    }\n    else {\n\n      api.on(node as HTMLElement, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(node as HTMLElement, name, handler as type.listener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: type.lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: Yox) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n},\n\ndirective: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { context, lazy, isComponent } = vnode,\n\n    dataBinding = directive.binding as string,\n\n    lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n    set: type.watcher | void,\n\n    sync: type.watcher,\n\n    unbind: Function\n\n    if (isComponent) {\n\n      let component = node as Yox,\n\n      viewBinding = component.$model as string\n\n      set = function (newValue: any) {\n        if (set) {\n          component.set(viewBinding, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function (newValue: any) {\n          context.set(dataBinding, newValue)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        component.unwatch(viewBinding, sync)\n      }\n\n      component.watch(viewBinding, sync)\n\n    }\n    else {\n\n      let element = node as HTMLElement,\n\n      control = vnode.tag === 'select'\n        ? selectControl\n        : inputControl,\n\n      // checkbox,radio,select 监听的是 change 事件\n      eventName = env.EVENT_CHANGE\n\n      if (control === inputControl) {\n        const type = (node as HTMLInputElement).type\n        if (inputTypes[type]) {\n          control = inputTypes[type]\n        }\n        // 如果是输入框，则切换成 model 事件\n        // model 事件是个 yox-dom 实现的特殊事件\n        // 不会在输入法组合文字过程中得到触发事件\n        else if (lazyValue !== env.TRUE) {\n          eventName = env.EVENT_MODEL\n        }\n      }\n\n      set = function (newValue: any) {\n        if (set) {\n          control.set(element, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function () {\n          control.sync(element, dataBinding, context)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        api.off(element, eventName, sync as type.listener)\n      }\n\n      api.on(element, eventName, sync as type.listener)\n\n      control.set(element, vnode.model)\n\n    }\n\n    // 监听数据，修改界面\n    context.watch(dataBinding, set as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      context.unwatch(dataBinding, set as type.watcher)\n      set = env.UNDEFINED\n      unbind()\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as type from '../../../yox-type/src/type'\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nimport api from '../../../yox-dom/src/dom'\n\nconst directive: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    let binding = directive.binding as string,\n\n    isFuzzy = keypathUtil.isFuzzy(binding),\n\n    watcher: type.watcher | void = function (newValue: any, _: any, keypath: string) {\n\n      if (watcher) {\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          const component = node as Yox\n          component.set(name, component.checkProp(name, newValue))\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n      }\n\n    }\n\n    vnode.context.watch(binding, watcher as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      vnode.context.unwatch(binding, watcher as type.watcher)\n      watcher = env.UNDEFINED\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateStringify from '../../yox-template-compiler/src/stringify'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'dev') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateStringify.stringify(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static checkProp(key: string, value: any, rule: PropRule): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      // 类型\n      const type = rule.type,\n\n      // 默认值\n      defaultValue = rule.value\n\n      // 传了数据\n      if (isDef(value)) {\n\n        if (process.env.NODE_ENV === 'dev') {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n\n            // 自定义函数判断是否匹配类型\n            // 自己打印警告信息吧\n            if (is.func(type)) {\n              (type as type.propType)(key, value)\n            }\n            else {\n\n              let matched = env.FALSE\n\n              // type: 'string'\n              if (!string.falsy(type)) {\n                matched = matchType(value, type as string)\n              }\n              // type: ['string', 'number']\n              else if (!array.falsy(type)) {\n                array.each(\n                  type as string[],\n                  function (item: string) {\n                    if (matchType(value, item)) {\n                      matched = env.TRUE\n                      return env.FALSE\n                    }\n                  }\n                )\n              }\n\n              if (!matched) {\n                logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n              }\n\n            }\n\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n        }\n\n      }\n      else {\n\n        if (process.env.NODE_ENV === 'dev') {\n          // 没传值但此项是必传项\n          if (rule.required) {\n            logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n          }\n        }\n\n        // 没传值但是配置了默认值\n        if (isDef(defaultValue)) {\n          value = type === env.RAW_FUNCTION\n            ? defaultValue\n            : is.func(defaultValue)\n              ? (defaultValue as type.propValue)()\n              : defaultValue\n        }\n\n      }\n    }\n\n    return value\n\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'dev') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源\n    const source = instance.checkProps(props || {})\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      if (root) {\n        instance.$root = root\n      }\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'dev') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'dev') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters),\n        object.merge(instance.$partials, globalPartials),\n        object.merge(instance.$directives, globalDirectives),\n        object.merge(instance.$transitions, globalTransitions)\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): type.data {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const result = object.copy(props)\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            result[key] = Yox.checkProp(key, props[key], rule)\n          }\n        )\n        return result\n      }\n    }\n    return props\n  }\n\n  checkProp(key: string, value: any): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          value = Yox.checkProp(key, value, rule)\n        }\n      }\n    }\n    return value\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","KEYPATH_PARENT","KEYPATH_CURRENT","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","offset","SEP_DOT","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","debug","msg","tag","log","info","warn","error","fatal","Error","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","model","isComponent","$model","object.merge","checkProps","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","op","raw","nodeType.BINARY","createIdentifierInner","lookup","sk","nodeType.IDENTIFIER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","getLiteralNode","nodes","createMemberIfNeeded","staticKeypath","literal","identifier","keypathUtil.join","nodeType.MEMBER","createMemberInner","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","operator","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorInfo","lastOperator","lastOperatorInfo","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","env.RAW_TRUE","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","expr","nodeType.DIRECTIVE","createProperty","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","STATIC_KEYPATH","directiveSeparator","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","element","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","binding","isModel","config.DIRECTIVE_MODEL","isLazy","config.DIRECTIVE_LAZY","isEvent","config.DIRECTIVE_EVENT","isCustom","config.DIRECTIVE_CUSTOM","exprCompiler.compile","exprNodeType.LITERAL","exprNodeType.CALL","exprNodeType.IDENTIFIER","partial","attrs","isTemplate","hasType_1","hasValue_1","env.RAW_VALUE","addProperty","creator.createProperty","config.HINT_STRING","config.SLOT_NAME_DEFAULT","isStringValueRequired","env.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","creator.createElement","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","event","lazy","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","index_1","parts","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","JSON","stringify","isStringRequired","joinStack","collectStack","nodeStringify","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_ELEMENT_VNODE","ARG_CONTEXT","SEP_COMMA","SEP_COLON","SEP_PLUS","STRING_TRUE","STRING_FALSE","STRING_EMPTY","toJSON","CODE_PREFIX","array.join","CODE_SUFFIX","stringifyObject","obj","fields","stringifyCall","arg","stringifyFunction","stringifyGroup","stringifyExpression","renderName","extra","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","map","stringifyConditionChildren","trimArgs","removable","renderElement","childs","outputTag","outputChilds","outputSlots","outputAttrs","config.SLOT_DATA_PREFIX","addSlot","array.falsy","object.falsy","getComponentSlots","stringifyIf","nodeExecutor","getter","setPair","first","isUndef","len","object.get","invoke","sync","deps","observer","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","depIgnore","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","diffWatcher","fire","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","emitter","on","formatWatcherOptions","min","insert","array.remove","object.clear","addEventListener","removeEventListener","addClass","className","classList","removeClass","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","holder","setAttribute","value_1","getAttribute","removeAttribute","beforeNode","appendChild","removeChild","nextSibling","find","selector","querySelector","nodeType","nativeListeners","special","nativeListener","customEvent","createEvent","addSpecialEvent","hooks","logger.error","logger.info","delay","timer","args_1","array.toArray","locked","handler","debounce","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checked","checkbox","removeAt","dataBinding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","type_1","checkProp","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","LOADER_QUEUE","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","Yox","events","methods","watchers","extensions","object.extend","addComputed","method","$emitter","placeholder","el","root","model_1","template","transitions","components","partials","filters","$root","$parent","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","plugin","install","templateCompiler.compile","rule","matched_1","matchType","required","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","modelKey","modelValue","$el","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","getValue","addBinding","createMethodListener","createGetter","renderExpression","renderExpressionArg","renderExpressionVnode","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","renderSlot","renderPartial","renderImport","eachHandler","renderEach","$keypath","stack","defaultKeypath","scope","ak","$item","logger.debug","renderStack","exprExecutor.execute","config.DIRECTIVE_BINDING","$event","$data","stringRequired","generate","lastScope","lastStack","concat","$length","vnodeList","lastVnode","absoluteKeypath","componentName","renderSlots_1","defaultRender","fromValue","toValue","eachKeypath","afterHook_1","instance_1","$options_1","snabbdom.patch","propTypes","result_1","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","config.HOOK_AFTER_CREATE","addEvent","loader_1","queue_1","formatValue","hasSlot"],"mappings":"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"}