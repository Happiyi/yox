{"version":3,"file":"yox.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../../../node_modules/yox-template-compiler/src/helper.ts","../../../../../node_modules/yox-template-compiler/src/creator.ts","../../../../../node_modules/yox-template-compiler/src/platform/web.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-expression-compiler/src/creator.ts","../../../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../../../node_modules/yox-expression-compiler/src/compiler.ts","../../../../../node_modules/yox-template-compiler/src/compiler.ts","../../../../../node_modules/yox-common/src/util/generator.ts","../../../../../node_modules/yox-template-compiler/src/generator.ts","../../../../../node_modules/yox-expression-compiler/src/generator.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!(?:\\s|--)/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\nexport const HOOK_BEFORE_PROPS_UPDATE = 'beforePropsUpdate'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, index: number, lastIndex: number) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  // is.array() 比 splitCache.hasOwnProperty(keypath) 快一些\n  // 虽然不如后者严谨，但在这里够用了\n\n  let list: string[]\n\n  if (is.array(splitCache[keypath])) {\n    list = splitCache[keypath]\n  }\n  else {\n    if (string.indexOf(keypath, constant.RAW_DOT) < 0) {\n      list = [keypath]\n    }\n    else {\n      list = keypath.split(constant.RAW_DOT)\n    }\n    splitCache[keypath] = list\n  }\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i, lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (index === lastIndex) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n      if (index === lastIndex) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\ntype Namespace = {\n\n  // 事件名称\n  type: string\n\n  // 命名空间\n  ns?: string\n\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      // 这里不用 array.each，减少函数调用\n      for (let i = 0, length = list.length; i < length; i++) {\n\n        let options = list[i]\n\n        // 命名空间不匹配\n        if (!matchNamespace(namespace.ns, options)\n          // 在 fire 过程中被移除了\n          || !array.has(list, options)\n          // 传了 filter，则用 filter 判断是否过滤此 options\n          || (filter && !filter(namespace, args, options))\n        ) {\n          continue\n        }\n\n        // 为 event 对象加上当前正在处理的 listener\n        // 这样方便业务层移除事件绑定\n        // 比如 on('xx', function) 这样定义了匿名 listener\n        // 在这个 listener 里面获取不到当前 listener 的引用\n        // 为了能引用到，有时候会先定义 var listener = function\n        // 然后再 on('xx', listener) 这样其实是没有必要的\n        if (event) {\n          event.listener = options.fn\n        }\n\n        let result = execute(options.fn, options.ctx, args)\n\n        if (event) {\n          event.listener = constant.UNDEFINED\n        }\n\n        // 执行次数\n        options.num = options.num ? (options.num + 1) : 1\n\n        // 注册的 listener 可以指定最大执行次数\n        if (options.num === options.max) {\n          instance.off(namespace, options.fn)\n        }\n\n        // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n        if (event) {\n          if (result === constant.FALSE) {\n            event.prevent().stop()\n          }\n          else if (event.isStoped) {\n            result = constant.FALSE\n          }\n        }\n\n        if (result === constant.FALSE) {\n          isComplete = constant.FALSE\n          break\n        }\n\n      }\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | Namespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | Namespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | Namespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  directive.update(vnode)\n  component.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    directive.update(vnode)\n    component.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (oldIndex !== constant.UNDEFINED) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n\n  // 先处理 directive 再处理 component\n  // 因为组件只是单纯的更新 props，而 directive 则有可能要销毁\n  // 如果顺序反过来，会导致某些本该销毁的指令先被数据的变化触发执行了\n  directive.update(vnode, oldVnode)\n  component.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[constant.RAW_SLOT] =\nspecialTags[constant.RAW_TEMPLATE] =\n\nspecialAttrs[constant.RAW_KEY] =\nspecialAttrs[constant.RAW_REF] =\nspecialAttrs[constant.RAW_SLOT] = constant.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: constant.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: constant.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string | void): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: constant.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== constant.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: constant.TRUE,\n    isLeaf: constant.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from 'yox-config/src/config'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[$A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return constant.TRUE\n  }\n  // <div data-name checked>\n  else {\n    return string.startsWith(name, 'data-')\n      ? constant.EMPTY_STRING\n      : name\n  }\n}\n\nexport function createElement(tagName: string) {\n\n  let isSvg = array.has(svgTagNames, tagName), isComponent = constant.FALSE\n\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (!isSvg && componentNamePattern.test(tagName)) {\n    isComponent = constant.TRUE\n  }\n\n  return creator.createElement(\n    tagName,\n    isSvg,\n    tagName === 'style',\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = constant.FALSE, hasValue = constant.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : constant.UNDEFINED\n\n        if (name === 'type') {\n          hasType = constant.TRUE\n        }\n        else if (name === constant.RAW_VALUE) {\n          hasValue = constant.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = constant.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return constant.TRUE\n  }\n}","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import toString from 'yox-common/src/function/toString'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = constant.TRUE, offset = 0\n\n  if (name === constant.KEYPATH_CURRENT\n    || name === constant.KEYPATH_PARENT\n  ) {\n    lookup = constant.FALSE\n    if (name === constant.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = constant.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个节点\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  // 第一个节点要特殊处理\n  let firstNode = nodes.shift() as Node,\n\n  // 是否向上查找\n  lookup = constant.TRUE,\n\n  // 偏移量，默认从当前 context 开始查找\n  offset = 0\n\n  // 表示传入的 nodes 至少有两个节点（弹出了一个）\n  if (nodes.length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    // 是否全是 Literal 节点\n    let isLiteral = constant.TRUE,\n\n    // 静态节点\n    staticNodes: string[] = [],\n\n    // 对于 this.a.b[c] 这样的\n    // 要还原静态部分 this.a.b 的 raw\n    // 虽然 raw 没什么大用吧，谁让我是洁癖呢\n    staticRaw = constant.EMPTY_STRING,\n\n    // 动态节点\n    dynamicNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (isLiteral) {\n          if (node.type === nodeType.LITERAL) {\n            if ((node as Literal).raw === constant.KEYPATH_PARENT) {\n              offset += 1\n              staticRaw = staticRaw\n                ? staticRaw + constant.RAW_SLASH + constant.KEYPATH_PARENT\n                : constant.KEYPATH_PARENT\n              return\n            }\n            if ((node as Literal).raw !== constant.KEYPATH_CURRENT) {\n              const value = toString((node as Literal).value)\n              array.push(\n                staticNodes,\n                value\n              )\n              if (staticRaw) {\n                staticRaw += string.endsWith(staticRaw, constant.KEYPATH_PARENT)\n                  ? constant.RAW_SLASH\n                  : constant.RAW_DOT\n              }\n              staticRaw += value\n            }\n          }\n          else {\n            isLiteral = constant.FALSE\n          }\n        }\n\n        if (!isLiteral) {\n          array.push(\n            dynamicNodes,\n            node\n          )\n        }\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 static keypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      lookup = (firstNode as Identifier).lookup\n      offset += (firstNode as Identifier).offset\n\n      let firstName = (firstNode as Identifier).name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (firstName) {\n        array.unshift(staticNodes, firstName)\n      }\n\n      // 转成 Identifier\n      firstName = array.join(staticNodes, constant.RAW_DOT)\n\n      // a.b.c\n      if (isLiteral) {\n        firstNode = createIdentifierInner(raw, firstName, lookup, offset)\n      }\n      // a[b]\n      // this.a[b]\n      else {\n\n        // 当 isLiteral 为 false 时\n        // 需要为 lead 节点创建合适的 raw\n        let firstRaw = (firstNode as Identifier).raw\n        if (staticRaw) {\n          firstRaw += (\n            firstRaw === constant.KEYPATH_PARENT\n              ? constant.RAW_SLASH\n              : constant.RAW_DOT\n          ) + staticRaw\n        }\n\n        firstNode = createMemberInner(\n          raw,\n          createIdentifierInner(firstRaw, firstName, lookup, offset),\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n    else {\n      // 例子：\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, constant.RAW_DOT),\n          constant.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // 例子：\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n","import * as constant from 'yox-common/src/util/constant'\n\nexport const unary = {\n  '+': constant.TRUE,\n  '-': constant.TRUE,\n  '~': constant.TRUE,\n  '!': constant.TRUE,\n  '!!': constant.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = constant.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? constant.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (constant.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(constant.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (constant.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = constant.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = constant.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = constant.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (constant.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (constant.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = constant.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = constant.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, constant.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, constant.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, 'The operator \"++\" is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, 'The operator \"--\" is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (constant.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = constant.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (constant.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanTernary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanTernary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[constant.RAW_TRUE] = constant.TRUE\nkeywordLiterals[constant.RAW_FALSE] = constant.FALSE\nkeywordLiterals[constant.RAW_NULL] = constant.NULL\nkeywordLiterals[constant.RAW_UNDEFINED] = constant.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toString from 'yox-common/src/function/toString'\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 调用的方法\nmethodPattern = /^[_$a-z]([\\w]+)?$/,\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-$.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = constant.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The type of poping node is not expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = constant.MINUS_ONE,\n\n    openText = constant.EMPTY_STRING,\n\n    closeIndex = constant.MINUS_ONE,\n\n    closeText = constant.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          // 有了结束 index，这里的任务是配对开始 index\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              let startIndex = openIndex, endIndex = closeIndex\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                startIndex++\n              }\n              if (closeText) {\n                // 合并开始和结束文本，如 1<!-- {{x}}{{y}} -->2\n                // 这里要把 1 和 2 两个文本节点合并成一个\n                if (openText) {\n                  (children[openIndex] as Text).text += closeText\n                }\n                else {\n                  (children[closeIndex] as Text).text = closeText\n                  endIndex--\n                }\n              }\n\n              children.splice(startIndex, endIndex - startIndex + 1)\n\n              // 重置，再继续寻找结束 index\n              openIndex = closeIndex = constant.MINUS_ONE\n            }\n          }\n          else {\n            // 从后往前遍历\n            // 一旦发现能匹配 --> 就可以断定这是注释的结束 index\n            // 剩下的就是找开始 index\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      constant.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && setElementText(element, child.text)\n    ) {\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && !child.safe\n    ) {\n      element.html = child.expr\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = constant.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    // 这里需要严格校验格式，比如 width=\"100%\" 要打印报错信息，提示用户类型错误\n    if (prop.hint === HINT_NUMBER) {\n      if (process.env.NODE_ENV === 'development') {\n        if (is.numeric(text)) {\n          prop.value = +text\n        }\n        else {\n          fatal(`The value of \"${prop.name}\" is not a number: ${text}.`)\n        }\n      }\n      else {\n        prop.value = toNumber(text)\n      }\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === constant.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = constant.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = constant.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = constant.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = constant.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = constant.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal('The value of lazy must be a number greater than 0.')\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          let methodName = (expr as ExpressionCall).name\n          if (methodName.type !== exprNodeType.IDENTIFIER) {\n            fatal('Invalid method name.')\n          }\n          // 函数调用调用方法，因此不能是 a.b() 的形式\n          else if (!methodPattern.test((methodName as ExpressionIdentifier).name)) {\n            fatal('Invalid method name.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(constant.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal('The value of the model must be an identifier.')\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      // 自定义指令支持错误的表达式\n      // 反正是自定义的规则，爱怎么写就怎么写\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = constant.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    // 这里会去掉没有子节点的空分支\n\n    // 从最后一个节点往前遍历\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (constant.TRUE) {\n      // 当前分支有子节点\n      if (currentNode.children) {\n        // 从后往前遍历第一次发现非空分支\n        // 此时，可以删掉后面的空分支\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = constant.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅在 checkCondition 函数中用作逆向遍历\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 所有分支都没有子节点，删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n      return\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === constant.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === constant.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === constant.RAW_NAME || name === constant.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === constant.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === constant.RAW_SLOT && attr.name === constant.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = constant.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    let type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        // 这里不能写 currentElement && !currentAttribute，举个例子\n        //\n        // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n        //\n        // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n        if (currentElement && currentBranch.type === nodeType.ELEMENT) {\n\n          // 属性层级不能使用危险插值\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          // node 没法转型，一堆可能的类型怎么转啊...\n          array.push(\n            currentElement.attrs || (currentElement.attrs = []),\n            node as any\n          )\n\n        }\n        else {\n\n          const children = currentBranch.children || (currentBranch.children = []),\n          lastChild = array.last(children)\n\n          // 如果表达式是安全插值的字面量，可以优化成字符串\n          if (type === nodeType.EXPRESSION\n            // 在元素的子节点中，则直接转成字符串\n            && (!currentElement\n              // 在元素的属性中，如果同级节点大于 0 个（即已经存在一个），则可以转成字符串\n              || (currentAttribute && children.length > 0)\n            )\n          ) {\n            const textNode = toTextNode(node as Expression)\n            if (textNode) {\n              node = textNode\n              type = textNode.type\n            }\n          }\n\n          // 连续添加文本节点，则直接合并\n          if (lastChild\n            && type === nodeType.TEXT\n          ) {\n            // 合并两个文本节点\n            if (lastChild.type === nodeType.TEXT) {\n              (lastChild as Text).text += (node as Text).text\n              return\n            }\n            // 前一个是字面量的表达式，也可以合并节点\n            if (lastChild.type === nodeType.EXPRESSION) {\n              const textNode = toTextNode(lastChild as Expression)\n              if (textNode) {\n                children[children.length - 1] = textNode\n                textNode.text += (node as Text).text\n                return\n              }\n            }\n          }\n\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              // 前面不能有别的 child，危险插值必须独占父元素\n              if (lastChild) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n              // 危险插值的父节点必须是 html element\n              else if (currentBranch.type !== nodeType.ELEMENT\n                || (currentBranch as Element).isComponent\n                || helper.specialTags[(currentBranch as Element).tag]\n              ) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n            }\n            // 后面不能有别的 child，危险插值必须独占父元素\n            else if (lastChild\n              && lastChild.type === nodeType.EXPRESSION\n              && !(lastChild as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          array.push(children, node)\n\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (type === nodeType.EXPRESSION\n            && !(node as Expression).safe\n          ) {\n            fatal('The dangerous interpolation must be under a HTML element.')\n          }\n        }\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, constant.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  toTextNode = function (node: Expression) {\n    if (node.safe\n      && node.expr.type === exprNodeType.LITERAL\n    ) {\n      return creator.createText(toString(\n        (node.expr as ExpressionLiteral).value\n      ))\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === constant.RAW_SLASH) {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n\n            // 等到 > 字符才算真正的结束\n            currentElement = popStack(nodeType.ELEMENT, tag) as Element\n\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === constant.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            const node = createElement(tag)\n\n            addChild(node)\n            currentElement = node\n\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        // 处理结束标签的 >\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === constant.RAW_SLASH) {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = constant.UNDEFINED\n\n          return match[0]\n\n        }\n\n        // 如果只是写了一个 > 字符\n        // 比如 <div>></div>\n        // 则交给其他 parser 处理\n\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === constant.RAW_TRANSITION) {\n            node = creator.createDirective(\n              constant.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(event).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_EVENT,\n              diectiveModifier\n            )\n            // on-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid event namespace.')\n              }\n            }\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : constant.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(custom).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_CUSTOM,\n              diectiveModifier\n            )\n            // o-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid directive modifier.')\n              }\n            }\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(constant.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = constant.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, constant.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, constant.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, constant.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = terms[1] ? string.trim(terms[1]) : constant.UNDEFINED,\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                constant.UNDEFINED,\n                constant.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(\n            expr,\n            blockMode === BLOCK_MODE_SAFE\n          )\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === constant.RAW_SLASH) {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = constant.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = constant.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it's not open yet.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return constant.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (constant.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, constant.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as array from './array'\nimport * as constant from './constant'\n\nexport const UNDEFINED = '$0'\n\nexport const NULL = '$1'\n\nexport const TRUE = '$2'\n\nexport const FALSE = '$3'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n *\n * [a, undefined, undefined] => [a]\n * [a, undefined, b, undefined] => [a, undefined, b]\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = constant.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = constant.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    constant.TRUE\n  )\n\n  return args\n\n}\n\n/**\n * 确保表达式的优先级是正确的\n */\nexport function toGroup(code: string): string {\n  // 数组不用加括号\n  if (/^\\[[^\\]]+\\]$/.test(code)\n    // 对象不用加括号\n    || /^{[^\\}]+}$/.test(code)\n    // 字符串不用加括号\n    || /^\"[^\"]+\\\"$/.test(code)\n    // 一元表达式不用加括号\n    || /^(?:[-+~!]|!!)(?:[\\$\\w]+|\\([\\$\\w]+\\))$/.test(code)\n    // 函数调用不用加括号\n    || /^\\w+\\([^\\)\\{\\}]*\\)$/.test(code)\n    // 避免重复加括号\n    || /^\\([^\\)]+\\)$/.test(code)\n  ) {\n    return code\n  }\n  return /[-+*\\/%<>=!&^|,?:]/.test(code)\n    ? `(${code})`\n    : code\n}\n\n/**\n * 把 [ 'key1:value1', 'key2:value2' ] 格式转成 `{key1:value1,key2:value2}`\n */\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\n/**\n * 把 [ 'item1', 'item2' ] 格式转成 `['item1','item2']`\n */\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\n/**\n * 输出函数调用的格式\n */\nexport function toCall(name: string, args?: (string | void)[]): string {\n  const code = args ? array.join(trimArgs(args), COMMA) : constant.EMPTY_STRING\n  return `${name}(${code})`\n}\n\n/**\n * 输出为字符串格式\n */\nexport function toString(value: string | number | boolean | null | void): string {\n  return value === constant.TRUE\n    ? TRUE\n    : value === constant.FALSE\n      ? FALSE\n      : value === constant.NULL\n        ? NULL\n        : value === constant.UNDEFINED\n          ? UNDEFINED\n          : JSON.stringify(value)\n}\n\n/**\n * 输出为匿名函数格式\n */\nexport function toFunction(args: string, code: string) {\n  return `${constant.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0,${NULL}=null,${TRUE}=!0,${FALSE}=!1;${RETURN}${code}}`\n}","import {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as exprGenerator from 'yox-expression-compiler/src/generator'\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否正在收集子节点\nconst collectStack: (boolean | void)[] = [],\n\n// 是否正在收集字符串类型的值\nstringStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_COMMENT_VNODE = 'p',\n\nRENDER_ELEMENT_VNODE = 'q',\n\nRENDER_COMPONENT_VNODE = 'r',\n\nRENDER_SLOT = 's',\n\nRENDER_PARTIAL = 't',\n\nRENDER_IMPORT = 'u',\n\nRENDER_EACH = 'v',\n\nRENDER_RANGE = 'w',\n\nRENDER_EQUAL_RANGE = 'x',\n\nARG_STACK = 'y'\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${constant.RAW_FUNCTION}(${arg || constant.EMPTY_STRING}){${result || constant.EMPTY_STRING}}`\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      renderExpression(expr)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, constant.FALSE, constant.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return renderExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    // 常见的应用场景是序列化 HTML 元素属性值，处理值时要求字符串，在处理属性名这个级别，不要求字符串\n    // compiler 会把原始字符串编译成 value\n    // compiler 会把单个插值编译成 expr\n    // 因此走到这里，一定是多个插值或是单个特殊插值（比如 If)\n    array.push(stringStack, constant.TRUE)\n    const result = stringifyChildren(children)\n    array.pop(stringStack)\n    return result\n  }\n}\n\nfunction stringifyChildren(children: Node[]) {\n\n  const items = children.map(\n    function (child: Node) {\n      return nodeGenerator[child.type](child)\n    }\n  )\n\n  // 字符串拼接涉及表达式的优先级问题，这里先统一成数组，字符串拼接改成 array.join 有利于一致性\n\n  return array.last(stringStack) && items.length > 1\n    ? generator.toArray(items) + `.join(${generator.EMPTY})`\n    : array.join(items, generator.COMMA)\n\n}\n\nfunction stringifyIf(node: If | ElseIf) {\n\n  let { children, next } = node,\n\n  // 是否正在收集子节点\n  defaultValue = array.last(collectStack)\n    ? generator.toCall(RENDER_COMMENT_VNODE)\n    // 要求是字符串\n    : array.last(stringStack)\n      ? generator.EMPTY\n      : generator.UNDEFINED,\n\n  yes: string | void,\n\n  no: string | void\n\n  if (children) {\n    yes = stringifyChildren(children)\n  }\n\n  if (next) {\n    if (next.type === nodeType.ELSE_IF) {\n      no = stringifyIf(next as ElseIf)\n    }\n    else if (next.children) {\n      no = stringifyChildren(next.children)\n    }\n  }\n\n  if (!yes && !no) {\n    return defaultValue\n  }\n\n  // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n  // 因此每一个分支都要调用 toGroup\n  return generator.toGroup(renderExpression(node.expr))\n    + generator.QUESTION\n    + generator.toGroup(yes || defaultValue)\n    + generator.COLON\n    + generator.toGroup(no || defaultValue)\n\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === constant.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      result[name] = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, ref, key, html, attrs, children } = node,\n\n  staticTag: string | void,\n  dynamicTag: string | void,\n\n  outputAttrs: string | void,\n\n  outputHTML: string | void,\n\n  outputChilds: string | void,\n  outputSlots: string | void,\n\n  outputStatic: string | void,\n  outputOption: string | void,\n  outputStyle: string | void,\n  outputSvg: string | void,\n\n  outputRef: string | void,\n  outputKey: string | void\n\n  if (tag === constant.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + node.name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    dynamicTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    staticTag = generator.toString(tag)\n  }\n\n\n\n\n  array.push(collectStack, constant.FALSE)\n\n  // 在 collectStack 为 false 时取值\n  outputRef = ref ? stringifyValue(ref.value, ref.expr, ref.children) : constant.UNDEFINED\n  outputKey = key ? stringifyValue(key.value, key.expr, key.children) : constant.UNDEFINED\n\n  if (attrs) {\n    const list: string[] = []\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          list,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n    if (list.length) {\n      outputAttrs = stringifyFunction(\n        array.join(list, generator.COMMA)\n      )\n    }\n  }\n\n  if (children) {\n    collectStack[collectStack.length - 1] = constant.TRUE\n    if (isComponent) {\n      outputSlots = getComponentSlots(children)\n    }\n    else {\n      outputChilds = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  }\n\n  array.pop(collectStack)\n\n\n\n  if (html) {\n    outputHTML = is.string(html)\n      ? generator.toString(html as string)\n      : renderExpression(html as ExpressionNode)\n  }\n\n  outputStatic = node.isStatic ? generator.TRUE : constant.UNDEFINED\n  outputOption = node.isOption ? generator.TRUE : constant.UNDEFINED\n  outputStyle = node.isStyle ? generator.TRUE : constant.UNDEFINED\n  outputSvg = node.isSvg ? generator.TRUE : constant.UNDEFINED\n\n  if (isComponent) {\n    return generator.toCall(\n      RENDER_COMPONENT_VNODE,\n      // 最常用 => 最不常用排序\n      [\n        staticTag,\n        outputAttrs,\n        outputSlots,\n        outputRef,\n        outputKey,\n        dynamicTag,\n      ]\n    )\n  }\n\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    // 最常用 => 最不常用排序\n    [\n      staticTag,\n      outputAttrs,\n      outputChilds,\n      outputStatic,\n      outputOption,\n      outputStyle,\n      outputSvg,\n      outputHTML,\n      outputRef,\n      outputKey,\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === constant.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, constant.UNDEFINED) // method\n        array.push(args, constant.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, constant.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  return array.last(collectStack)\n    ? generator.toCall(\n        RENDER_TEXT_VNODE,\n        [\n          result\n        ]\n      )\n    : result\n\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  return array.last(collectStack)\n    ? stringifyExpressionVnode(node.expr)\n    : renderExpression(node.expr)\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[])\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          generator.toString(node.index)\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        generator.toString(node.index)\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, constant.TRUE),\n      generator.toString(node.index)\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[])\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\n// 序列化代码的参数列表\nlet codeArgs: string | void\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_COMMENT_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_COMPONENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = constant.FALSE,\n\n  // 如果是内部临时值，不需要 holder\n  needHolder = holder && !inner,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      constant.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generator.toGroup(generateChildNode((node as Binary).left))\n        + (node as Binary).operator\n        + generator.toGroup(generateChildNode((node as Binary).right))\n      break\n\n    case nodeType.TERNARY:\n      // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n      value = generator.toGroup(generateChildNode((node as Ternary).test))\n        + generator.QUESTION\n        + generator.toGroup(generateChildNode((node as Ternary).yes))\n        + generator.COLON\n        + generator.toGroup(generateChildNode((node as Ternary).no))\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = constant.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          generator.toString(identifier.lookup),\n          identifier.offset > 0 ? generator.toString(identifier.offset) : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED,\n          depIgnore ? generator.TRUE : constant.UNDEFINED,\n          stack ? stack : constant.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = constant.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            generator.toString(lookup),\n            offset > 0 ? generator.toString(offset) : constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n            depIgnore ? generator.TRUE : constant.UNDEFINED,\n            stack ? stack : constant.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            constant.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            needHolder ? generator.TRUE : constant.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = constant.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  if (!needHolder) {\n    return value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([\n        constant.RAW_VALUE + generator.COLON + value\n      ])\n\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index],\n\n    keypath = keypathUtil.join(scope.$keypath, key),\n\n    value: any = stack,\n\n    holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (defaultKeypath === constant.UNDEFINED) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (scope[key] !== constant.UNDEFINED) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (scope.$item !== constant.UNDEFINED) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && scope[key] !== constant.UNDEFINED) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (value: any) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const text = toString(value)\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        // 注释节点标签名是 '!'，这里区分一下\n        const textVnode: Data = {\n          tag: '#',\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      $vnode,\n      $vnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair($vnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair($vnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          $vnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    // 注释节点和文本节点需要有个区分\n    // 如果两者都没有 tag，则 patchVnode 时，会认为两者是 patchable 的\n    return appendVnode({\n      tag: '!',\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: any | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (isDef(html)) {\n      vnode.html = toString(html)\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    staticTag: string | void,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void,\n    dynamicTag: string | void\n  ) {\n\n    let tag: string\n\n    // 组件支持动态名称\n    if (dynamicTag) {\n      const componentName = observer.get(dynamicTag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`The dynamic component \"${dynamicTag}\" can't be found.`)\n        }\n      }\n      tag = componentName\n    }\n    else {\n      tag = staticTag as string\n    }\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        vnodeSlots[name] = vnodes.length ? vnodes : constant.UNDEFINED\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    let myStack = stack || $stack, index = myStack.length - 1\n    if (offset) {\n      index -= offset\n    }\n    let result = findValue(myStack, index, name, lookup, depIgnore)\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (runtimeKeypath !== constant.UNDEFINED) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n          vnodes[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (length !== constant.UNDEFINED) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\nlet guid = 0,\n\n// 这里先写 IE9 支持的接口\ninnerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nemitterHolders: Record<string, Emitter> = {},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (value !== constant.UNDEFINED) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (value !== constant.UNDEFINED) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (text !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (html !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitterKey = node[EMITTER] || (node[EMITTER] = ++guid),\n\n  emitter = emitterHolders[emitterKey] || (emitterHolders[emitterKey] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitterKey = node[EMITTER],\n\n  emitter = emitterHolders[emitterKey],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (emitterHolders[emitterKey]\n    && object.falsy(listeners)\n  ) {\n    node[EMITTER] = constant.UNDEFINED\n    delete emitterHolders[emitterKey]\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Computed from './Computed'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void\n\n    if (computed) {\n      result = object.get(computed, keypath)\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let next: any\n\n      keypathUtil.each(\n        keypath,\n        function (key, index, lastIndex) {\n\n          if (index === 0) {\n            if (computed && computed[key]) {\n              if (lastIndex === 0) {\n                computed[key].set(newValue)\n              }\n              else {\n                // 这里 next 可能为空\n                next = computed[key].get()\n              }\n            }\n            else {\n              if (lastIndex === 0) {\n                data[key] = newValue\n              }\n              else {\n                next = data[key] || (data[key] = {})\n              }\n            }\n            return\n          }\n\n          if (next) {\n            if (index === lastIndex) {\n              next[key] = newValue\n            }\n            else {\n              next = next[key] || (next[key] = {})\n            }\n          }\n\n        }\n      )\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (directive.hint !== constant.UNDEFINED) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Partial,\n  ThisTask,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  HOOK_BEFORE_PROPS_UPDATE,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string | Function, stringify?: boolean): string | Function {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数\n      if (is.func(template)) {\n        return template as Function\n      }\n      if (!compileCache[template as string]) {\n        const nodes = templateCompiler.compile(template as string)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template as string] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template as string]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return template\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp($options.name, key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    // 向上发事件会经过自己\n    // 如果向下发事件再经过自己，就产生了一次重叠\n    // 这是没有必要的，而且会导致向下发事件时，外部能接收到该事件，但我们的本意只是想让子组件接收到事件\n\n    isComplete = downward && event.target === instance\n      ? constant.TRUE\n      : $emitter.fire(event, args)\n\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(props?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $options, $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (props) {\n          execute($options[HOOK_BEFORE_PROPS_UPDATE], instance, props)\n          instance.set(props)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!props && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { name, propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(name, key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: ThisTask<this>): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(componentName: string | undefined, key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value, componentName)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`, componentName)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`, componentName)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is undefined.`, componentName)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","RAW_SLASH","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","isNaN","boolean","numeric","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","constant.UNDEFINED","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","constant.MINUS_ONE","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","target","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","constant.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","keypath","list","string.indexOf","constant.RAW_DOT","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","match","holder","keys","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","debug","info","warn","error","fatal","Error","ns","listeners","Emitter","filter","namespace","parse","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","instance","name","ns_1","matchListener_1","createMatchListener","object.each","arguments","logger.warn","matchListener","string.slice","matchTrue","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","_a","once","bind","unbind","ref","props","slots","isComponent","model","$model","checkProp","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","directive.update","component.update","guid","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","hint","expr","nodeType.PROPERTY","createEach","from","to","equal","nodeType.EACH","nodeType.TEXT","isLeaf","constant.RAW_SLOT","constant.RAW_TEMPLATE","nodeType.IF","nodeType.PARTIAL","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","tagName","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifier","isProp","lookup","constant.KEYPATH_CURRENT","constant.KEYPATH_PARENT","createLiteral","createIdentifierInner","nodeType.LITERAL","createMemberIfNeeded","nodes","firstNode","shift","isLiteral_1","staticNodes_1","staticRaw_1","dynamicNodes_1","constant.RAW_SLASH","string.endsWith","nodeType.IDENTIFIER","firstName","array.join","firstRaw","createMemberInner","lead","nodeType.MEMBER","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isDef","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","array.last","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","constant.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","methodPattern","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","prefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","element","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","checkDirective","openIndex","openText","closeIndex","closeText","helper.specialTags","setElementText","safe","replaceChild","exprNodeType.IDENTIFIER","binding","string.startsWith","getAttributeDefaultValue","isModel","isLazy","isEvent","isCustom","exprCompiler.compile","e","exprNodeType.LITERAL","exprNodeType.CALL","methodName","partial","isTemplate","attrs","hasType","constant.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","constant.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","lastChild","textNode","toTextNode","addTextChild","creator.createText","htmlParsers","constant.RAW_TRANSITION","creator.createDirective","directiveName","diectiveModifier","extra","lazy","string.camelize","custom","_b","creator.createAttribute","lowerName","string.lower","blockParsers","source","terms","literal","index_1","parts","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","node_1","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","COMMA","COLON","QUESTION","EMPTY","RETURN","toGroup","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","codeArgs","collectStack","stringStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_COMMENT_VNODE","RENDER_ELEMENT_VNODE","RENDER_COMPONENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","ARG_STACK","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","needHolder","generateChildNode","generator.toString","generator.toGroup","generator.QUESTION","generator.COLON","generator.toArray","map","fields_1","generator.toObject","identifier","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyFunction","stringifyExpressionArg","stringifyValue","stringifyChildren","generator.EMPTY","generator.COMMA","getComponentSlots","addSlot","array.falsy","object.falsy","setPair","staticTag","dynamicTag","outputAttrs","outputHTML","outputChilds","outputSlots","outputStatic","outputOption","outputStyle","outputSvg","outputRef","outputKey","list_1","renderName","generator.RETURN","stringifyIf","generator.UNDEFINED","KEY_DIRECTIVES","innerText","innerHTML","createEvent","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","constant.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.remove","EMITTER","namespaces","svg","domain","emitterHolders","specialEvents","object.set","object.get","setAttribute","value_1","getAttribute","appendChild","constant.EVENT_MODEL","on","locked","find","selector","querySelector","addClass","removeClass","emitterKey","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","hooks","logger.info","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","Computed","force","lastComputed","current","unwatch","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","keypathUtil.match","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","setValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","formatWatcherOptions","toNumber","min","insert","object.clear","delay","timer","args_1","array.toArray","handler","constant.EVENT_CHANGE","debounce","constant.EVENT_CLICK","constant.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","values_1","dataBinding","lazyValue","viewBinding_1","viewSyncing_1","element_1","control_1","eventName_1","sync_1","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","object.extend","rule","addComputed","method","placeholder","el","root","model_1","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","render","$template","Yox","snabbdom.create","domApi","plugin","install","templateCompiler.compile","templateGenerator.generate","getResource","setResource","addEvents","downward","$children","logger.error","PHASE_DOWNWARD","PHASE_UPWARD","$components","model_2","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","renderedSlots","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","renderComponentVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","renderRange","renderEqualRange","$keypath","defaultKeypath","scope","globalHolder","$item","logger.debug","$event","$data","vnodeList","lastScope","lastStack","concat","$length","myStack","runtimeKeypath","staticKeypath","lastVnode","childs","componentName","vnodeSlots","defaultRender","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","matchType","matched_1","required","addEvent","registry","componentCallback","queue","promise","then","formatValue","hasSlot"],"mappings":"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"}