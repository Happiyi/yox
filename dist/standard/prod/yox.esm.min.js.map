{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/valueHolder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/util/generator.ts","../../../../yox-template-compiler/src/generator.ts","../../../../yox-expression-compiler/src/generator.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import ValueHolder from '../../../yox-type/src/interface/ValueHolder'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst valueHolder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default valueHolder","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport valueHolder from './valueHolder'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Attribute from '../../yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Property from '../../yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from '../../yox-type/src/vnode/VNode'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, model, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      // 更新组件时，如果写了 <Component model=\"xx\"/>\n      // 必须把双向绑定的值写到 props 里，否则一旦 propTypes 加了默认值\n      // 传下去的数据就错了\n      if (isDef(model)) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model\n      }\n\n      const result = object.merge(props ? node.checkProps(props) : env.UNDEFINED, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as type from '../../yox-type/src/type'\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxOptions from '../../yox-type/src/options/Yox'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): type.data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = env.TRUE, offset = 0\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  let firstNode = nodes.shift() as Node,\n\n  { length } = nodes,\n\n  lookup = env.TRUE,\n\n  offset = 0\n\n  // member 要求至少两个节点\n  if (length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    let isLiteral = env.TRUE, staticNodes: string[] = [], runtimeNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (node.type === nodeType.LITERAL) {\n\n          const literal = node as Literal\n\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            return\n          }\n\n          if (literal.raw !== env.KEYPATH_CURRENT) {\n            array.push(\n              staticNodes,\n              toString(literal.value)\n            )\n          }\n\n        }\n        else {\n          isLiteral = env.FALSE\n        }\n\n        array.push(\n          runtimeNodes,\n          node\n        )\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      const identifier = firstNode as Identifier\n\n      lookup = identifier.lookup\n      offset += identifier.offset\n\n      let name = identifier.name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (name) {\n        array.unshift(staticNodes, name)\n      }\n\n      // a.b.c\n      if (isLiteral) {\n        // 转成 Identifier\n        name = array.join(staticNodes, keypathUtil.separator)\n        firstNode = createIdentifierInner(name, name, lookup, offset)\n      }\n      // a[b]\n      else {\n        firstNode = createMemberInner(raw, firstNode, env.UNDEFINED, runtimeNodes, lookup, offset)\n      }\n    }\n    else {\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, keypathUtil.separator),\n          env.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          env.UNDEFINED,\n          runtimeNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n","import * as env from '../../yox-common/src/util/env'\n\nexport const unary = {\n  '+': env.TRUE,\n  '-': env.TRUE,\n  '~': env.TRUE,\n  '!': env.TRUE,\n  '!!': env.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.RAW_MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.RAW_MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.RAW_MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw].value, raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, `不支持该语法`)\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, '表达式错误')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.RAW_MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(index, `三元表达式写法错误`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `结束字符匹配错误，期待[${String.fromCharCode(endCode as number)}]，却发现[${String.fromCharCode(instance.code)}]`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, ValueHolder> = {}\n\n// object.has 无法判断出 undefined，因此这里改成 ValueHolder 结构\nkeywordLiterals[env.RAW_TRUE] = { value: env.TRUE }\nkeywordLiterals[env.RAW_FALSE] = { value: env.FALSE }\nkeywordLiterals[env.RAW_NULL] = { value: env.NULL }\nkeywordLiterals[env.RAW_UNDEFINED] = { value: env.UNDEFINED }\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(ns: string, name: string, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: type.hint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle: tag === 'style',\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from '../../yox-config/src/config'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && array.has(selfClosingTagNames, element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`出栈节点类型不匹配`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.RAW_MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.RAW_MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child: Node, index: number) {\n        if (child.type === nodeType.TEXT) {\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                openIndex++\n              }\n              if (closeText) {\n                (children[closeIndex] as Text).text = closeText\n                closeIndex--\n              }\n\n              children.splice(openIndex, closeIndex - openIndex + 1)\n\n              openIndex = closeIndex = env.RAW_MINUS_ONE\n            }\n          }\n          else {\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的值不能用插值或 if 语法`)\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === config.DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === config.DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    isEvent = directive.ns === config.DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === config.DIRECTIVE_CUSTOM\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    let expr: ExpressionNode | void\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch {}\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal(`lazy 指令的值 [${raw}] 必须是大于 0 的数字`)\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          if ((expr as ExpressionCall).name.type !== exprNodeType.IDENTIFIER) {\n            fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (!eventPattern.test(raw) && !eventNamespacePattern.test(raw)) {\n            fatal('事件转换名称只能是 [name] 或 [name.namespace] 格式')\n          }\n          else if (currentElement\n            && currentElement.isComponent\n            && directive.name === raw\n          ) {\n            fatal('转换组件事件的名称不能相同')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal(`model 指令的值格式错误: [${raw}]`)\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          fatal(`${directive.ns} 指令的表达式错误: [${text}]`)\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, attrs, slot, children } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n        else if (!slot) {\n          fatal(`<template> 不写 slot 属性是几个意思？`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = config.SLOT_NAME_DEFAULT\n    }\n    // 补全 style 标签的 type\n\n    // style 如果没有 type 则加一个 type=\"text/css\"\n    // 因为低版本 IE 没这个属性，没法正常渲染样式\n\n    else {\n      let hasType = env.FALSE, hasValue = env.FALSE\n      if (attrs) {\n        array.each(\n          attrs,\n          function (attr) {\n\n            const name = attr.type === nodeType.PROPERTY\n              ? (attr as Property).name\n              : env.UNDEFINED\n\n            if (name === 'type') {\n              hasType = env.TRUE\n            }\n            else if (name === env.RAW_VALUE) {\n              hasValue = env.TRUE\n            }\n\n          }\n        )\n      }\n      if (element.isStyle && !hasType) {\n        array.push(\n          element.attrs || (element.attrs = []),\n          creator.createProperty('type', config.HINT_STRING, 'text/css')\n        )\n      }\n      // 低版本 IE 需要给 option 标签强制加 value\n      else if (tag === 'option' && !hasValue) {\n        element.isOption = env.TRUE\n      }\n    }\n\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('else 后面不能跟 else if 啊')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('只能写一个 else 啊')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('不写 if 是几个意思')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, env.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name),\n              env.EMPTY_STRING\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = string.lower(name)\n\n              // <slot> 、<template> 或 svg 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag] || currentElement.isSvg) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`${currentAttribute.name} 没有找到结束引号`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `each 不能写在属性的值里`\n                : `each 不能写在属性层级`\n            )\n          }\n        }\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = string.trim(terms[1]),\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `import 不能写在属性的值里`\n                : `import 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `partial 不能写在属性的值里`\n                : `partial 不能写在属性层级`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`延展属性只能用于组件属性`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === '/') {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`if 还没开始就结束了？`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ 和 }}} 无法配对`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ 和 }} 无法配对`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('找不到结束定界符')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal('{{{ 后面没字符串了？')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('{{ 后面没字符串了？')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('还有节点未出栈')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as env from './env'\nimport * as array from './array'\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), COMMA)})`\n}\n\nexport function toString(value: any): string {\n  return JSON.stringify(value)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as exprGenerator from '../../yox-expression-compiler/src/generator'\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_SLOT = 'q',\n\nRENDER_PARTIAL = 'r',\n\nRENDER_IMPORT = 's',\n\nRENDER_EACH = 't',\n\nTO_STRING = 'u',\n\nARG_STACK = 'v',\n\nCODE_RETURN = 'return '\n\n// 序列化代码的前缀\nlet codePrefix: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction getCodePrefix() {\n  if (!codePrefix) {\n    codePrefix = `function(${\n      array.join([\n        RENDER_EXPRESSION_IDENTIFIER,\n        RENDER_EXPRESSION_MEMBER_KEYPATH,\n        RENDER_EXPRESSION_MEMBER_LITERAL,\n        RENDER_EXPRESSION_CALL,\n        RENDER_TEXT_VNODE,\n        RENDER_ATTRIBUTE_VNODE,\n        RENDER_PROPERTY_VNODE,\n        RENDER_LAZY_VNODE,\n        RENDER_TRANSITION_VNODE,\n        RENDER_BINDING_VNODE,\n        RENDER_MODEL_VNODE,\n        RENDER_EVENT_METHOD_VNODE,\n        RENDER_EVENT_NAME_VNODE,\n        RENDER_DIRECTIVE_VNODE,\n        RENDER_SPREAD_VNODE,\n        RENDER_ELEMENT_VNODE,\n        RENDER_SLOT,\n        RENDER_PARTIAL,\n        RENDER_IMPORT,\n        RENDER_EACH,\n        TO_STRING,\n      ], generator.COMMA)\n    }){${CODE_RETURN}`\n  }\n  return codePrefix\n}\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: Object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${env.RAW_FUNCTION}(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, env.FALSE, env.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: generator.TRUE,\n        text: generator.EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (!isDef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (!isDef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (!isDef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (!isDef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    [data, tag, attrs, childs, slots]\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(config.SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: type.data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void\n\n  if (tag === env.RAW_SLOT) {\n    const args = [generator.toString(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          outputAttrs,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    data.tag = generator.toString(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = generator.TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = generator.TRUE\n  }\n\n  if (isOption) {\n    data.isOption = generator.TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = generator.TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(html, env.TRUE)\n  }\n\n  if (isComponent) {\n    data.isComponent = generator.TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, generator.COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      generator.toString(node.hint),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr } = node\n\n  if (ns === config.DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [generator.toString(name), generator.toString(value)]\n    )\n  }\n\n  if (ns === env.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [generator.toString(value)]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === config.DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === config.DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === config.DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === config.DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            CODE_RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, env.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [result]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      ),\n      renderExpression(node.from, env.TRUE),\n      node.to ? renderExpression(node.to, env.TRUE) : env.UNDEFINED,\n      node.equal ? generator.TRUE : env.UNDEFINED,\n      node.index ? generator.toString(node.index) : env.UNDEFINED\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n  return getCodePrefix() + nodeGenerator[node.type](node) + '}'\n}\n\nexport function hasGenerated(code: string): boolean {\n  return string.startsWith(code, getCodePrefix())\n}","import * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = env.FALSE,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      env.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = env.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          identifier.lookup ? generator.TRUE : env.UNDEFINED,\n          identifier.offset > 0 ? generator.toString(identifier.offset) : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED,\n          depIgnore ? generator.TRUE : env.UNDEFINED,\n          stack ? stack : env.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = env.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            lookup ? generator.TRUE : env.UNDEFINED,\n            offset > 0 ? generator.toString(offset) : env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n            depIgnore ? generator.TRUE : env.UNDEFINED,\n            stack ? stack : env.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            env.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            holder ? generator.TRUE : env.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = env.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  // 不需要 value holder\n  if (!holder) {\n    return value\n  }\n\n  // 内部的临时值，且 holder 为 true\n  if (inner) {\n    return isSpecialNode\n      ? value + '.' + env.RAW_VALUE\n      : value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([env.RAW_VALUE + generator.COLON + value])\n\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport valueHolder from '../../yox-common/src/util/valueHolder'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nexport function render(\n  context: Yox,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: type.data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = valueHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`Can't find [${keypath}], start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): type.getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: type.hint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: type.lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`transition [${name}] is not found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: type.hint): any {\n\n    const key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: holder.keypath,\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n\n    $vnode.model = holder.value\n\n    setPair(\n      $vnode,\n      'directives',\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        binding: holder.keypath,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`directive [${name}] is not found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(config.DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks: directives[config.DIRECTIVE_BINDING],\n              binding: keypathUtil.join(keypath, env.RAW_WILDCARD),\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: type.data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component [${tag}] is not found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, keypathUtil.separator)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], keypathUtil.separator)\n    }\n    const match = object.get(value, staticKeypath as string)\n    valueHolder.keypath = env.UNDEFINED\n    valueHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? valueHolder : valueHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    valueHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    valueHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? valueHolder : valueHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`partial [${name}] is not found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ValueHolder,\n    to: ValueHolder | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = from.value,\n\n    fromKeypath = from.keypath\n\n    if (to) {\n      let toValue = to.value, count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    toString\n  )\n\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as type from '../../yox-type/src/type'\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport API from '../../yox-type/src/interface/API'\nimport SpecialEventHooks from '../../yox-type/src/hooks/SpecialEvent'\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n      : (env.DOCUMENT as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (env.DOCUMENT as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (env.DOCUMENT as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      const holder = object.get(node, name)\n      if (holder) {\n        return holder.value\n      }\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value as string\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, beforeNode: Node): void {\n    parentNode.insertBefore(node, beforeNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return string.lower((node as HTMLElement).tagName)\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = text as string\n          }\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = html as string\n          }\n          node[innerHTML] = html as string\n        }\n      }\n      else {\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      return node[innerHTML]\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        const customEvent = event instanceof CustomEvent\n          ? event\n          : new CustomEvent(event.type, createEvent(event, node))\n\n        if (customEvent.type !== type) {\n          customEvent.type = type\n        }\n\n        emitter.fire(type, [customEvent])\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n\n    emitter.on(type, listener)\n  },\n\n  off(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n    if (process.env.NODE_ENV === 'development') {\n      if (specialEvents[type]) {\n        logger.error(`Special event \"${type}\" is existed.`)\n      }\n      logger.info(`Special event \"${type}\" add success.`)\n    }\n    specialEvents[type] = hooks\n  },\n\n}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nconst directive: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive, { lazy } = vnode\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n\n      const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n      if (value === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else if (value > 0) {\n        handler = debounce(\n          handler,\n          value,\n          // 避免连续多次点击，主要用于提交表单场景\n          // 移动端的 tap 事件可自行在业务层打补丁实现\n          name === env.EVENT_CLICK || name === env.EVENT_TAP\n        )\n      }\n\n    }\n\n    if (vnode.isComponent) {\n\n      (node as Yox).on(name, handler)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(name, handler as type.listener)\n      }\n\n    }\n    else {\n\n      api.on(node as HTMLElement, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(node as HTMLElement, name, handler as type.listener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: type.lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: Yox) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n},\n\ndirective: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { context, lazy, isComponent } = vnode,\n\n    dataBinding = directive.binding as string,\n\n    lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n    set: type.watcher | void,\n\n    sync: type.watcher,\n\n    unbind: Function\n\n    if (isComponent) {\n\n      let component = node as Yox,\n\n      viewBinding = component.$model as string\n\n      set = function (newValue: any) {\n        if (set) {\n          component.set(viewBinding, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function (newValue: any) {\n          context.set(dataBinding, newValue)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        component.unwatch(viewBinding, sync)\n      }\n\n      component.watch(viewBinding, sync)\n\n    }\n    else {\n\n      let element = node as HTMLElement,\n\n      control = vnode.tag === 'select'\n        ? selectControl\n        : inputControl,\n\n      // checkbox,radio,select 监听的是 change 事件\n      eventName = env.EVENT_CHANGE\n\n      if (control === inputControl) {\n        const type = (node as HTMLInputElement).type\n        if (inputTypes[type]) {\n          control = inputTypes[type]\n        }\n        // 如果是输入框，则切换成 model 事件\n        // model 事件是个 yox-dom 实现的特殊事件\n        // 不会在输入法组合文字过程中得到触发事件\n        else if (lazyValue !== env.TRUE) {\n          eventName = env.EVENT_MODEL\n        }\n      }\n\n      set = function (newValue: any) {\n        if (set) {\n          control.set(element, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function () {\n          control.sync(element, dataBinding, context)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        api.off(element, eventName, sync as type.listener)\n      }\n\n      api.on(element, eventName, sync as type.listener)\n\n      control.set(element, vnode.model)\n\n    }\n\n    // 监听数据，修改界面\n    context.watch(dataBinding, set as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      context.unwatch(dataBinding, set as type.watcher)\n      set = env.UNDEFINED\n      unbind()\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as type from '../../../yox-type/src/type'\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nimport api from '../../../yox-dom/src/dom'\n\nconst directive: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    let binding = directive.binding as string,\n\n    isFuzzy = keypathUtil.isFuzzy(binding),\n\n    watcher: type.watcher | void = function (newValue: any, _: any, keypath: string) {\n\n      if (watcher) {\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          const component = node as Yox\n          component.set(name, component.checkProp(name, newValue))\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n      }\n\n    }\n\n    vnode.context.watch(binding, watcher as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      vnode.context.unwatch(binding, watcher as type.watcher)\n      watcher = env.UNDEFINED\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateGenerator.hasGenerated(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'development') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateGenerator.generate(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static checkProp(key: string, value: any, rule: PropRule): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      // 类型\n      const type = rule.type,\n\n      // 默认值\n      defaultValue = rule.value\n\n      // 传了数据\n      if (isDef(value)) {\n\n        if (process.env.NODE_ENV === 'development') {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n\n            // 自定义函数判断是否匹配类型\n            // 自己打印警告信息吧\n            if (is.func(type)) {\n              (type as type.propType)(key, value)\n            }\n            else {\n\n              let matched = env.FALSE\n\n              // type: 'string'\n              if (!string.falsy(type)) {\n                matched = matchType(value, type as string)\n              }\n              // type: ['string', 'number']\n              else if (!array.falsy(type)) {\n                array.each(\n                  type as string[],\n                  function (item: string) {\n                    if (matchType(value, item)) {\n                      matched = env.TRUE\n                      return env.FALSE\n                    }\n                  }\n                )\n              }\n\n              if (!matched) {\n                logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n              }\n\n            }\n\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n        }\n\n      }\n      else {\n\n        if (process.env.NODE_ENV === 'development') {\n          // 没传值但此项是必传项\n          if (rule.required) {\n            logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n          }\n        }\n\n        // 没传值但是配置了默认值\n        if (isDef(defaultValue)) {\n          value = type === env.RAW_FUNCTION\n            ? defaultValue\n            : is.func(defaultValue)\n              ? (defaultValue as type.propValue)()\n              : defaultValue\n        }\n\n      }\n    }\n\n    return value\n\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'development') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源\n    const source = instance.checkProps(props || {})\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件的直接父组件\n      if (parent) {\n        instance.$parent = parent\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (vnode) {\n        instance.$context = vnode.context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'development') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): type.data {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const result = object.copy(props)\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            result[key] = Yox.checkProp(key, props[key], rule)\n          }\n        )\n        return result\n      }\n    }\n    return props\n  }\n\n  checkProp(key: string, value: any): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          value = Yox.checkProp(key, value, rule)\n        }\n      }\n    }\n    return value\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","KEYPATH_PARENT","KEYPATH_CURRENT","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","offset","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","valueHolder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","msg","tag","log","warn","error","Error","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","ns_1","matchListener_1","createMatchListener","object.each","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","model","isComponent","$model","object.merge","checkProps","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifierInner","lookup","nodeType.IDENTIFIER","createMemberInner","lead","nodes","nodeType.MEMBER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","createMemberIfNeeded","firstNode","shift","isLiteral_1","staticNodes_1","runtimeNodes_1","literal","identifier","array.join","keypathUtil.separator","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","message","env.RAW_TRUE","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","expr","nodeType.DIRECTIVE","keypathUtil.join","createProperty","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","element","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","exprNodeType.IDENTIFIER","binding","exprCompiler.compile","exprNodeType.LITERAL","partial","attrs","hasType_1","hasValue_1","env.RAW_VALUE","creator.createProperty","config.HINT_STRING","config.SLOT_NAME_DEFAULT","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","creator.createElement","config.DIRECTIVE_MODEL","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","event","config.DIRECTIVE_EVENT","config.DIRECTIVE_LAZY","lazy","config.DIRECTIVE_CUSTOM","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","config.SYNTAX_EACH","terms","index_1","parts","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","parse","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","length_1","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","codePrefix","isStringRequired","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","TO_STRING","ARG_STACK","CODE_RETURN","getCodePrefix","generator.COMMA","renderExpression","holder","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","fields_1","generator.toObject","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyObject","obj","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","stringifyConditionChildren","renderElement","childs","setPair","render","template","filters","partials","transitions","$scope","$keypath","$stack","vnodeStack","localPartials","findValue","defaultKeypath","scope","$item","object.get","createMethodListener","method","$event","$data","createGetter","getter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","config.DIRECTIVE_BINDING","hooks","renderModelVnode","renderEventMethodVnode","handler","renderEventNameVnode","fire","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","componentName","renderSlots_1","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachHandler","lastScope","lastStack","concat","$length","fromValue","fromKeypath","toValue","count","outputTag","outputChilds","outputSlots","outputAttrs","config.SLOT_DATA_PREFIX","addSlot","array.falsy","object.falsy","getComponentSlots","renderName","exprNodeType.CALL","stringifyIf","generator.EMPTY","generator.NOT","generator.AND","sync","deps","observer","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","emitter","on","formatWatcherOptions","min","insert","array.remove","object.clear","addEventListener","removeEventListener","addClass","className","classList","removeClass","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","setAttribute","value_1","getAttribute","removeAttribute","beforeNode","appendChild","removeChild","nextSibling","find","selector","querySelector","nodeType","nativeListeners","special","nativeListener","customEvent","createEvent","addSpecialEvent","delay","timer","args_1","array.toArray","arguments","locked","debounce","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checked","checkbox","removeAt","dataBinding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","type_1","checkProp","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","LOADER_QUEUE","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","Yox","events","methods","watchers","extensions","object.extend","addComputed","$emitter","placeholder","el","root","model_1","components","$root","$parent","$context","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","afterCreateHook","$template","plugin","install","templateCompiler.compile","rule","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","modelKey","modelValue","$el","$directives","$transitions","$partials","$filters","templateRender.render","afterHook_1","instance_1","$options_1","snabbdom.patch","propTypes","result_1","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","config.HOOK_AFTER_CREATE","addEvent","loader_1","queue_1","formatValue","hasSlot"],"mappings":"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"}