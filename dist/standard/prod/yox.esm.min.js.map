{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-config/src/config.ts","../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/holder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-template-compiler/src/nodeType.ts","../../../../yox-template-compiler/src/helper.ts","../../../../yox-template-compiler/src/creator.ts","../../../../yox-template-compiler/src/platform/web.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-expression-compiler/src/nodeType.ts","../../../../yox-expression-compiler/src/creator.ts","../../../../yox-expression-compiler/src/interpreter.ts","../../../../yox-expression-compiler/src/compiler.ts","../../../../yox-template-compiler/src/compiler.ts","../../../../yox-common/src/util/generator.ts","../../../../yox-template-compiler/src/generator.ts","../../../../yox-expression-compiler/src/generator.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  CustomEventInterface,\n} from '../../../yox-type/src/emitter'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += env.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  const list = splitCache.hasOwnProperty(keypath)\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(env.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + env.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import { ValueHolder } from '../../../yox-type/src/type'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder\n} from '../../../yox-type/src/type'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\ndefaultLogLevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = env.WINDOW && /edge|msie|trident/i.test(env.WINDOW.navigator.userAgent)\n  ? env.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : env.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (env.GLOBAL) {\n    const logLevel = env.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from '../../../yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\nimport {\n  Namespace,\n  EmitterInterface,\n} from '../../../yox-type/src/emitter'\n\nimport execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | Namespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | Namespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == env.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | Namespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: env.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, env.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from '../../../yox-type/src/type'\n\nimport {\n  NextTaskInterface,\n} from '../../../yox-type/src/yox'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n  Attribute,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import {\n  VNode,\n  Property\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import {\n  VNode,\n  Directive,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL\n} from '../../yox-config/src/config'\n\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from '../../yox-type/src/type'\n\nimport {\n  DomApi,\n} from '../../yox-type/src/api'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../../yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string | void): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: env.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from '../../../yox-config/src/config'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[$A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return env.TRUE\n  }\n  // <div data-name checked>\n  else {\n    return string.startsWith(name, 'data-')\n      ? env.EMPTY_STRING\n      : name\n  }\n}\n\nexport function createElement(tagName: string) {\n\n  let isSvg = array.has(svgTagNames, tagName), isComponent = env.FALSE\n\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (!isSvg && componentNamePattern.test(tagName)) {\n    isComponent = env.TRUE\n  }\n\n  return creator.createElement(\n    tagName,\n    isSvg,\n    tagName === 'style',\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = env.FALSE, hasValue = env.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : env.UNDEFINED\n\n        if (name === 'type') {\n          hasType = env.TRUE\n        }\n        else if (name === env.RAW_VALUE) {\n          hasValue = env.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = env.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return env.TRUE\n  }\n}","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import toString from '../../yox-common/src/function/toString'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = env.TRUE, offset = 0\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个节点\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  // 第一个节点要特殊处理\n  let firstNode = nodes.shift() as Node,\n\n  // 是否向上查找\n  lookup = env.TRUE,\n\n  // 偏移量，默认从当前 context 开始查找\n  offset = 0\n\n  // 表示传入的 nodes 至少有两个节点（弹出了一个）\n  if (nodes.length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    // 是否全是 Literal 节点\n    let isLiteral = env.TRUE,\n\n    // 静态节点\n    staticNodes: string[] = [],\n\n    // 对于 this.a.b[c] 这样的\n    // 要还原静态部分 this.a.b 的 raw\n    // 虽然 raw 没什么大用吧，谁让我是洁癖呢\n    staticRaw = env.EMPTY_STRING,\n\n    // 动态节点\n    dynamicNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (isLiteral) {\n          if (node.type === nodeType.LITERAL) {\n            if ((node as Literal).raw === env.KEYPATH_PARENT) {\n              offset += 1\n              staticRaw = staticRaw\n                ? staticRaw + env.RAW_SLASH + env.KEYPATH_PARENT\n                : env.KEYPATH_PARENT\n              return\n            }\n            if ((node as Literal).raw !== env.KEYPATH_CURRENT) {\n              const value = toString((node as Literal).value)\n              array.push(\n                staticNodes,\n                value\n              )\n              if (staticRaw) {\n                staticRaw += string.endsWith(staticRaw, env.KEYPATH_PARENT)\n                  ? env.RAW_SLASH\n                  : env.RAW_DOT\n              }\n              staticRaw += value\n            }\n          }\n          else {\n            isLiteral = env.FALSE\n          }\n        }\n\n        if (!isLiteral) {\n          array.push(\n            dynamicNodes,\n            node\n          )\n        }\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 static keypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      lookup = (firstNode as Identifier).lookup\n      offset += (firstNode as Identifier).offset\n\n      let firstName = (firstNode as Identifier).name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (firstName) {\n        array.unshift(staticNodes, firstName)\n      }\n\n      // 转成 Identifier\n      firstName = array.join(staticNodes, env.RAW_DOT)\n\n      // 当 isLiteral 为 false 时\n      // 需要为 lead 节点创建合适的 raw\n      let firstRaw = (firstNode as Identifier).raw\n      if (staticRaw) {\n        firstRaw += (\n          firstRaw === env.KEYPATH_PARENT\n          ? env.RAW_SLASH\n          : env.RAW_DOT\n        ) + staticRaw\n      }\n\n      // a.b.c\n      if (isLiteral) {\n        firstNode = createIdentifierInner(raw, firstName, lookup, offset)\n      }\n      // a[b]\n      // this.a[b]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          createIdentifierInner(firstRaw, firstName, lookup, offset),\n          env.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n    else {\n      // 例子：\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, env.RAW_DOT),\n          env.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // 例子：\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          env.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n","import * as env from '../../yox-common/src/util/env'\n\nexport const unary = {\n  '+': env.TRUE,\n  '-': env.TRUE,\n  '~': env.TRUE,\n  '!': env.TRUE,\n  '!!': env.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from '../../yox-common/src/function/isDef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = env.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? env.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(env.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, 'The operator \"++\" is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, 'The operator \"--\" is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = env.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary(index)\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary(index)\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(env.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from '../../yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from '../../yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from '../../yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from '../..//yox-expression-compiler/src/node/Identifier'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 调用的方法\nmethodPattern = /^[_$a-z]([\\w]+)?$/,\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex) {\n          if (node.isComplex || isElement) {\n            currentBranch.isComplex = env.TRUE\n          }\n          // <div {{#if xx}} xx{{/if}}>\n          else if (currentElement\n            && currentElement !== currentBranch\n            && (isAttribute || isProperty || isDirective)\n          ) {\n            currentBranch.isComplex = env.TRUE\n          }\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = env.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The type of poping node is not expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = env.MINUS_ONE,\n\n    openText = env.EMPTY_STRING,\n\n    closeIndex = env.MINUS_ONE,\n\n    closeText = env.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          // 有了结束 index，这里的任务是配对开始 index\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              let startIndex = openIndex, endIndex = closeIndex\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                startIndex++\n              }\n              if (closeText) {\n                // 合并开始和结束文本，如 1<!-- {{x}}{{y}} -->2\n                // 这里要把 1 和 2 两个文本节点合并成一个\n                if (openText) {\n                  (children[openIndex] as Text).text += closeText\n                }\n                else {\n                  (children[closeIndex] as Text).text = closeText\n                  endIndex--\n                }\n              }\n\n              children.splice(startIndex, endIndex - startIndex + 1)\n\n              // 重置，再继续寻找结束 index\n              openIndex = closeIndex = env.MINUS_ONE\n            }\n          }\n          else {\n            // 从后往前遍历\n            // 一旦发现能匹配 --> 就可以断定这是注释的结束 index\n            // 剩下的就是找开始 index\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      env.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (setElementText(element, child.text)) {\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal('The value of lazy must be a number greater than 0.')\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          let methodName = (expr as ExpressionCall).name\n          if (methodName.type !== exprNodeType.IDENTIFIER) {\n            fatal('Invalid method name.')\n          }\n          // 函数调用调用方法，因此不能是 a.b() 的形式\n          else if (!methodPattern.test((methodName as ExpressionIdentifier).name)) {\n            fatal('Invalid method name.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(env.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal('The value of the model must be an identifier.')\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      // 自定义指令支持错误的表达式\n      // 反正是自定义的规则，爱怎么写就怎么写\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === env.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === env.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        // 这里不能写 currentElement && !currentAttribute，举个例子\n        //\n        // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n        //\n        // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n        if (currentElement && currentBranch.type === nodeType.ELEMENT) {\n          const attrs = currentElement.attrs || (currentElement.attrs = [])\n          // node 没法转型，一堆可能的类型怎么转啊...\n          array.push(attrs, node as any)\n        }\n        else {\n          const children = currentBranch.children || (currentBranch.children = []),\n          lastChild = array.last(children)\n          // 连续添加文本节点，则直接合并\n          if (lastChild\n            && lastChild.type === nodeType.TEXT\n            && node.type === nodeType.TEXT\n          ) {\n            (lastChild as Text).text += (node as Text).text\n            return\n          }\n          else {\n            array.push(children, node)\n          }\n        }\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, env.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === env.RAW_SLASH) {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            const node = createElement(tag)\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === env.RAW_SLASH) {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              env.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(event).split(env.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_EVENT,\n              diectiveModifier\n            )\n            // on-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid event namespace.')\n              }\n            }\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const [directiveName, diectiveModifier, extra] = string.camelize(custom).split(env.RAW_DOT)\n            node = creator.createDirective(\n              directiveName,\n              DIRECTIVE_CUSTOM,\n              diectiveModifier\n            )\n            // o-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(extra)) {\n                fatal('Invalid directive modifier.')\n              }\n            }\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, env.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, env.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = terms[1] ? string.trim(terms[1]) : env.UNDEFINED,\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                env.UNDEFINED,\n                env.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, blockMode === BLOCK_MODE_SAFE)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === env.RAW_SLASH) {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = env.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = env.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it does't opened.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return env.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return env.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (env.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, env.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as env from './env'\nimport * as array from './array'\n\nexport const UNDEFINED = '$'\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n *\n * [a, undefined, undefined] => [a]\n * [a, undefined, b, undefined] => [a, undefined, b]\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), COMMA)})`\n}\n\nexport function toString(value: any): string {\n  return JSON.stringify(value)\n}\n\nexport function toFunction(args: string, code: string) {\n  return `${env.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0;${RETURN}${code}}`\n}","import {\n  Data,\n} from '../../yox-type/src/type'\n\nimport {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as exprGenerator from '../../yox-expression-compiler/src/generator'\nimport * as exprNodeType from '../../yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from '../../yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from '../../yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from '../../yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_ELEMENT_VNODE = 'p',\n\nRENDER_SLOT = 'q',\n\nRENDER_PARTIAL = 'r',\n\nRENDER_IMPORT = 's',\n\nRENDER_EACH = 't',\n\nRENDER_RANGE = 'u',\n\nRENDER_EQUAL_RANGE = 'v',\n\nTO_STRING = 'w',\n\nARG_STACK = 'x'\n\n\n// 序列化代码的参数列表\nlet codeArgs: string | void,\n\n// 表达式求值是否要求返回字符串类型\nisStringRequired: boolean | void\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${env.RAW_FUNCTION}(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(expr: ExpressionNode, toString: boolean | void): string {\n  const value = renderExpression(expr)\n  return toString\n    ? generator.toCall(\n      TO_STRING,\n      [\n        value\n      ]\n    )\n    : value\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode, toString: boolean | void): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      stringifyExpression(expr, toString)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, env.FALSE, env.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeGenerator[child.type](child)\n      }\n    ),\n    isJoin ? generator.PLUS : generator.COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: generator.TRUE,\n        text: generator.EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    const isJoin = array.last(joinStack)\n\n    if (isJoin) {\n      if (isUndef(yes)) {\n        yes = generator.EMPTY\n      }\n      if (isUndef(no)) {\n        no = generator.EMPTY\n      }\n    }\n\n    if (isUndef(no)) {\n      result = test + generator.AND + yes\n    }\n    else if (isUndef(yes)) {\n      result = generator.NOT + test + generator.AND + no\n    }\n    else {\n      result = test + generator.QUESTION + yes + generator.COLON + no\n    }\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return isJoin\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return generator.EMPTY\n\n}\n\nfunction renderElement(data: string, tag: string | void, attrs: string | void, childs: string | void, slots: string | void): string {\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    [data, tag, attrs, childs, slots]\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === env.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      result[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isOption, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Data = {},\n\n  outputTag: string | void,\n\n  outputAttrs: string[] = [],\n\n  outputChilds: string | void,\n\n  outputSlots: string | void\n\n  if (tag === env.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          outputAttrs,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  // 如果以 $ 开头，表示动态组件\n  if (string.codeAt(tag) === 36) {\n    outputTag = generator.toString(string.slice(tag, 1))\n  }\n  else {\n    data.tag = generator.toString(tag)\n  }\n\n  if (isSvg) {\n    data.isSvg = generator.TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = generator.TRUE\n  }\n\n  if (isOption) {\n    data.isOption = generator.TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = generator.TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = is.string(html)\n      ? generator.toString(html)\n      : stringifyExpression(html as ExpressionNode, env.TRUE)\n  }\n\n  if (isComponent) {\n    data.isComponent = generator.TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      outputSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    outputChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      outputChilds = stringifyFunction(outputChilds)\n    }\n    else {\n      data.text = outputChilds\n      outputChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    outputTag,\n    array.falsy(outputAttrs)\n      ? env.UNDEFINED\n      : stringifyFunction(\n          array.join(outputAttrs, generator.COMMA)\n        ),\n    outputChilds,\n    outputSlots\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, env.TRUE, env.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      generator.toString(node.hint),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === env.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, env.TRUE, env.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, env.UNDEFINED) // method\n        array.push(args, env.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, env.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return generator.toCall(\n      RENDER_TEXT_VNODE,\n      [\n        result\n      ]\n    )\n  }\n\n  return result\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyExpressionVnode(\n      node.expr,\n      isStringRequired\n    )\n  }\n\n  return stringifyExpression(\n    node.expr,\n    isStringRequired\n  )\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          node.index ? generator.toString(node.index) : env.UNDEFINED\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        node.index ? generator.toString(node.index) : env.UNDEFINED\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, env.TRUE),\n      node.index ? generator.toString(node.index) : env.UNDEFINED\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[], node.isComplex)\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n      TO_STRING,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as generator from '../../yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = env.FALSE,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      env.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generateChildNode((node as Binary).left)\n        + (node as Binary).operator\n        + generateChildNode((node as Binary).right)\n      break\n\n    case nodeType.TERNARY:\n      value = generateChildNode((node as Ternary).test)\n        + generator.QUESTION\n        + generateChildNode((node as Ternary).yes)\n        + generator.COLON\n        + generateChildNode((node as Ternary).no)\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = env.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          identifier.lookup ? generator.TRUE : env.UNDEFINED,\n          identifier.offset > 0 ? generator.toString(identifier.offset) : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED,\n          depIgnore ? generator.TRUE : env.UNDEFINED,\n          stack ? stack : env.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = env.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            lookup ? generator.TRUE : env.UNDEFINED,\n            offset > 0 ? generator.toString(offset) : env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n            depIgnore ? generator.TRUE : env.UNDEFINED,\n            stack ? stack : env.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            env.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            holder ? generator.TRUE : env.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            env.UNDEFINED,\n            holder ? generator.TRUE : env.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = env.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : env.UNDEFINED,\n          holder ? generator.TRUE : env.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  // 不需要 value holder\n  if (!holder) {\n    return value\n  }\n\n  // 内部的临时值，且 holder 为 true\n  if (inner) {\n    return isSpecialNode\n      ? value + env.RAW_DOT + env.RAW_VALUE\n      : value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([env.RAW_VALUE + generator.COLON + value])\n\n}\n","import {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport globalHolder from '../../yox-common/src/util/holder'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport Observer from '../../yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: PropertyHint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            KEY_DIRECTIVES,\n            key,\n            {\n              ns: DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              modifier: keypathUtil.join(keypath, env.RAW_WILDCARD),\n              hooks: directives[DIRECTIVE_BINDING],\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: Data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = observer.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`The dynamic component \"${tag}\" can't be found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, env.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], env.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = env.UNDEFINED\n    globalHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${name}\" is rendered.`)\n      }\n      renderedSlots[name] = env.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, env.EMPTY_STRING + i)\n            : env.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange,\n    toString\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from '../../yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  HINT_BOOLEAN\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = env.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (env.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (env.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (env.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, env.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string, hint?: number): void {\n  object.set(\n    node,\n    name,\n    hint === HINT_BOOLEAN\n      ? env.FALSE\n      : env.EMPTY_STRING,\n    env.FALSE\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != env.NULL) {\n      return value as string\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = env.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" is existed.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  Namespace,\n} from '../../../yox-type/src/emitter'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: Namespace, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../../yox-type/src/options'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from '../../yox-type/src/options'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from '../../../yox-config/src/config'\n\nimport execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n    if (value === env.TRUE) {\n      name = env.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === env.EVENT_CLICK || name === env.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += env.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from '../../../yox-config/src/config'\n\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n}\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = env.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== env.TRUE) {\n        eventName = env.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = env.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = env.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Watcher,\n  Listener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  WatcherOptions,\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from '../../yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as domApi from '../../yox-dom/src/dom'\n\nimport Observer from '../../yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\ntype YoxClass = typeof Yox\ntype EmitterClass = typeof Emitter\ntype CustomEventClass = typeof CustomEvent\n\ntype YoxPlugin = {\n  install(Yox: YoxClass): void\n}\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox<Computed, Watchers, Events, Methods> implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event: CustomEventClass = CustomEvent\n  public static Emitter: EmitterClass = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(\n    options?: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n\n    const instance = this, $options: ComponentOptions = options || env.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === env.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, Listener<this>>,\n    listener?: Listener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, Listener<this>>,\n    listener?: Listener<this>\n  ): this {\n    addEvents(this, type, listener, env.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (isUndef(event.ns)) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    isComplete = $emitter.fire(event, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, Watcher<this> | WatcherOptions<this>>,\n    watcher?: Watcher<this> | WatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: YoxInterface, watchers: Record<string, Watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  if (process.env.NODE_ENV !== 'pure') {\n    execute(instance.$options[HOOK_AFTER_CREATE], instance)\n    instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Listener>,\n  listener?: Listener,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Listener, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return env.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return isDef((this as YoxInterface).get(SLOT_DATA_PREFIX + name))\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","MODEL_PROP_DEFAULT","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","RAW_SLASH","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","CustomEvent","[object Object]","type","originalEvent","this","phase","PHASE_CURRENT","instance","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","env.MINUS_ONE","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","env.RAW_DOT","list","hasOwnProperty","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","env.EMPTY_FUNCTION","stylePrefix","env.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","env.GLOBAL","logLevel","getStyle","backgroundColor","Error","Emitter","ns","listeners","filter","namespace","parse","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","name","matchListener","createMatchListener","object.each","string.indexOf","string.slice","matchTrue","nextTick","setImmediate","isNative","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","shared","NextTask","tasks","run","array.unshift","task","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","once","bind","unbind","hooks","ref","props","slots","isComponent","model","$model","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","env.RAW_TEMPLATE","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","expr","nodeType.PROPERTY","createEach","from","to","equal","isComplex","nodeType.TEXT","isLeaf","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","tagName","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifier","isProp","lookup","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","createIdentifierInner","nodeType.LITERAL","createMemberIfNeeded","nodes","firstNode","shift","isLiteral","staticNodes","staticRaw","dynamicNodes","env.RAW_SLASH","string.endsWith","nodeType.IDENTIFIER","firstName","array.join","firstRaw","createMemberInner","lead","nodeType.MEMBER","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","message","env.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","element","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","setElementText","safe","replaceChild","toNumber","exprNodeType.IDENTIFIER","binding","getAttributeDefaultValue","exprCompiler.compile","e","exprNodeType.LITERAL","partial","attrs","hasType","env.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","lastChild","stub","addTextChild","creator.createText","htmlParsers","env.RAW_TRANSITION","creator.createDirective","directiveName","diectiveModifier","extra","string.camelize","lazy","custom","creator.createAttribute","lowerName","string.lower","helper.specialTags","blockParsers","source","terms","literal","parts","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","COMMA","COLON","PLUS","AND","QUESTION","NOT","EMPTY","RETURN","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","toFunction","joinStack","collectStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_ELEMENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","TO_STRING","ARG_STACK","codeArgs","isStringRequired","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","generateChildNode","generator.toString","generator.QUESTION","generator.COLON","generator.toArray","map","generator.toObject","identifier","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyObject","obj","stringifyFunction","stringifyGroup","stringifyExpression","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","generator.PLUS","generator.COMMA","stringifyConditionChildren","renderElement","childs","setPair","outputTag","outputChilds","outputSlots","outputAttrs","addSlot","array.falsy","object.falsy","getComponentSlots","renderName","exprNodeType.CALL","generator.RETURN","stringifyExpressionVnode","stringifyIf","generator.EMPTY","isUndef","generator.AND","generator.NOT","KEY_DIRECTIVES","innerText","innerHTML","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","createEvent","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.remove","EMITTER","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","getAttribute","appendChild","env.EVENT_MODEL","locked","on","find","selector","querySelector","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","Computed","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","force","lastComputed","current","unwatch","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","Observer","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","object.sort","formatWatcherOptions","min","insert","object.clear","delay","timer","array.toArray","arguments","handler","env.EVENT_CHANGE","debounce","env.EVENT_CLICK","env.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","dataBinding","lazyValue","viewBinding","viewSyncing","control","eventName","checkProp","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","Yox","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","object.extend","rule","addComputed","method","placeholder","el","root","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","snabbdom.create","domApi","plugin","install","templateCompiler.compile","generator.toFunction","getResource","setResource","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","$directives","$transitions","$partials","$filters","$scope","$keypath","$stack","vnodeStack","localPartials","findValue","defaultKeypath","scope","globalHolder","$item","createMethodListener","$event","$data","createGetter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","componentName","renderSlots","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","renderPartial","renderImport","renderEach","renderRange","renderEqualRange","eachHandler","lastScope","lastStack","concat","$length","templateRender.render","afterHook","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","addEvent","registry","componentCallback","queue","promise","then","formatValue","logger"],"mappings":"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"}