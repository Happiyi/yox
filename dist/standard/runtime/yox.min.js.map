{"version":3,"file":"yox.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-common/src/util/stringify.ts","../../../../yox-common/src/function/toJSON.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["import ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nexport const VALUE_HOLDER: ValueHolder = {\n  value: UNDEFINED\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            env.VALUE_HOLDER.value = value\n            object = env.VALUE_HOLDER\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Attribute from '../../yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Property from '../../yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from '../../yox-type/src/vnode/VNode'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, model, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      // 更新组件时，如果写了 <Component model=\"xx\"/>\n      // 必须把双向绑定的值写到 props 里，否则一旦 propTypes 加了默认值\n      // 传下去的数据就错了\n      if (isDef(model)) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model\n      }\n\n      const result = object.merge(props ? node.checkProps(props) : env.UNDEFINED, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as type from '../../yox-type/src/type'\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxOptions from '../../yox-type/src/options/Yox'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): type.data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","import isDef from '../function/isDef'\nimport toJSON from '../function/toJSON'\n\nimport * as env from './env'\nimport * as array from './array'\n\nconst SEP_COMMA = ','\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const EMPTY = toJSON(env.EMPTY_STRING)\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, SEP_COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), SEP_COMMA)})`\n}\n\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport Yox from '../../yox-type/src/interface/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nexport function render(\n  context: Yox,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: type.data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = env.VALUE_HOLDER\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`Can't find [${keypath}], start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): type.listener {\n    return function (event: CustomEvent, data?: type.data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): type.getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: type.hint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: type.lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`transition [${name}] is not found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: type.hint): any {\n\n    const key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: holder.keypath,\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n\n    $vnode.model = holder.value\n\n    setPair(\n      $vnode,\n      'directives',\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        binding: holder.keypath,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`directive [${name}] is not found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      'directives',\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(config.DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks: directives[config.DIRECTIVE_BINDING],\n              binding: keypathUtil.join(keypath, env.RAW_WILDCARD),\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: type.data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component [${tag}] is not found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, keypathUtil.separator)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], keypathUtil.separator)\n    }\n    const result = env.VALUE_HOLDER, match = object.get(value, staticKeypath as string)\n    result.keypath = env.UNDEFINED\n    result.value = match ? match.value : env.UNDEFINED\n    return holder ? result : result.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    const result = env.VALUE_HOLDER\n    result.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    result.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? result : result.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`partial [${name}] is not found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ValueHolder,\n    to: ValueHolder | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = from.value,\n\n    fromKeypath = from.keypath\n\n    if (to) {\n      let toValue = to.value, count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    toString\n  )\n\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as type from '../../yox-type/src/type'\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nimport API from '../../yox-type/src/interface/API'\nimport SpecialEventHooks from '../../yox-type/src/hooks/SpecialEvent'\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n      : (env.DOCUMENT as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (env.DOCUMENT as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (env.DOCUMENT as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      const holder = object.get(node, name)\n      if (holder) {\n        return holder.value\n      }\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value as string\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, beforeNode: Node): void {\n    parentNode.insertBefore(node, beforeNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return string.lower((node as HTMLElement).tagName)\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = text as string\n          }\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && object.has(node, STYLE_SHEET)) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          if (isOption) {\n            (node as HTMLOptionElement).value = html as string\n          }\n          node[innerHTML] = html as string\n        }\n      }\n      else {\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      return node[innerHTML]\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        const customEvent = event instanceof CustomEvent\n          ? event\n          : new CustomEvent(event.type, createEvent(event, node))\n\n        if (customEvent.type !== type) {\n          customEvent.type = type\n        }\n\n        emitter.fire(type, [customEvent])\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n\n    emitter.on(type, listener)\n  },\n\n  off(node: HTMLElement | Window | Document, type: string, listener: type.listener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n    if (process.env.NODE_ENV === 'development') {\n      if (specialEvents[type]) {\n        logger.error(`Special event \"${type}\" is existed.`)\n      }\n      logger.info(`Special event \"${type}\" add success.`)\n    }\n    specialEvents[type] = hooks\n  },\n\n}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: type.nativeListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nconst directive: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive, { lazy } = vnode\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n\n      const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n      if (value === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else if (value > 0) {\n        handler = debounce(\n          handler,\n          value,\n          // 避免连续多次点击，主要用于提交表单场景\n          // 移动端的 tap 事件可自行在业务层打补丁实现\n          name === env.EVENT_CLICK || name === env.EVENT_TAP\n        )\n      }\n\n    }\n\n    if (vnode.isComponent) {\n\n      (node as Yox).on(name, handler)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(name, handler as type.listener)\n      }\n\n    }\n    else {\n\n      api.on(node as HTMLElement, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(node as HTMLElement, name, handler as type.listener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport api from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\nimport * as type from '../../../yox-type/src/type'\n\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: type.lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: Yox) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n},\n\ndirective: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { context, lazy, isComponent } = vnode,\n\n    dataBinding = directive.binding as string,\n\n    lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n    set: type.watcher | void,\n\n    sync: type.watcher,\n\n    unbind: Function\n\n    if (isComponent) {\n\n      let component = node as Yox,\n\n      viewBinding = component.$model as string\n\n      set = function (newValue: any) {\n        if (set) {\n          component.set(viewBinding, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function (newValue: any) {\n          context.set(dataBinding, newValue)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        component.unwatch(viewBinding, sync)\n      }\n\n      component.watch(viewBinding, sync)\n\n    }\n    else {\n\n      let element = node as HTMLElement,\n\n      control = vnode.tag === 'select'\n        ? selectControl\n        : inputControl,\n\n      // checkbox,radio,select 监听的是 change 事件\n      eventName = env.EVENT_CHANGE\n\n      if (control === inputControl) {\n        const type = (node as HTMLInputElement).type\n        if (inputTypes[type]) {\n          control = inputTypes[type]\n        }\n        // 如果是输入框，则切换成 model 事件\n        // model 事件是个 yox-dom 实现的特殊事件\n        // 不会在输入法组合文字过程中得到触发事件\n        else if (lazyValue !== env.TRUE) {\n          eventName = env.EVENT_MODEL\n        }\n      }\n\n      set = function (newValue: any) {\n        if (set) {\n          control.set(element, newValue)\n        }\n      }\n\n      sync = debounceIfNeeded(\n        function () {\n          control.sync(element, dataBinding, context)\n        },\n        lazyValue\n      )\n\n      unbind = function () {\n        api.off(element, eventName, sync as type.listener)\n      }\n\n      api.on(element, eventName, sync as type.listener)\n\n      control.set(element, vnode.model)\n\n    }\n\n    // 监听数据，修改界面\n    context.watch(dataBinding, set as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      context.unwatch(dataBinding, set as type.watcher)\n      set = env.UNDEFINED\n      unbind()\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as type from '../../../yox-type/src/type'\nimport Yox from '../../../yox-type/src/interface/Yox'\nimport VNode from '../../../yox-type/src/vnode/VNode'\nimport Directive from '../../../yox-type/src/vnode/Directive'\nimport DirectiveHooks from '../../../yox-type/src/hooks/Directive'\n\nimport api from '../../../yox-dom/src/dom'\n\nconst directive: DirectiveHooks = {\n\n  once: env.TRUE,\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    let binding = directive.binding as string,\n\n    isFuzzy = keypathUtil.isFuzzy(binding),\n\n    watcher: type.watcher | void = function (newValue: any, _: any, keypath: string) {\n\n      if (watcher) {\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          const component = node as Yox\n          component.set(name, component.checkProp(name, newValue))\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n      }\n\n    }\n\n    vnode.context.watch(binding, watcher as type.watcher)\n\n    vnode.data[directive.key] = function () {\n      vnode.context.unwatch(binding, watcher as type.watcher)\n      watcher = env.UNDEFINED\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateStringify from '../../yox-template-compiler/src/stringify'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'development') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateStringify.stringify(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static checkProp(key: string, value: any, rule: PropRule): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      // 类型\n      const type = rule.type,\n\n      // 默认值\n      defaultValue = rule.value\n\n      // 传了数据\n      if (isDef(value)) {\n\n        if (process.env.NODE_ENV === 'development') {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n\n            // 自定义函数判断是否匹配类型\n            // 自己打印警告信息吧\n            if (is.func(type)) {\n              (type as type.propType)(key, value)\n            }\n            else {\n\n              let matched = env.FALSE\n\n              // type: 'string'\n              if (!string.falsy(type)) {\n                matched = matchType(value, type as string)\n              }\n              // type: ['string', 'number']\n              else if (!array.falsy(type)) {\n                array.each(\n                  type as string[],\n                  function (item: string) {\n                    if (matchType(value, item)) {\n                      matched = env.TRUE\n                      return env.FALSE\n                    }\n                  }\n                )\n              }\n\n              if (!matched) {\n                logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n              }\n\n            }\n\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n        }\n\n      }\n      else {\n\n        if (process.env.NODE_ENV === 'development') {\n          // 没传值但此项是必传项\n          if (rule.required) {\n            logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n          }\n        }\n\n        // 没传值但是配置了默认值\n        if (isDef(defaultValue)) {\n          value = type === env.RAW_FUNCTION\n            ? defaultValue\n            : is.func(defaultValue)\n              ? (defaultValue as type.propValue)()\n              : defaultValue\n        }\n\n      }\n    }\n\n    return value\n\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'development') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源\n    const source = instance.checkProps(props || {})\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      if (root) {\n        instance.$root = root\n      }\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'development') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): type.data {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const result = object.copy(props)\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            result[key] = Yox.checkProp(key, props[key], rule)\n          }\n        )\n        return result\n      }\n    }\n    return props\n  }\n\n  checkProp(key: string, value: any): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          value = Yox.checkProp(key, value, rule)\n        }\n      }\n    }\n    return value\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","VALUE_HOLDER","value","target","env.UNDEFINED","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","str","start","end","is.number","env.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","upper","toUpperCase","lower","toLowerCase","is.string","replace","$0","$1","trim","offset","charAt","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","env.VALUE_HOLDER","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","msg","tag","log","warn","error","Error","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","ns_1","matchListener_1","createMatchListener","object.each","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","SLOT_DATA_PREFIX","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","model","isComponent","$model","object.merge","checkProps","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","JSON","stringify","setPair","render","template","filters","partials","transitions","$scope","$keypath","$stack","vnodeStack","localPartials","findValue","stack","lookup","depIgnore","defaultKeypath","scope","keypathUtil.join","holder","$item","object.get","createMethodListener","event","method","array.last","$event","$data","createGetter","getter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","config.DIRECTIVE_BINDING","hooks","binding","renderModelVnode","config.DIRECTIVE_MODEL","renderEventMethodVnode","config.DIRECTIVE_EVENT","handler","renderEventNameVnode","fire","renderDirectiveVnode","config.DIRECTIVE_CUSTOM","renderSpreadVnode","renderElementVnode","attrs","childs","componentName","array.pop","renderSlots_1","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","identifier","runtimeKeypath","array.join","keypathUtil.separator","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","renderPartial","renderImport","partial","renderEach","eachHandler","generate","lastScope","lastStack","concat","$length","from","to","equal","fromValue","fromKeypath","toValue","count","sync","deps","observer","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","array.falsy","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","string.codeAt","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","emitter","on","formatWatcherOptions","step","toNumber","min","insert","array.remove","object.clear","addEventListener","removeEventListener","addClass","className","classList","removeClass","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","setAttribute","value_1","getAttribute","removeAttribute","beforeNode","appendChild","oldNode","replaceChild","removeChild","nextSibling","find","selector","querySelector","nodeType","string.lower","tagName","nativeListeners","special","nativeListener","customEvent","createEvent","object.falsy","addSpecialEvent","delay","timer","args_1","array.toArray","arguments","locked","lazy","debounce","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checked","checkbox","removeAt","array.indexOf","dataBinding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","type_1","checkProp","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","LOADER_QUEUE","TEMPLATE_COMPUTED","selectorPattern","$options","config.HOOK_BEFORE_CREATE","Yox","events","methods","watchers","extensions","object.extend","addComputed","$emitter","placeholder","el","root","model_1","components","$root","$parent","setFlexibleOptions","env.RAW_TRANSITION","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","afterCreateHook","$template","compile","plugin","install","Function","rule","getResource","setResource","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","modelKey","modelValue","$el","$directives","$transitions","$partials","$filters","templateRender.render","afterHook_1","instance_1","$options_1","snabbdom.patch","propTypes","result_1","isRemove","snabbdom.destroy","toggle","increase","decrease","is","logger","config.HOOK_AFTER_CREATE","addEvent","loader_1","queue_1","formatValue","hasSlot","config.SLOT_DATA_PREFIX"],"mappings":"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"}