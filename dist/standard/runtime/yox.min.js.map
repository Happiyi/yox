{"version":3,"file":"yox.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/holder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts","../../../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from '../../../yox-type/src/global'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import { ValueHolder } from '../../../yox-type/src/type'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default holder","import {\n  data,\n  ValueHolder\n} from '../../../yox-type/src/type'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: data, object: data): data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: data | void, object2: data | void): data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  nativeListener,\n  EmitterOptions,\n  EmitterInterface,\n} from '../../../yox-type/src/global'\n\nimport execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n  NextTaskInterface,\n} from '../../../yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n  Attribute,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import {\n  VNode,\n  Property\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import {\n  VNode,\n  Directive,\n} from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import { VNode } from '../../yox-type/src/type'\n\nimport * as config from '../../yox-config/src/config'\n\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[config.DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (props) {\n        node.checkProps(props)\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  DomUtil,\n  data,\n  VNode,\n} from '../../yox-type/src/type'\n\nimport {\n  YoxOptions,\n  YoxInterface,\n} from '../../yox-type/src/global'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomUtil, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomUtil, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: YoxOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: YoxOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as YoxOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomUtil, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomUtil, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomUtil, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomUtil, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomUtil, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomUtil, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomUtil, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomUtil, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomUtil, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","import {\n  data,\n  hint,\n  lazy,\n  getter,\n  ValueHolder,\n  VNode,\n} from '../../yox-type/src/type'\n\nimport {\n  listener,\n  YoxInterface,\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/global'\n\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport globalHolder from '../../yox-common/src/util/holder'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`\"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): listener {\n    return function (event: CustomEvent, data?: data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): listener {\n    return function (event: CustomEvent, data?: data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): getter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: hint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: lazy) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`Transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: hint): any {\n\n    const key = keypathUtil.join(config.DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_BINDING,\n        name,\n        key,\n        hooks: directives[config.DIRECTIVE_BINDING],\n        binding: holder.keypath,\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      config.DIRECTIVE_MODEL,\n      {\n        ns: config.DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: config.DIRECTIVE_MODEL,\n        value: holder.value,\n        binding: holder.keypath,\n        hooks: directives[config.DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createMethodListener(method as string, args, $stack)\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        hooks: directives[config.DIRECTIVE_EVENT],\n        handler: createEventListener(event)\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`Directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: config.DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(config.DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            KEY_DIRECTIVES,\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks: directives[config.DIRECTIVE_BINDING],\n              binding: keypathUtil.join(keypath, env.RAW_WILDCARD),\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component \"${tag}\" can't be found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, keypathUtil.separator)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], keypathUtil.separator)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = env.UNDEFINED\n    globalHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`Partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    from: ValueHolder,\n    to: ValueHolder | void,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    const fromValue = from.value,\n\n    fromKeypath = from.keypath\n\n    if (to) {\n      let toValue = to.value, count = 0\n      if (fromValue < toValue) {\n        if (equal) {\n          for (let i = fromValue; i <= toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i < toValue; i++) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n      else {\n        if (equal) {\n          for (let i = fromValue; i >= toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n        else {\n          for (let i = fromValue; i > toValue; i--) {\n            eachHandler(\n              generate,\n              i,\n              count++,\n              env.EMPTY_STRING,\n              index\n            )\n          }\n        }\n      }\n    }\n    else {\n      if (is.array(fromValue)) {\n        for (let i = 0, length = fromValue.length; i < length; i++) {\n          eachHandler(\n            generate,\n            fromValue[i],\n            i,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, env.EMPTY_STRING + i)\n              : env.EMPTY_STRING,\n            index,\n            length\n          )\n        }\n      }\n      else if (is.object(fromValue)) {\n        for (let key in fromValue) {\n          eachHandler(\n            generate,\n            fromValue[key],\n            key,\n            fromKeypath\n              ? keypathUtil.join(fromKeypath, key)\n              : env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    toString\n  )\n\n}","import {\n  listener,\n  nativeListener,\n  SpecialEventHooks,\n} from '../../yox-type/src/global'\n\nimport * as config from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: nativeListener) {\n    let locked = env.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: nativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (env.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (env.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (env.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, env.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string, hint?: number): void {\n  object.set(\n    node,\n    name,\n    hint === config.HINT_BOOLEAN\n      ? env.FALSE\n      : env.EMPTY_STRING,\n    env.FALSE\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != env.NULL) {\n      return value as string\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: listener): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(type, listener)\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: listener): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = env.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.error(`Special event \"${type}\" is existed.`)\n    }\n    logger.info(`Special event \"${type}\" add success.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  getter,\n  setter,\n  ComputedInterface,\n  ObserverInterface,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  WatcherOptions,\n} from '../../yox-type/src/global'\n\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: getter | void,\n\n    setter: setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: getter\n\n  setter: setter | void\n\n  watcher: watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: getter,\n    setter: setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from '../../../yox-type/src/global'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  watcher,\n  WatcherOptions,\n} from '../../../yox-type/src/global'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  data,\n  getter,\n  ValueHolder,\n  ObserverInterface,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from '../../yox-type/src/global'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, watcher | WatcherOptions>,\n    watcher?: watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as data,\n      function (options: watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  listener,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { name, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n    if (value === env.TRUE) {\n      name = env.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === env.EVENT_CLICK || name === env.EVENT_TAP\n      )\n    }\n\n  }\n\n  if (vnode.isComponent) {\n\n    (node as YoxInterface).on(name, handler)\n    vnode.data[directive.key] = function () {\n      (node as YoxInterface).off(name, handler as listener)\n    }\n\n  }\n  else {\n\n    domApi.on(node as HTMLElement, name, handler)\n    vnode.data[directive.key] = function () {\n      domApi.off(node as HTMLElement, name, handler as listener)\n    }\n\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  lazy,\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  watcher,\n  listener,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nimport * as config from '../../../yox-config/src/config'\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded(fn: Function, lazy: lazy | void): any {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn, lazy)\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\ninputTypes = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n}\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.binding as string,\n\n  lazyValue = lazy && (lazy[config.DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n  set: watcher | void,\n\n  sync: watcher,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    sync = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      component.unwatch(viewBinding, sync)\n    }\n\n    component.watch(viewBinding, sync)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = env.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (inputTypes[type]) {\n        control = inputTypes[type]\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== env.TRUE) {\n        eventName = env.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync as listener)\n    }\n\n    domApi.on(element, eventName, sync as listener)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as watcher)\n    set = env.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/type'\n\nimport {\n  watcher,\n  YoxInterface,\n} from '../../../yox-type/src/global'\n\nimport isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.binding as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as watcher)\n    watcher = env.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  data,\n  getter,\n  filter,\n  component,\n  componentCallback,\n  componentLoader,\n  propType,\n  propValue,\n  PropRule,\n  VNode,\n  IsUtil,\n  DomUtil,\n  ArrayUtil,\n  StringUtil,\n  ObjectUtil,\n  LoggerUtil,\n} from '../../yox-type/src/type'\n\nimport {\n  watcher,\n  listener,\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n  YoxOptions,\n  YoxInterface,\n  YoxPlugin,\n  DirectiveHooks,\n  TransitionHooks,\n  EmitterClass,\n  CustomEventClass,\n} from '../../yox-type/src/global'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as domApi from '../../yox-dom/src/dom'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsUtil = is\n  public static dom: DomUtil = domApi\n  public static array: ArrayUtil = array\n  public static object: ObjectUtil = object\n  public static string: StringUtil = string\n  public static logger: LoggerUtil = logger\n  public static Event: CustomEventClass = CustomEvent\n  public static Emitter: EmitterClass = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 创建组件对象\n   */\n  public static create(options: YoxOptions): YoxOptions {\n    return options\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`\"template\" should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, component>,\n    component?: component\n  ): component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, filter>,\n    filter?: filter\n  ): filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(config.HOOK_BEFORE_CREATE + config.NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === env.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as propValue)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`child component's data should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('\"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('\"template\" option is required.')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, listener>,\n    listener?: listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, listener>,\n    listener?: listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, watcher | WatcherOptions>,\n    watcher?: watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`Component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[config.DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || config.MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, component>,\n    component?: component\n  ): component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, filter>,\n    filter?: filter\n  ): filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        instance.fire(config.HOOK_BEFORE_UPDATE + config.NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        instance.fire(config.HOOK_BEFORE_MOUNT + config.NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + config.NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: data): void {\n    if (process.env.NODE_ENV === 'development') {\n      const instance = this\n      object.each(\n        props,\n        function (value, key) {\n          instance.checkProp(key, value)\n        }\n      )\n    }\n  }\n\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[config.HOOK_BEFORE_DESTROY], instance)\n      instance.fire(config.HOOK_BEFORE_DESTROY + config.NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[config.HOOK_AFTER_DESTROY], instance)\n      instance.fire(config.HOOK_AFTER_DESTROY + config.NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as propType)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item: string) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  if (process.env.NODE_ENV !== 'pure') {\n    execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n    instance.fire(config.HOOK_AFTER_CREATE + config.NAMESPACE_HOOK)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, listener>,\n  listener?: listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as listener, once)\n  }\n  else {\n    object.each(\n      type as data,\n      function (value: listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(\n  registry: Record<string, component | componentCallback[]> | void,\n  name: string,\n  callback: componentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: YoxOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as componentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as componentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as componentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n\n}\n\nfunction getResource(registry: data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: data, name: string | data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n","import * as config from '../../../yox-config/src/config'\nimport isDef from '../../../yox-common/src/function/isDef'\n\n// this type https://jkchao.github.io/typescript-book-chinese/typings/thisType.html\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_MINUS_ONE","WINDOW","window","DOCUMENT","document","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","str","start","end","is.number","env.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","upper","toUpperCase","lower","toLowerCase","is.string","replace","$0","$1","trim","offset","charAt","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","msg","tag","log","warn","error","Error","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","ns_1","matchListener_1","createMatchListener","object.each","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","nextTick","run","array.unshift","task","SLOT_DATA_PREFIX","HINT_BOOLEAN","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue_1","env.EMPTY_OBJECT","oldValue_1","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","node_1","field.COMPONENT","isKeypathChange_1","directive","once","bind","unbind","node_2","ref","props","slots","isComponent","model","config.DIRECTIVE_MODEL","$model","checkProps","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","setPair","KEY_DIRECTIVES","innerText","innerHTML","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","createEvent","event","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.join","array.remove","EMITTER","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","value_1","getAttribute","appendChild","env.EVENT_MODEL","on","locked","find","selector","querySelector","addClass","removeClass","emitter","nativeListeners","special","nativeListener_1","customEvent","fire","nativeListener_2","object.falsy","createElementNS","createTextNode","config.HINT_BOOLEAN","removeAttribute","beforeNode","oldNode","replaceChild","removeChild","nextSibling","nodeType","string.lower","tagName","hooks","sync","deps","observer","getter","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","array.falsy","dep","watch","Computed","is.boolean","force","lastComputed","current","unwatch","sorted","keypathUtil.match","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","keypathUtil.join","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","depIgnore","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","string.codeAt","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","build","object.sort","formatWatcherOptions","step","toNumber","min","insert","object.clear","delay","timer","args_1","array.toArray","arguments","handler","lazy","env.EVENT_CHANGE","debounce","env.EVENT_CLICK","env.EVENT_TAP","domApi.on","domApi.off","debounceIfNeeded","inputControl","selectControl","multiple","option","selected","selectedIndex","values_1","inputTypes","radio","checked","checkbox","removeAt","array.indexOf","dataBinding","binding","lazyValue","viewBinding_1","element_1","control_1","eventName_1","checkProp","element","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","config.HOOK_BEFORE_CREATE","config.NAMESPACE_HOOK","propTypes","methods","watchers","extensions","object.extend","rule","isUndef","addComputed","method","placeholder","el","root","model_1","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","env.RAW_TRANSITION","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","Yox","compile","snabbdom.create","domApi","plugin","install","stringify","getResource","setResource","partial","removeComputed","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","model_2","$el","$directives","$transitions","$partials","$filters","$scope","$stack","vnodeStack","localPartials","findValue","createMethodListener","createGetter","renderTextVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","renderExpressionIdentifier","renderExpressionMemberKeypath","renderExpressionMemberLiteral","renderExpressionCall","renderSlot","renderPartial","renderImport","eachHandler","renderEach","$keypath","stack","lookup","defaultKeypath","scope","globalHolder","$item","array.last","$event","$data","generate","lastScope","lastStack","concat","$length","myStack","identifier","runtimeKeypath","keypathUtil.separator","staticKeypath","vnodeList","lastVnode","config.DIRECTIVE_BINDING","config.DIRECTIVE_EVENT","config.DIRECTIVE_CUSTOM","attrs","childs","componentName","array.pop","renderSlots_1","defaultRender","from","to","equal","fromValue","fromKeypath","toValue","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","is","logger","config.HOOK_AFTER_CREATE","addEvent","registry","componentCallback_1","queue","promise","then","formatValue","hasSlot","config.SLOT_DATA_PREFIX"],"mappings":"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"}