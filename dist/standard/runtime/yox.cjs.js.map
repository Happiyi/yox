{"version":3,"file":"yox.cjs.js","sources":["../../../node_modules/yox-common/src/util/env.ts","../../../node_modules/yox-common/src/function/isDef.ts","../../../node_modules/yox-common/src/util/is.ts","../../../node_modules/yox-common/src/function/execute.ts","../../../node_modules/yox-common/src/util/Event.ts","../../../node_modules/yox-common/src/util/array.ts","../../../node_modules/yox-common/src/util/string.ts","../../../node_modules/yox-common/src/util/keypath.ts","../../../node_modules/yox-common/src/util/object.ts","../../../node_modules/yox-common/src/function/toString.ts","../../../node_modules/yox-common/src/util/logger.ts","../../../node_modules/yox-common/src/function/nextTick.ts","../../../node_modules/yox-common/src/util/Emitter.ts","../../../node_modules/yox-common/src/function/isNative.ts","../../../node_modules/yox-common/src/util/NextTask.ts","../../../node_modules/yox-config/index.ts","../../../node_modules/yox-snabbdom/src/field.ts","../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../node_modules/yox-snabbdom/src/directive.ts","../../../node_modules/yox-snabbdom/src/component.ts","../../../node_modules/yox-snabbdom/index.ts","../../../node_modules/yox-common/src/function/toNumber.ts","../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../node_modules/yox-common/src/function/isUndef.ts","../../../node_modules/yox-common/src/function/toJSON.ts","../../../node_modules/yox-template-compiler/src/stringify.ts","../../../node_modules/yox-expression-compiler/src/executor.ts","../../../node_modules/yox-template-compiler/src/renderer.ts","../../../node_modules/yox-observer/src/Computed.ts","../../../node_modules/yox-observer/src/function/matchBest.ts","../../../node_modules/yox-observer/src/function/readValue.ts","../../../node_modules/yox-observer/src/function/diffString.ts","../../../node_modules/yox-observer/src/function/diffArray.ts","../../../node_modules/yox-observer/src/function/diffObject.ts","../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../node_modules/yox-observer/src/Observer.ts","../../../node_modules/yox-dom/index.ts","../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/filter/hasSlot.ts","../../../src/Yox.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_TYPE = 'type'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\n\nconst SEPARATOR = '.', splitCache = {}, patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = is.string(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(SEPARATOR))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + SEPARATOR + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`调用 emitter.off() 时，你传了事件名，但它是个空值`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Attribute from 'yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Property from 'yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}\n\n//\n// 旧 [ child1, child2 ]\n// 新 innerHTML\n//\n// 这种情况，要让外部先把 child1 child2 正常移除掉，再用 innerHTML 覆盖，否则指令无法销毁\n//\n// 旧 innerHTML\n// 新 [ child1, child2 ]\n//\n// 这种情况，先用 innerHTML 覆盖，再处理 child1 child2\n//\n// export default {\n//   create: createProps,\n//   update: removeProps,\n//   postpatch: createProps,\n// }\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from 'yox-type/src/vnode/VNode'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n      if (props) {\n        node.set(node.checkPropTypes(props))\n      }\n      if (slots) {\n        node.set(slots)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport API from 'yox-type/src/API'\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxOptions from 'yox-type/src/options/Yox'\n\nimport * as field from './src/field'\n\nimport * as nativeAttr from './src/nativeAttr'\nimport * as nativeProp from './src/nativeProp'\nimport * as directive from './src/directive'\nimport * as component from './src/component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions | void) {\n\n  if (!options) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`component [${vnode.tag}] is not found.`)\n    }\n    return\n  }\n\n  // 渲染同步加载的组件时，vnode.node 为空\n  // 渲染异步加载的组件时，vnode.node 不为空，因为初始化用了占位节点\n  const child = (vnode.parent || vnode.context).create(options, vnode, vnode.node),\n\n  // 组件初始化创建的元素\n  node = child.$el as Node\n\n  if (node) {\n    vnode.node = node\n  }\n  else {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`the root element of component [${vnode.tag}] is not found.`)\n    }\n  }\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Record<string, any> {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let isAsync = env.TRUE\n\n    context.component(\n      tag as string,\n      function (options: any) {\n        if (isDef(data[field.LOADING])) {\n          // 异步组件\n          if (data[field.LOADING]) {\n            // 尝试使用最新的 vnode\n            if (data[field.VNODE]) {\n              vnode = data[field.VNODE]\n              // 用完就删掉\n              delete data[field.VNODE]\n            }\n            enterVnode(\n              vnode,\n              createComponent(vnode, options)\n            )\n          }\n        }\n        // 同步组件\n        else {\n          createComponent(vnode, options)\n          isAsync = env.FALSE\n        }\n      }\n    )\n\n    if (isAsync) {\n      vnode.node = api.createComment(env.RAW_COMPONENT)\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.nextTick(enter, env.TRUE)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, context } = vnode\n\n  if (parent\n    // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n    // 这里表示的是宿主组件还没被销毁\n    // 如果宿主组件被销毁了，则它的一切都要进行销毁\n    && parent.$vnode\n    // 是从外部传入到组件内的\n    && parent !== vnode.context\n  ) {\n    return\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement,\n        env.EMPTY_FUNCTION\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: API, node: Node, isComment: boolean, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    isComment,\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`destroy vnode can't not work without parent node.`)\n      }\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n\n  '->': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i > b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i < b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  },\n  '=>': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i >= b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i <= b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStyle, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStyle) {\n    data.isStyle = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds || env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport invoke from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.LITERAL] = function (node: Literal): any {\n  return node.value\n}\n\nnodeExecutor[nodeType.IDENTIFIER] = function (node: Identifier, getter: (keypath: string, node: Keypath) => any): any {\n  return getter(node.name, node)\n}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let { props, staticKeypath } = node, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      staticKeypath = env.EMPTY_STRING\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.unary[node.operator].exec(\n    execute(node.arg, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.binary[node.operator].exec(\n    execute(node.left, getter, context),\n    execute(node.right, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return node.elements.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key, index) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return invoke(\n    execute(node.callee, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from 'yox-config/index'\n\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Event from 'yox-common/src/util/Event'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport Keypath from 'yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from 'yox-expression-compiler/src/executor'\n\nimport * as signature from 'yox-type/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\n\nimport * as nodeType from './nodeType'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const map = target[name] || (target[name] = {})\n  map[key] = value\n}\n\nexport function render(\n  context: Yox,\n  filters: Record<string, Function>,\n  partials: Record<string, Function | void>,\n  directives: Record<string, DirectiveHooks | void>,\n  transitions: Record<string, TransitionHooks | void>,\n  template: Function\n) {\n\n  let $keypath = env.EMPTY_STRING,\n\n  $scope: Record<string, any> = { $keypath },\n\n  $stack = [$keypath, $scope],\n\n  eventScope: Record<string, any> | void,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let keypath = keypathUtil.join(stack[index], key),\n\n    scope = stack[index + 1]\n\n    node.absoluteKeypath = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    if (eventScope && object.has(eventScope, key)) {\n      return eventScope[key]\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 keypath\n    if (object.has(scope, key)) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (object.has(scope, '$item')) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope && object.has(scope, key)) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    let result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 1) {\n        index -= 2\n        return lookup(stack, index, key, node, depIgnore, defaultKeypath)\n      }\n      result = object.get(filters, key)\n      if (!result) {\n        node.absoluteKeypath = defaultKeypath\n        logger.warn(`data [${node.raw}] is not found.`)\n        return\n      }\n      result = result.value\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - 2 * ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: any, attr: Record<string, any>): any {\n\n    const { expr } = attr,\n\n    value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, attr.name),\n\n    hooks = directives[config.DIRECTIVE_BINDING]\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns: config.DIRECTIVE_BINDING,\n          name: attr.name,\n          key,\n          hooks,\n          binding: expr.absoluteKeypath,\n          hint: attr.hint,\n        }\n      )\n    }\n\n    return value\n\n  },\n\n  spreadObject = function (vnode: any, attr: Record<string, any>) {\n\n    let { expr } = attr,\n\n    value = getValue(expr, attr.binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair(vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr[env.RAW_ABSOLUTE_KEYPATH]\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath),\n        hooks = directives[config.DIRECTIVE_BINDING]\n        if (hooks) {\n          setPair(\n            vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks,\n              binding: keypathUtil.join(absoluteKeypath, '*'),\n            }\n          )\n        }\n      }\n\n    }\n    else {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n  },\n\n  addDirective = function (vnode: any, attr: Record<string, any>) {\n\n    let { ns, name, value } = attr,\n\n    key = keypathUtil.join(ns, name),\n\n    binding: string | void,\n\n    hooks: DirectiveHooks | void,\n\n    getter: signature.directiveGetter | void,\n\n    handler: signature.directiveHandler | signature.eventListener | void,\n\n    transition: TransitionHooks | void\n\n    switch (ns) {\n\n      case config.DIRECTIVE_EVENT:\n        hooks = directives[config.DIRECTIVE_EVENT]\n        handler = attr.event\n          ? createEventListener(attr.event)\n          : createMethodListener(attr.method, attr.args, $stack)\n        break\n\n      case env.RAW_TRANSITION:\n        transition = transitions[value]\n        if (transition) {\n          vnode.transition = transition\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`transition [${value}] is not found.`)\n          }\n        }\n        return\n\n      case config.DIRECTIVE_MODEL:\n        hooks = directives[config.DIRECTIVE_MODEL]\n        vnode.model = getValue(attr.expr, env.TRUE)\n        binding = attr.expr.absoluteKeypath\n        break\n\n      case config.DIRECTIVE_LAZY:\n        setPair(vnode, 'lazy', name, value)\n        return\n\n      default:\n        hooks = directives[name]\n        if (attr.method) {\n          handler = createMethodListener(attr.method, attr.args, $stack)\n        }\n        else if (attr.getter) {\n          getter = createGetter(attr.getter, $stack)\n        }\n        break\n\n    }\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns,\n          name,\n          key,\n          value,\n          binding,\n          hooks,\n          getter,\n          handler\n        }\n      )\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`directive [${key}] is not found.`)\n      }\n    }\n\n  },\n\n  createEventListener = function (type: string): signature.eventListener {\n    return function (event: Event, data?: Record<string, any>) {\n      if (event.type !== type) {\n        event = new Event(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    method: string,\n    args: Function | void,\n    stack: any[]\n  ): signature.directiveHandler {\n    return function (event?: Event, data?: Record<string, any>) {\n\n      const callee = context[method]\n\n      if (event instanceof Event) {\n\n        let result: any | void\n\n        if (args) {\n          // 给当前 scope 加上 event 和 data\n          eventScope = {\n            $event: event,\n            $data: data,\n          }\n          result = execute(callee, context, args(stack))\n          // 阅后即焚\n          eventScope = env.UNDEFINED\n        }\n        else {\n          result = execute(callee, context, data ? [event, data] : event)\n        }\n\n        if (result === env.FALSE) {\n          event.prevent().stop()\n        }\n      }\n      else {\n        execute(\n          callee,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): signature.directiveGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        lastVnode.text += text\n      }\n      else {\n        array.push(\n          vnodeList,\n          {\n            isText: env.TRUE,\n            text,\n            context,\n            keypath: $keypath,\n          }\n        )\n      }\n    }\n  },\n\n  renderElementVnode = function (\n    vnode: Record<string, any>,\n    attrs: any[] | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (attrs) {\n      array.each(\n        attrs,\n        function (attr: any) {\n\n          let { name, value } = attr\n\n          switch (attr.type) {\n\n            case nodeType.ATTRIBUTE:\n\n              if (attr.binding) {\n                value = addBinding(vnode, attr)\n              }\n\n              if (vnode.isComponent) {\n                setPair(vnode, 'props', name, value)\n              }\n              else {\n                setPair(vnode, 'nativeAttrs', name, { name, value })\n              }\n\n              break\n\n            case nodeType.PROPERTY:\n              setPair(\n                vnode,\n                'nativeProps',\n                name,\n                {\n                  name,\n                  value: attr.binding ? addBinding(vnode, attr) : value,\n                  hint: attr.hint,\n                }\n              )\n              break\n\n            case nodeType.DIRECTIVE:\n              addDirective(vnode, attr)\n              break\n\n            case nodeType.SPREAD:\n              spreadObject(vnode, attr)\n              break\n\n          }\n        }\n      )\n      // 确保有 directives 就必然有 lazy\n      if (vnode.directives && !vnode.lazy) {\n        vnode.lazy = env.EMPTY_OBJECT\n      }\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack), vnodes = context.get(name)\n\n    if (vnodes) {\n      array.each(\n        vnodes,\n        function (vnode: any) {\n          array.push(vnodeList, vnode)\n          vnode.parent = context\n        }\n      )\n    }\n    else if (defaultRender) {\n      defaultRender()\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n      return\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n        return\n      }\n    }\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`partial [${name}] is not found.`)\n    }\n  },\n\n  renderEach = function (expr: ExpressionNode, index: string | Function | void, handler?: Function) {\n\n    let eachIndex: string | void, eachHandler: Function\n\n    if (is.func(index)) {\n      eachHandler = index as Function\n      eachIndex = env.UNDEFINED\n    }\n    else {\n      eachHandler = handler as Function\n      eachIndex = index as string\n    }\n\n    const value = getValue(expr),\n\n    exprKeypath = expr[env.RAW_ABSOLUTE_KEYPATH],\n\n    eachKeypath = exprKeypath || keypathUtil.join($keypath, expr.raw),\n\n    callback = function (item: any, key: string | number) {\n\n      let lastKeypath = $keypath, lastScope = $scope, lastKeypathStack = $stack\n\n      $keypath = keypathUtil.join(eachKeypath, toString(key))\n      $scope = {}\n      $stack = object.copy($stack)\n\n      array.push($stack, $keypath)\n      array.push($stack, $scope)\n\n      // 从下面这几句赋值可以看出\n      // scope 至少会有 '$keypath' '$item' eachIndex 等几个值\n      $scope.$keypath = $keypath\n\n      // 类似 {{#each 1 -> 10}} 这样的临时循环，需要在 scope 上加上当前项\n      // 因为通过 context.get() 无法获取数据\n      if (!exprKeypath) {\n        $scope.$item = item\n      }\n\n      if (eachIndex) {\n        $scope[eachIndex] = key\n      }\n\n      eachHandler(item, key)\n\n      $keypath = lastKeypath\n      $scope = lastScope\n      $stack = lastKeypathStack\n\n    }\n\n    if (is.array(value)) {\n      array.each(value, callback)\n    }\n    else if (is.object(value)) {\n      object.each(value, callback)\n    }\n    else if (is.func(value)) {\n      value(callback)\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        `${i}`,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// 这里先写 IE9 支持的接口\ninnerText = 'textContent',\n\nfindElement = function (selector: string): Element | void {\n  const node = (doc as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement): any {\n  return event\n}\n\nif (doc) {\n\n  if (!doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n\n  // 为 IE9 以下浏览器打补丁\n  if (process.env.NODE_LEGACY) {\n\n    if (!doc.addEventListener) {\n\n      const PROPERTY_CHANGE = 'propertychange'\n\n      addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n        if (type === env.EVENT_INPUT) {\n          addEventListener(\n            node,\n            PROPERTY_CHANGE,\n            // 借用 EMITTER，反正只是内部临时用一下...\n            listener[EMITTER] = function (event: any) {\n              if (event.propertyName === env.RAW_VALUE) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_INPUT\n                execute(listener, this, event)\n              }\n            }\n          )\n        }\n        else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n          addEventListener(\n            node,\n            env.EVENT_CLICK,\n            listener[EMITTER] = function (event: any) {\n              event = new CustomEvent(event)\n              event.type = env.EVENT_CHANGE\n              execute(listener, this, event)\n            }\n          )\n        }\n        else {\n          node.attachEvent(`on${type}`, listener)\n        }\n      }\n\n      removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n        if (type === env.EVENT_INPUT) {\n          removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n          delete listener[EMITTER]\n        }\n        else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n          removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n          delete listener[EMITTER]\n        }\n        else {\n          node.detachEvent(`on${type}`, listener)\n        }\n      }\n\n      function isBoxElement(node: HTMLInputElement) {\n        return node.tagName === 'INPUT'\n          && (node.type === 'radio' || node.type === 'checkbox')\n      }\n\n      class IEEvent {\n\n        currentTarget: HTMLElement\n\n        target: HTMLElement | EventTarget\n\n        originalEvent: Event\n\n        constructor(event: Event, element: HTMLElement) {\n\n          object.extend(this, event)\n\n          this.currentTarget = element\n          this.target = event.srcElement || element\n          this.originalEvent = event\n\n        }\n\n        preventDefault() {\n          this.originalEvent.returnValue = env.FALSE\n        }\n\n        stopPropagation() {\n          this.originalEvent.cancelBubble = env.TRUE\n        }\n\n      }\n\n      // textContent 不兼容 IE 678\n      innerText = 'innerText'\n\n      createEvent = function (event, element) {\n        return new IEEvent(event, element)\n      }\n\n      findElement = function (selector: string): Element | void {\n        // 去掉 #\n        if (string.codeAt(selector, 0) === 35) {\n          selector = string.slice(selector, 1)\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`legacy 版本选择器只支持 #id 格式`)\n          }\n        }\n        const node = (doc as Document).getElementById(selector)\n        if (node) {\n          return node\n        }\n      }\n\n    }\n\n  }\n\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string, isStyle?: boolean): string | void {\n    if (isDef(text)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && isDef(node[STYLE_SHEET])) {\n          node[STYLE_SHEET].cssText = text\n        }\n        else {\n          node[innerText] = text as string\n        }\n      }\n      else {\n        node[innerText] = text as string\n      }\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string, isStyle?: boolean): string | void {\n    if (isDef(html)) {\n      if (process.env.NODE_LEGACY) {\n        if (isStyle && isDef(node[STYLE_SHEET])) {\n          node[STYLE_SHEET].cssText = html\n        }\n        else {\n          node.innerHTML = html as string\n        }\n      }\n      else {\n        node.innerHTML = html as string\n      }\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[env.EVENT_INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = env.EVENT_INPUT\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([env.EVENT_CLICK, env.EVENT_TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = env.EVENT_CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as config from 'yox-config/index'\nimport api from 'yox-dom/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\n\nfunction getOptionValue(option: HTMLOptionElement) {\n  return isDef(option.value)\n    ? option.value\n    : option.text\n}\n\ninterface Control {\n\n  set(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  sync(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nconst syncWatcherOptions = { sync: env.TRUE },\n\ninputControl: Control = {\n  set(input: HTMLInputElement, keypath: string, context: Yox) {\n    input.value = toString(context.get(keypath))\n  },\n  sync(input: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, input.value)\n  },\n  name: env.RAW_VALUE\n},\n\nselectControl: Control = {\n  set(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    array.each(\n      array.toArray(select.options),\n      select.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, getOptionValue(option), env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (getOptionValue(option) == value) {\n            select.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const options = array.toArray(select.options)\n    if (select.multiple) {\n      const values = []\n      array.each(\n        options,\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              getOptionValue(option)\n            )\n          }\n        }\n      )\n      // 如果新旧值都是 []，set 没有意义\n      if (!array.falsy(values) || !array.falsy(context.get(keypath))) {\n        context.set(keypath, values)\n      }\n    }\n    else {\n      context.set(\n        keypath,\n        getOptionValue(\n          options[select.selectedIndex]\n        )\n      )\n    }\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: Control = {\n  set(radio: HTMLInputElement, keypath: string, context: Yox) {\n    radio.checked = radio.value === toString(context.get(keypath))\n  },\n  sync(radio: HTMLInputElement, keypath: string, context: Yox) {\n    if (radio.checked) {\n      context.set(keypath, radio.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: Control = {\n  set(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    checkbox.checked = is.array(value)\n      ? array.has(value, checkbox.value, env.FALSE)\n      : (is.boolean(value) ? value : !!value)\n  },\n  sync(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (checkbox.checked) {\n        context.append(keypath, checkbox.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, checkbox.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, checkbox.checked)\n    }\n  },\n  name: 'checked'\n},\n\ncomponentControl: Control = {\n  set(component: Yox, keypath: string, context: Yox) {\n    component.set(\n      component.$model,\n      context.get(keypath)\n    )\n  },\n  sync(component: Yox, keypath: string, context: Yox) {\n    context.set(\n      keypath,\n      component.get(component.$model)\n    )\n  },\n  name: env.RAW_VALUE\n},\n\nspecialControls = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n  select: selectControl,\n},\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { binding } = directive,\n\n    { context, nativeProps } = vnode,\n\n    lazy = vnode.lazy[config.DIRECTIVE_MODEL] || vnode.lazy[env.EMPTY_STRING],\n\n    set = function () {\n      if (!isSyncing) {\n        control.set(component || element, binding as string, context)\n      }\n    },\n\n    sync = function () {\n      isSyncing = env.TRUE\n      control.sync(component || element, binding as string, context)\n      isSyncing = env.FALSE\n    },\n\n    isSyncing = env.FALSE,\n\n    component: Yox,\n\n    element: HTMLElement,\n\n    control: Control,\n\n    type: string\n\n    if (lazy && lazy !== env.TRUE) {\n      sync = debounce(sync, lazy)\n    }\n\n    if (vnode.isComponent) {\n\n      component = node as Yox\n      control = componentControl\n\n      // 监听交互，修改数据\n      component.watch(component.$model, sync)\n\n    }\n    else {\n\n      element = node as HTMLElement\n      control = specialControls[element[env.RAW_TYPE]] || specialControls[api.tag(element) as string]\n\n      // checkbox,radio,select 监听的是 change 事件\n      type = env.EVENT_CHANGE\n\n      // 如果是输入框，则切换成 input 事件\n      if (!control) {\n        control = inputControl\n        if (lazy !== env.TRUE) {\n          type = env.EVENT_INPUT\n        }\n      }\n\n      // 如果模板里没写对应的属性，则这里先设值\n      if (!nativeProps || !object.has(nativeProps, control.name)) {\n        set()\n      }\n\n      // 监听交互，修改数据\n      api.on(element, type, sync)\n\n    }\n\n    // 监听数据，修改界面\n    // 这里使用同步监听，这样才能使 isSyncing 生效\n    context.watch(binding as string, set, syncWatcherOptions)\n\n    vnode.data[directive.key] = function () {\n      if (vnode.isComponent) {\n        component.unwatch(component.$model, sync)\n      }\n      else {\n        api.off(element, type, sync)\n      }\n      context.unwatch(binding as string, set)\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\n\nimport api from 'yox-dom/index'\n\nconst directive: DirectiveHooks = {\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    const { binding } = directive\n\n    if (binding) {\n\n      const isFuzzy = keypathUtil.isFuzzy(binding),\n\n      watcher = function (newValue: any, oldValue: any, keypath: string) {\n\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          (node as Yox).set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n\n      }\n\n      vnode.context.watch(binding, watcher)\n\n      vnode.data[directive.key] = function () {\n        vnode.context.unwatch(binding, watcher)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import * as config from 'yox-config/index'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  if (process.env.NODE_ENV === 'dev') {\n    logger.warn('hasSlot 过滤器已不建议使用')\n  }\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[ config.HOOK_BEFORE_CREATE ], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n            }\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"el\" option 格式错误`)\n            }\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`\"${name}\" method is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[ config.HOOK_AFTER_CREATE ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (placeholder) {\n            logger.fatal('有 el 没 template 是几个意思？')\n          }\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[ config.HOOK_BEFORE_UPDATE ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[ config.HOOK_BEFORE_MOUNT ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || env.RAW_VALUE\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[ config.HOOK_BEFORE_DESTROY ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        delete instance.$vnode\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[ config.HOOK_AFTER_DESTROY ], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","RAW_KEY","RAW_REF","RAW_TAG","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_THIS","RAW_TYPE","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_STATIC_KEYPATH","RAW_ABSOLUTE_KEYPATH","KEYPATH_PARENT","KEYPATH_CURRENT","EVENT_TAP","EVENT_CLICK","EVENT_INPUT","EVENT_CHANGE","win","window","doc","document","EMPTY_FUNCTION","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","CustomEvent","originalEvent","this","each","callback","reversed","length","let","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toArray","execute","slice","toObject","key","result","indexOf","strict","index","has","last","pop","remove","splice","env.TRUE","falsy","preventDefault","isPrevented","stopPropagation","isStoped","prevent","stop","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","camelize","str","replace","$0","$1","toUpperCase","hyphenate","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","is.string","SEPARATOR","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","matchFuzzy","pattern","cache","RegExp","keys","is.object","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","array.each","objects","copy","deep","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","nativeConsole","console","env.RAW_UNDEFINED","useSource","test","env.EMPTY_FUNCTION","isDebug","env.win","debug","is.boolean","log","msg","warn","error","fatal","Error","nextTick","Emitter","ns","listeners","parseNamespace","name","string.indexOf","string.slice","createMatchListener","listener","options","matchNamespace","namespace","fire","bullet","data","filter","event","instance","isComplete","object.copy","array.has","ctx","num","max","off","matchListener","on","addListener","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","NextTask","nextTasks","append","task","prepend","run","SLOT_DATA_PREFIX","HINT_BOOLEAN","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","oldNativeAttrs","nativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","object.each","attr","node","removeAttr","oldNativeProps","nativeProps","prop","removeProp","hint","oldDirectives","directives","field.COMPONENT","isKeypathChange","directive","hooks","unbind","bind","isComponent","props","checkPropTypes","slots","ref","refs","$refs","isPatchable","tag","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","createComponent","child","parent","create","$el","field.LOADING","component.update","directive.update","guid","createData","field.ID","createVnode","isText","createText","text","isComment","createComment","isAsync","component","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","children","addVnodes","isStyle","html","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","isStatic","removeVnodes","removeVnode","done","destroyVnode","leaveVnode","$vnode","directive.remove","destroy","transition","field.LEAVING","leave","updateChildren","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","patch","next","oldText","oldHtml","isRemove","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","->","=>","ATTRIBUTE","DIRECTIVE","PROPERTY","SPREAD","JSON","stringify","RENDER_SLOT","RENDER_EACH","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_EXPRESSION_VNODE","RENDER_TEXT_VNODE","RENDER_ELEMENT_VNODE","RENDER_PARTIAL","RENDER_IMPORT","SEP_COMMA","STRING_EMPTY","toJSON","CODE_PREFIX","array.join","nodeExecutor","getter","setPair","render","filters","partials","transitions","template","eventScope","$keypath","$scope","$stack","vnodeStack","localPartials","lookup","stack","depIgnore","defaultKeypath","keypathUtil.join","scope","absoluteKeypath","isUndef","object.has","$item","object.get","logger.warn","getValue","expr","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","binding","createEventListener","Event","createMethodListener","method","callee","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","array.last","lastVnode","array.push","renderElementVnode","attrs","childs","nodeType.ATTRIBUTE","nodeType.PROPERTY","nodeType.DIRECTIVE","handler","config.DIRECTIVE_EVENT","env.RAW_TRANSITION","config.DIRECTIVE_MODEL","model","config.DIRECTIVE_LAZY","addDirective","nodeType.SPREAD","env.RAW_ABSOLUTE_KEYPATH","spreadObject","lazy","array.pop","renderSlots","slot","renderSlot","defaultRender","renderPartial","renderImport","partial","renderEach","eachIndex","eachHandler","exprKeypath","eachKeypath","raw","lastKeypath","lastScope","lastKeypathStack","nodeType.LITERAL","nodeType.IDENTIFIER","nodeType.MEMBER","first","staticKeypath","len","nodeType.UNARY","interpreter.unary","operator","arg","nodeType.BINARY","interpreter.binary","left","right","nodeType.TERNARY","yes","no","nodeType.ARRAY","elements","map","nodeType.OBJECT","values","nodeType.CALL","invoke","syncWatcherOptions","sync","asyncWatcherOptions","Computed","deps","observer","setter","unique","$2","diff","fixed","array.falsy","dep","add","sorted","keypathUtil.match","source","newIsString","oldIsString","env.RAW_LENGTH","newIsArray","oldIsArray","newLength","oldLength","Math","newIsObject","oldIsObject","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","diffString","diffArray","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","immediate","build","env.EMPTY_ARRAY","force","env.RAW_VALUE","lastComputed","current","watch","unwatch","Observer","nextTask","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","string.codeAt","pending","diffAsync","filterWatcher","addComputed","object.sort","removeComputed","once","emitter","formatWatcherOptions","toggle","increase","step","toNumber","decrease","min","insert","removeAt","array.remove","object.clear","env.doc","innerText","findElement","selector","querySelector","addEventListener","removeEventListener","addClass","className","classList","removeClass","createEvent","body","classes","CHAR_WHITESPACE","EMITTER","COMPOSITION_START","COMPOSITION_END","domain","namespaces","svg","specialEvents","domApi","isSvg","createElementNS","createTextNode","config.HINT_BOOLEAN","setAttribute","getAttribute","removeAttribute","appendChild","oldNode","replaceChild","removeChild","nextSibling","find","nodeType","tagName","innerHTML","nativeListeners","special","nativeListener","object.falsy","delay","timer","array.toArray","arguments","env.EVENT_INPUT","locked","immediateTypes","array.toObject","env.EVENT_CLICK","env.EVENT_TAP","env.EVENT_CHANGE","debounce","el","getOptionValue","option","inputControl","input","selectControl","select","multiple","selected","selectedIndex","radioControl","radio","checked","checkboxControl","checkbox","array.indexOf","componentControl","$model","specialControls","element","control","isSyncing","env.RAW_TYPE","config.SLOT_DATA_PREFIX","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","env.RAW_TEMPLATE","selectorPattern","Yox","$options","config.HOOK_BEFORE_CREATE","extensions","$observer","$emitter","placeholder","$parent","components","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","methods","config.HOOK_AFTER_CREATE","$template","compile","watchers","snabbdom.create","events","setFlexibleOptions","getComponentAsync","$queue","replacement","getResource","setResource","formatValue","mergeResource","locals","globals","object.extend","use","plugin","install","Function","propTypes","rule","matched","required","actual","string.falsy","t","is.is","downward","eventData","$children","watchOnce","watcherOptions","$directives","$transitions","$components","$partials","$filters","forceUpdate","templateRender.render","hook","config.HOOK_BEFORE_UPDATE","config.HOOK_AFTER_UPDATE","config.HOOK_BEFORE_MOUNT","config.HOOK_AFTER_MOUNT","config.HOOK_BEFORE_DESTROY","config.HOOK_AFTER_DESTROY","logger","hasSlot"],"mappings":"aAGOA,IAAMC,MAAO,EACPC,OAAQ,EACRC,KAAO,KACPC,eAAY,EAEZC,SAAW,OACXC,UAAY,QACZC,SAAW,OACXC,cAAgB,YAEhBC,QAAU,MACVC,QAAU,MACVC,QAAU,MACVC,SAAW,OACXC,SAAW,OAEXC,WAAa,SACbC,YAAc,UACdC,cAAgB,YAChBC,cAAgB,YAChBC,eAAiB,aAEjBC,SAAW,OACXC,SAAW,OACXC,UAAY,QACZC,WAAa,SACbC,aAAe,WACfC,aAAe,WAEfC,mBAAqB,gBACrBC,qBAAuB,kBAEvBC,eAAiB,KACjBC,gBAAkBT,SAYlBU,UAAY,MAKZC,YAAc,QAKdC,YAAc,QAKdC,aAAe,SAKfC,WAAaC,SAAW1B,cAAgB0B,OAAS9B,UAKjD+B,WAAaC,WAAa5B,cAAgB4B,SAAWhC,UAKrDiC,eAAiB,aAOjBC,aAAe,GAKfC,YAAc,GAKdC,aAAe,+2BC7FHC,GACvB,OAAOA,IAAWC,UCDpB1C,IAAM2C,SAAWC,OAAOC,UAAUF,kBAGlBG,GAAGC,EAAYC,GAC7B,MAAgB,YAATA,EACHC,QAAQF,GACRJ,SAASO,KAAKH,GAAOI,2BAA6BH,eASxCI,KAAKL,GACnB,cAAcA,IAAUM,sBASVC,MAAMP,GACpB,OAAOQ,MAAMC,QAAQT,YASPU,OAAOV,GAErB,OAAOA,IAAUW,MAA6B,iBAAVX,WAStBY,OAAOZ,GACrB,MAAwB,iBAAVA,WASAa,OAAOb,GACrB,MAAwB,iBAAVA,WASAc,QAAQd,GACtB,MAAwB,kBAAVA,WASAE,QAAQF,GACtB,OAAOa,OAAOb,IACRY,OAAOZ,KAAWe,MAAMC,WAAWhB,KAAWiB,SAASjB,oJCrEtCkB,EAASC,EAAeC,GAC/C,GAAIC,KAAQH,GACV,OAAOI,MAASF,GACZF,EAAGK,MAAMJ,EAASC,GAClBI,MAAML,GACJD,EAAGf,KAAKgB,EAASC,GACjBI,MAAMJ,GACJF,EAAGE,GACHF,ICfZ,IAAqBO,YAyBnB,SAAYxB,EAAcyB,GACxBC,KAAK1B,KAAOA,EACZ0B,KAAKD,cAAgBA,GCpBzB,SAAgBE,KAAKrB,EAAcsB,EAAsEC,GAC/F,eACR,GAAIC,EACF,GAAID,EACF,IAAKE,IAAIC,EAAIF,EAAS,EAAGE,GAAK,GACxBJ,EAAStB,EAAM0B,GAAIA,EAAG1B,KAAW2B,MADND,UAOjC,IAAKD,IAAIC,EAAI,EAAGA,EAAIF,GACdF,EAAStB,EAAM0B,GAAIA,EAAG1B,KAAW2B,MADXD,eAgBlBE,KAAK5B,EAAiB6B,GACpC,OAAO7B,EAAM4B,KAAKC,GAGpB,SAASC,WAAW9B,EAAc+B,GAChC/B,EAAMA,EAAMwB,QAAUO,EAGxB,SAASC,cAAchC,EAAc+B,GACnC/B,EAAMiC,QAAQF,GAUhB,SAASG,QAAQlC,EAAcP,EAAY0C,GACrCpB,MAAStB,GACX4B,KACE5B,EACA,SAAUsC,GACRI,EAAOnC,EAAO+B,KAKlBI,EAAOnC,EAAOP,YAUF2C,KAAKpC,EAAcb,GACjC+C,QAAQlC,EAAOb,EAAQ2C,qBASTG,QAAQjC,EAAcb,GACpC+C,QAAQlC,EAAOb,EAAQ6C,wBASTK,QAAQrC,GACtB,OAAOe,MAASf,GACZA,EACAsC,QAAQ,GAAGC,MAAOvC,GAWxB,SAAgBwC,SAASxC,EAAcyC,EAAqBhD,GAC1DgC,IAAIiB,EAAS,GAOb,OANArB,KACErB,EACA,SAAU+B,GACRW,EAAOD,EAAMV,EAAKU,GAAOV,GAAQtC,GAASsC,IAGvCW,EAWT,SAAgBC,QAAQ3C,EAAcb,EAAayD,GACjDnB,IAAIiB,GAAU,EAUd,OATArB,KACErB,EACA,SAAU+B,EAAWc,GACnB,GAAID,IAAWjB,MAAYI,GAAQ5C,EAAS4C,IAAS5C,EAEnD,OADAuD,EAASG,EACFlB,QAINe,EAWT,SAAgBI,IAAI9C,EAAcb,EAAayD,GAC7C,OAAOD,QAAQ3C,EAAOb,EAAQyD,IAAW,WAS3BG,KAAK/C,GACX,eACR,GAAIwB,EAAS,EACX,OAAOxB,EAAMwB,EAAS,YAYVwB,IAAIhD,GAClB,OAAOA,EAAMgD,MAWf,SAAgBC,OAAOjD,EAAcb,EAAayD,GAChDnB,IAAIiB,EAAS,EAWb,OAVArB,KACErB,EACA,SAAU+B,EAAWc,IACfD,IAAWjB,MAAYI,GAAQ5C,EAAS4C,IAAS5C,KACnDa,EAAMkD,OAAOL,EAAO,GACpBH,MAGJS,MAEKT,WASOU,MAAMpD,GACpB,OAAQe,MAASf,KAAWA,EAAMwB,6BD9KlC6B,0BAEE,IADiBjC,KACHkC,YAAa,CACjB,MAFOlC,mBAGXD,GACFA,EAAckC,iBAJDjC,KAMNkC,YAAcH,YANR/B,4BAcnBmC,2BAEE,IADiBnC,KACHoC,SAAU,CACd,MAFOpC,mBAGXD,GACFA,EAAcoC,kBAJDnC,KAMNoC,SAAWL,YANL/B,4BAWnBqC,mBACE,OAAOrC,KAAKiC,wCAGdK,gBACE,OAAOtC,KAAKmC,oMEhEVI,gBAAkB,aAExBC,iBAAmB,aAEnBC,cAAwC,GAExCC,eAAyC,YAQzBC,SAASC,GASvB,OARKH,cAAcG,KACjBH,cAAcG,GAAOA,EAAIC,QACvBN,gBACA,SAAUO,EAAIC,GACZ,OAAOA,EAAGC,iBAITP,cAAcG,YASPK,UAAUL,GASxB,OARKF,eAAeE,KAClBF,eAAeE,GAAOA,EAAIC,QACxBL,iBACA,SAAUM,EAAIC,GACZ,MAAO,IAAMA,EAAGtE,iBAIfiE,eAAeE,YASRM,KAAKN,GACnB,OAAOZ,QAAMY,GACTO,aACAP,EAAIM,OAWV,SAAgB/B,MAAMyB,EAAaQ,EAAeC,GAChD,OAAOC,OAAUD,GACbD,IAAUC,EACRF,aACAP,EAAIzB,MAAMiC,EAAOC,GACnBT,EAAIzB,MAAMiC,GAWhB,SAAgB7B,UAAQqB,EAAaW,EAAcH,GACjD,OAAOR,EAAIrB,QAAQgC,EAAM1D,MAAMuD,GAASA,EAAQ,GAWlD,SAAgBI,YAAYZ,EAAaW,EAAcF,GACrD,OAAOT,EAAIY,YAAYD,EAAM1D,MAAMwD,GAAOA,EAAMT,EAAIxC,iBAUtCsB,MAAIkB,EAAaW,GAC/B,OAAOhC,UAAQqB,EAAKW,IAAS,WAUfE,WAAWb,EAAaW,GACtC,OAA8B,IAAvBhC,UAAQqB,EAAKW,YAUNG,SAASd,EAAaW,GACpCjI,IAAMqI,EAASf,EAAIxC,OAASmD,EAAKnD,OACjC,OAAOuD,GAAU,GAAKH,YAAYZ,EAAKW,KAAUI,WAMnCC,OAAOhB,EAAanB,GAClC,OAAOmB,EAAIgB,OAAOnC,GAAS,YAMboC,OAAOjB,EAAanB,GAClC,OAAOmB,EAAIkB,WAAWrC,GAAS,YASjBO,QAAMY,GACpB,OAAQmB,OAAUnB,KAASA,EAAIxC,uOCxJ3B4D,UAAY,IAAKC,WAAa,GAAIC,aAAe,YASvCC,MAAMC,EAAiBC,GACrC,OAAID,IAAYC,EACPA,EAAOjE,OAGTkE,WAAkBF,EADzBC,GAAUL,WAENK,EAAOjE,QACN,WASSH,OAAKmE,EAAiBlE,GAOpC,IAJA5E,IAAMiJ,EAAOR,OAAUE,WAAWG,IAC9BH,WAAWG,GACVH,WAAWG,GAAWA,EAAQI,MAAMR,WAEhC1D,EAAI,EAAGmE,EAAYF,EAAKnE,OAAS,EAAGE,GAAKmE,GAC5CvE,EAASqE,EAAKjE,GAAIA,IAAMmE,KAAelE,MADgBD,eAa/CE,OAAKkE,EAAkBC,GACrC,OAAOD,GAAYC,EACfD,EAAWV,UAAYW,EACvBD,GAAYC,WAQFC,QAAQR,GACtB,OAAOS,MAAWT,EAAS,cASbU,WAAWV,EAAiBW,GAC1C1E,IAAI2E,EAAQd,aAAaa,GACpBC,IACHA,EAAQD,EACLlC,QAAQ,MAAO,OACfA,QAAQ,QAAS,cACjBA,QAAQ,MAAO,UAClBmC,EAAQd,aAAaa,GAAW,IAAIE,WAAWD,QAEjD1J,IAAMgG,EAAS8C,EAAQD,MAAMa,GAC7B,GAAI1D,EACF,OAAOA,EAAO,YCpEF4D,KAAKnG,GACnB,OAAOb,OAAOgH,KAAKnG,YASLiD,QAAMjD,GACpB,OAAQoG,OAAUpG,IACbY,MAASZ,KACRmG,KAAKnG,GAAQqB,OAGrB,SAASgF,aAAaC,EAAWC,GAC/B,OAAOD,EAAEjF,OAASkF,EAAElF,OAGtB,SAASmF,cAAcF,EAAWC,GAChC,OAAOA,EAAElF,OAASiF,EAAEjF,gBAUNoF,KAAKzG,EAAgB0G,GACnC,OAAOP,KAAKnG,GAAQyG,KAClBC,EAAOF,cAAgBH,uBAUXnF,OAAKlB,EAAgBmB,GACnC,IAAKG,IAAIgB,KAAOtC,EACd,GAAImB,EAASnB,EAAOsC,GAAMA,KAASd,MACjC,eAYUmB,MAAI3C,EAAgBsC,GAElC,OAAOxB,MAAMd,EAAOsC,KAEftC,EAAO2G,eAAerE,YAQbsE,MAAM5G,GACpBkB,OACElB,EACA,SAAU6G,EAAGvE,UACJtC,EAAOsC,cAUJwE,OAAOC,iEAYrB,OAXAC,KACEC,EACA,SAAUjH,GACRkB,OACElB,EACA,SAAUV,EAAOgD,GACfyE,EAASzE,GAAOhD,MAKjByH,WAUOG,KAAKlH,EAAamH,GAChC7F,IAAIiB,EAASvC,EAwBb,OAvBIY,MAASZ,GACPmH,GACF5E,EAAS,GACTyE,KACEhH,EACA,SAAU4B,EAAMc,GACdH,EAAOG,GAASwE,KAAKtF,EAAMuF,MAK/B5E,EAASvC,EAAOoC,QAGXgE,OAAUpG,KACjBuC,EAAS,GACTrB,OACElB,EACA,SAAUV,EAAOgD,GACfC,EAAOD,GAAO6E,EAAOD,KAAK5H,EAAO6H,GAAQ7H,KAIxCiD,EAMThG,IAAM6K,YAAmC,YAWzBC,IAAIrH,EAAaqF,GA2D/B,OA1CAiC,OACEjC,EACA,SAAU/C,EAAKiF,GAEb,GAAIvH,GAAUC,KAgCZ,OADAD,EAASf,UACFuC,MA1BPF,IAAIhC,EAAQU,EAAOsC,GAInBkF,EAAW1G,MAAMxB,IAAUU,EAAO2G,eAAerE,GAG7ChD,GAASqB,KAAQrB,EAAM+H,OACzB/H,EAAQA,EAAM+H,OAGZE,EACEC,GACFJ,YAAY9H,MAAQA,EACpBU,EAASoH,aAGTpH,EAASf,UAIXe,EAASV,IAWVU,EAYT,SAAgByH,IAAIzH,EAAgBqF,EAAiB/F,EAAYoI,GAC/DJ,OACEjC,EACA,SAAU/C,EAAKiF,GACb,GAAIA,EACFvH,EAAOsC,GAAOhD,OAEX,GAAIU,EAAOsC,GACdtC,EAASA,EAAOsC,OAEb,CAAA,IAAIoF,EAIP,OAAOlG,MAHPxB,EAASA,EAAOsC,GAAO,oKChPNtD,EAAa2I,GACpC,OAAO3I,GAAUiB,MAAYjB,EAAOE,SAChCF,EAAOE,WACP4B,MAAM6G,GACJA,EACAvD,aCDR7H,IAAMqL,qBAAuCC,UAAYC,cAAoBD,QAAU5H,KAKvF8H,UAAY,MAAMC,KAAK9I,WAAS+I,iBAQhC,SAASC,UACP,GAAIC,IAAS,CACX7G,IAAI8G,EAAQD,IAAe,MAC3B,GAAIE,QAAWD,GACb,OAAOA,EAGX,OAAOL,mBAQOO,IAAIC,GACdX,eAAiBM,WACnBN,cAAcU,kBAAkBC,YASpBC,KAAKD,GACfX,eAAiBM,WACnBN,cAAcY,oBAAoBD,YAStBE,MAAMF,GAChBX,eACFA,cAAca,sBAAsBF,YASxBG,MAAMH,GACpB,MAAM,IAAII,sBAAsBJ,OChE9BK,2ECaiBC,QAiCnB,SAAYC,QACLA,GAAKA,GAAMtH,MAChBP,KAAK8H,UAAY,IAgPrB,SAASC,eAAeF,EAAavJ,GAEnChD,IAAMgG,EAAS,CACb0G,KAAM1J,EACNuJ,GAAI1E,cAGN,GAAI0E,EAAI,CACNvM,IAAMmG,EAAQwG,UAAe3J,EAAM,KAC/BmD,GAAS,IACXH,EAAO0G,KAAOE,MAAa5J,EAAM,EAAGmD,GACpCH,EAAOuG,GAAKK,MAAa5J,EAAMmD,EAAQ,IAI3C,OAAOH,EAiBT,SAAS6G,oBAAoBC,GAC3B,OAAOjD,OAAUiD,GACb,SAAUC,GACR,OAAOD,IAAaC,GAEtB3I,KAAQ0I,GACN,SAAUC,GACR,OAAOD,IAAaC,EAAQ9I,IAE9B,SAAU8I,GACR,OAAOtG,MAYjB,SAASuG,eAAeC,EAAmBF,GACzC,OAAQE,EAAUnI,QAAUmI,IAAcF,EAAQR,qBCzV3B9J,GACvB,OAAO2B,KAAQ3B,IAAW,cAAcgJ,KAAK9I,WAASF,sBD0DtDyK,cAAKC,EAA8BC,EAAqCC,GAEtEtI,IAAIuI,EAA2BtK,EAAcmB,EAEzCgJ,aAAkB3I,eACZ2I,EACRnK,EAAOmK,EAAOnK,KACdmB,EAAO0F,OAAUuD,GAAQ,CAACE,EAAOF,GAAQE,MAGlCH,EACHC,MACKA,IAIXrI,IAAIwI,EAAW7I,OAEA+H,eAAec,EAAShB,GAAIvJ,mBAE3CiG,EAAOsE,EAASf,UAAUE,GAE1Bc,EAAa/G,YAETwC,GAEFwB,KACEgD,KAAYxE,GACZ,SAAU8D,EAAyBzC,EAAWrB,GAG5C,IAAKoE,EAAUA,EAAON,EAASK,GAASJ,eAAeT,EAAIQ,KAErDW,IAAUzE,EAAM8D,GAFtB,CAaIO,IACFA,EAAMR,SAAWC,EAAQ9I,IAG3Bc,IAAIiB,EAASJ,QAAQmH,EAAQ9I,GAAI8I,EAAQY,IAAKxJ,GAoB9C,OAjBA4I,EAAQa,IAAMb,EAAQa,IAAOb,EAAQa,IAAM,EAAK,EAG5Cb,EAAQa,MAAQb,EAAQc,OACjBC,IAAI9K,EAAM+J,GAIjBO,IACEtH,IAAWf,MACbqI,EAAMvG,UAAUC,OAETsG,EAAMxG,WACbd,EAASf,QAITe,IAAWf,MACNuI,EAAavI,WADtB,KAQCuI,qBAUTpH,aAAIpD,EAAc8J,OAIhBN,EAFe9H,KAEM8H,YAENC,eAJA/H,KAIwB6H,GAAIvJ,mBAE3CgD,EAASS,KAETsH,EAAgBlB,oBAAoBC,GAEpCnI,EAAO,SAAUsE,eAEbA,EACA,SAAU8D,GACR,GAAIgB,EAAchB,IAAYC,eAAeT,EAAIQ,GAC/C,OAAO/G,EAASf,QAIfe,UAGL0G,EACEF,EAAUE,IACZ/H,EAAK6H,EAAUE,IAGVH,UACKC,EAAW7H,IAGjBqB,qBAWVgI,YAAGhL,EAA0D8J,EAAsCM,GAEjGpN,IAAMuN,EAAW7I,KAEjB8H,EAAYe,EAASf,UAErByB,EAAc,SAAU5I,EAAwCrC,MAC1DqC,EAAM,CACRrF,IAAM+M,EAA0B3I,KAAQiB,GAAQ,CAAEpB,GAAIoB,GAAqBA,EAC3E,GAAIwE,OAAUkD,IAAY3I,KAAQ2I,EAAQ9I,IAAK,CACzCmJ,UACYL,EAASK,SAEJX,eAAec,EAAShB,GAAIvJ,mBAMjD,OALA+J,EAAQR,GAAKA,YAEXC,EAAUE,KAAUF,EAAUE,GAAQ,IACtCK,MAUJtE,OAAUzF,GACZiL,EAAYnB,EAAU9J,UAGVA,EAAMiL,sBAWtBH,aAAI9K,EAAe8J,OAIjBN,EAFiB9H,KAEI8H,aAEjBxJ,EAAM,OAEayJ,eANN/H,KAM8B6H,GAAIvJ,mBAEjD+K,EAAgBlB,oBAAoBC,GAEpCnI,EAAO,SAAUsE,EAAgByD,GAC/BjC,KACExB,EACA,SAAU8D,EAAyB5G,EAAe7C,GAC5CyK,EAAchB,IAAYC,eAAeT,EAAIQ,MACzCvG,OAAOL,EAAO,IAGxBM,MAEGwC,EAAKnE,eACD0H,EAAUE,IAIjBA,EACEF,EAAUE,MACPF,EAAUE,GAAOA,GAGjBH,UACKC,EAAW7H,QA/BVD,KAqCN8H,UAAY,WDzQhB0B,eAAiB7K,cAAoB8K,SAASD,gBACvD7B,SAAW6B,cAgBb,IGrBIE,kBHWF/B,gBADSgC,iBAAmBhL,cAAoB8K,SAASE,gBAC9C,SAAUpK,GACnBjE,IAAMsO,EAAU,IAAID,eACpBC,EAAQC,MAAMC,UAAYvK,EAC1BqK,EAAQG,MAAMC,YAAY,IAIjBC,WGhBQC,SAiBnB,WACElK,KAAKmK,UAAY,aAbLT,yBACPA,SACHA,OAAS,IAAIQ,UAERR,2BAeTU,gBAAOC,QACMrK,KAAKmK,UAAWE,GAC3BrK,KAAKoD,4BAMPkH,iBAAQD,WACQrK,KAAKmK,UAAWE,GAC9BrK,KAAKoD,4BAMPA,iBACE9H,IAAMuN,EAAW7I,KACiB,IAA9B6I,EAASsB,UAAU/J,mBAEnB,WACEyI,EAAS0B,4BASjB5E,iBACE3F,KAAKmK,UAAU/J,OAAS,sBAM1BmK,qBACwBvK,eAClBmK,EAAU/J,SACZJ,KAAKmK,UAAY,QAEfA,EACAjJ,WChED5F,IAAMkP,iBAAmB,SAInBC,aAAe,EAGfC,eAAiB,OACjBC,gBAAkB,QAClBC,gBAAkB,QAClBC,kBAAoB,UAGpBC,mBAAqB,eACrBC,kBAAoB,cACpBC,kBAAoB,cACpBC,iBAAmB,aACnBC,mBAAqB,eACrBC,kBAAoB,cACpBC,oBAAsB,gBACtBC,mBAAqB,eC3BrBC,GAAK,MAELC,MAAQ,SAERC,QAAU,WAEVC,UAAY,aAEZC,QAAU,oBCJPC,OAAOC,EAAUC,EAAcC,GAE7C,6BAEAC,EAAiBD,GAAYA,EAASE,YAEtC,GAAIA,GAAeD,EAAgB,CAEjCzQ,IAAM2Q,EAAWD,GAAeE,aAEhCC,EAAWJ,GAAkBG,aAE7BE,OACEH,EACA,SAAUI,EAAiBrE,GACpBmE,EAASnE,IACTqE,EAAKhO,QAAU8N,EAASnE,GAAM3J,OAEjCuN,EAAIS,KAAKC,EAAMtE,EAAMqE,EAAKhO,SAKhC+N,OACED,EACA,SAAUvG,EAAcoC,GACjBiE,EAASjE,IACZ4D,EAAIW,WAAWD,EAAMtE,eC3Bf2D,SAAOC,EAAUC,EAAcC,GAE7C,6BAEAU,EAAiBV,GAAYA,EAASW,YAEtC,GAAIA,GAAeD,EAAgB,CAEjClR,IAAM2Q,EAAWQ,GAAeP,aAEhCC,EAAWK,GAAkBN,aAE7BE,OACEH,EACA,SAAUS,EAAgB1E,GACnBmE,EAASnE,IACT0E,EAAKrO,QAAU8N,EAASnE,GAAM3J,OAEjCuN,EAAIc,KAAKJ,EAAMtE,EAAM0E,EAAKrO,SAKhC+N,OACED,EACA,SAAUO,EAAgB1E,GACnBiE,EAASjE,IACZ4D,EAAIe,WAAWL,EAAMtE,EAAM0E,EAAKE,kBCzB1BjB,SAAOE,EAAcC,GAEnC,4BAEAe,EAAgBf,GAAYA,EAASgB,WAErC,GAAIA,GAAcD,EAAe,CAE/BvR,IAAMgR,EAAO5D,EAAKqE,YAAoBlB,EAAMS,KAE5CU,EAAkBlB,GAAYD,EAAMzH,UAAY0H,EAAS1H,QAEzD6H,EAAWa,GAAcZ,aAEzBC,EAAWU,GAAiBX,aAE5BE,OACEH,EACA,SAAUgB,EAAsBjF,GAC9B,MAAyBiF,EAAUC,0BAC9Bf,EAASnE,IAGLiF,EAAU5O,QAAU8N,EAASnE,GAAM3J,OACvC2O,KAECG,GACFA,EAAOb,EAAMH,EAASnE,GAAO8D,GAE/BsB,EAAKd,EAAMW,EAAWpB,IARtBuB,EAAKd,EAAMW,EAAWpB,KAa5BO,OACED,EACA,SAAUc,EAAsBjF,GAC9B,IAAKiE,EAASjE,GAAO,CACnB,MAAmBiF,EAAUC,aACzBC,GACFA,EAAOb,EAAMW,EAAWnB,gBAUpBjK,SAAOgK,GACb,mBACR,GAAIiB,EAAY,CACdxR,IAAMgR,EAAOT,EAAMnD,KAAKqE,YAAoBlB,EAAMS,KAClDF,OACEU,EACA,SAAUG,GACR,MAAmBA,EAAUC,aACzBC,GACFA,EAAOb,EAAMW,EAAWpB,eC/DlBF,SAAOE,EAAcC,GAEnC,IAAkDQ,mDAmBlD,GAjBIT,EAAMwB,aACRf,EAAO5D,EAAKqE,WAGRjB,IACEwB,GACFhB,EAAK9F,IAAI8F,EAAKiB,eAAeD,IAE3BE,GACFlB,EAAK9F,IAAIgH,KAKblB,EAAOT,EAAMS,KAGXmB,EAAK,CACPnS,IAAMoS,EAAOlO,EAAQmO,MACjBD,IACFA,EAAKD,GAAOnB,ICRlB,SAASsB,YAAY/B,EAAcC,GACjC,OAAOD,EAAMgC,MAAQ/B,EAAS+B,KACzBhC,EAAMxK,MAAQyK,EAASzK,IAG9B,SAASyM,iBAAiBC,EAA0BC,EAAoBC,GAQtE,IANA5N,IAAIiB,EAEJuK,EAEAxK,EAEO2M,GAAcC,IACnBpC,EAAQkC,EAAOC,MACD3M,EAAMwK,EAAMxK,OACnBC,IACHA,EAAS,IAEXA,EAAOD,GAAO2M,GAEhBA,IAGF,OAAO1M,GAAU4K,aAInB,SAASgC,aAAatC,EAAUuC,EAAkB7B,EAAY8B,GACxDA,EACFxC,EAAIyC,OAAOF,EAAY7B,EAAM8B,GAG7BxC,EAAIxB,OAAO+D,EAAY7B,GAI3B,SAASgC,gBAAgBzC,EAAcxD,GAErC,GAAKA,EAAL,CASA/M,IAAMiT,GAAS1C,EAAM2C,QAAU3C,EAAMrM,SAASiP,OAAOpG,EAASwD,EAAOA,EAAMS,MAG3EA,EAAOiC,EAAMG,IAiBb,OAfIpC,IACFT,EAAMS,KAAOA,GAQfT,EAAMnD,KAAKqE,WAAmBwB,EAC9B1C,EAAMnD,KAAKiG,SAAiBpO,MAE5BqO,SAAiB/C,GACjBgD,SAAiBhD,GAEV0C,GAITlO,IAAIyO,KAAO,EAEX,SAASC,aACPzT,IAAMoN,EAAO,GAEb,OADAA,EAAKsG,MAAcF,KACZpG,EAGT,SAASuG,YAAYrD,EAAUC,GAE7B,8HAEA,IAAIS,IAAQ5D,EAQZ,GAJAA,EAAOqG,aAEPlD,EAAMnD,KAAOA,EAETwG,EACFrD,EAAMS,KAAOV,EAAIuD,WAAWC,QAI9B,GAAIC,EACFxD,EAAMS,KAAOV,EAAI0D,cAAcF,QAIjC,GAAI/B,EAAa,CAEfhN,IAAIkP,EAAUxN,KAEdvC,EAAQgQ,UACN3B,EACA,SAAUxF,GACJxI,MAAM6I,EAAKiG,UAETjG,EAAKiG,WAEHjG,EAAK+G,SACP5D,EAAQnD,EAAK+G,cAEN/G,EAAK+G,QAEdC,WACE7D,EACAyC,gBAAgBzC,EAAOxD,MAM3BiG,gBAAgBzC,EAAOxD,GACvBkH,EAAUhP,SAKZgP,IACF1D,EAAMS,KAAOV,EAAI0D,cAAcK,eAC/BjH,EAAKiG,SAAiB5M,WAMxBuK,EAAOT,EAAMS,KAAOV,EAAIgE,cAAc/D,EAAMgC,KAExCgC,EACFC,UAAUlE,EAAKU,EAAMuD,GAEdT,EACPxD,EAAIwD,KAAK9C,EAAiB8C,EAAMW,GAEzBC,GACPpE,EAAIoE,KAAK1D,EAAiB0D,EAAMD,GAGlCE,OAAkBrE,EAAKC,GACvBqE,SAAkBtE,EAAKC,GACvB+C,SAAiB/C,GACjBgD,SAAiBhD,GAKrB,SAASiE,UAAUlE,EAAUuC,EAAkBJ,EAAiBC,EAAqBC,EAAmBI,GAEtG,IADAhO,IAAIwL,EAAczI,EAAQ4K,GAAc,EAAG3K,EAAMxD,MAAMoO,GAAYA,EAAqBF,EAAO3N,OAAS,EACjGgD,GAASC,GAEd4L,YAAYrD,EADZC,EAAQkC,EAAO3K,IAEf+M,YAAYvE,EAAKuC,EAAYtC,EAAOwC,GACpCjL,IAIJ,SAAS+M,YAAYvE,EAAUuC,EAAkBtC,EAAcwC,GAE7D,kCAEA+B,EAAYxE,EAAI4C,OAAOlC,GAYvB,GATI+B,EACFzC,EAAIyC,OAAOF,EAAY7B,EAAM+B,EAAO/B,MAGpCV,EAAIxB,OAAO+D,EAAY7B,IAKpB8D,EAAW,CACd/P,IAAIgQ,EACJ,GAAIxE,EAAMwB,YAAa,CACrB/R,IAAMkU,EAAY9G,EAAKqE,WACnByC,IACFa,EAAQ,WACNX,WAAW7D,EAAO2D,UAId3D,EAAMyE,UAAazE,EAAMqD,QAAWrD,EAAMwD,YAClDgB,EAAQ,WACNX,WAAW7D,KAGXwE,GAIF7Q,EAAQmI,SAAS0I,EAAOtO,OAM9B,SAASwO,aAAa3E,EAAUuC,EAAkBJ,EAA0BC,EAAqBC,GAE/F,IADA5N,IAAIwL,EAAqBzI,EAAQ4K,GAAc,EAAG3K,EAAMxD,MAAMoO,GAAYA,EAAqBF,EAAO3N,OAAS,EACxGgD,GAASC,IACdwI,EAAQkC,EAAO3K,KAEboN,YAAY5E,EAAKuC,EAAYtC,GAE/BzI,IAIJ,SAASoN,YAAY5E,EAAUuC,EAAkBtC,GACvC,aACR,GAAIA,EAAMyE,UAAYzE,EAAMqD,QAAUrD,EAAMwD,UAC1CzD,EAAI/J,OAAOsM,EAAY7B,OAEpB,CAEHjM,IAKAmP,EALIiB,EAAO,WACTC,aAAa9E,EAAKC,GAClBD,EAAI/J,OAAOsM,EAAY7B,IAKzB,GAAIT,EAAMwB,eACRmC,EAAY3D,EAAMnD,KAAKqE,YAIrB,YADA0D,IAKJE,WAAW9E,EAAO2D,EAAWiB,IAKjC,SAASC,aAAa9E,EAAUC,GAgB9B,+CAEA,IAAI2C,IAICA,EAAOoC,QAEPpC,IAAW3C,EAAMrM,QAKtB,GAAIqM,EAAMwB,YAAa,CACrB/R,IAAMkU,EAAY9G,EAAKqE,WACnByC,GACFqB,SAAiBhF,GACjB2D,EAAUsB,WAGVpI,EAAKiG,SAAiBpO,WAIxBsQ,SAAiBhF,GACbgE,GACF9J,KACE8J,EACA,SAAUtB,GACRmC,aAAa9E,EAAK2C,KAW5B,SAASmB,WAAW7D,EAAc2D,GAIhC,4BAMA,GALIA,IAAcuB,IAEhBA,EAAcvB,EAAUoB,OAAiBG,YAE3C7P,QAAQwH,EAAKsI,UACTD,EAAY,CACN,cACR,GAAIV,EAKF,YAJAA,EACExE,EAAMS,KACNtF,iBAYR,SAAS2J,WAAW9E,EAAc2D,EAAuBiB,GAIvD,4BAKA,GAJIjB,IAAcuB,IAEhBA,EAAcvB,EAAUoB,OAAiBG,YAEvCA,EAAY,CACN,cACR,GAAIE,EAUF,YATAA,EACEpF,EAAMS,KACN5D,EAAKsI,SAAiB,WAChBtI,EAAKsI,WACPP,IACA/H,EAAKsI,SAAiBhT,aAQhCyS,IAGF,SAASS,eAAetF,EAAUuC,EAAkB0B,EAAmBsB,GAerE,IAbA9Q,IAUA+Q,EACAC,EAXIrD,EAAa,EACjBC,EAAW4B,EAASzP,OAAS,EAC7BkR,EAAazB,EAAS7B,GACtBuD,EAAW1B,EAAS5B,GAEpBuD,EAAgB,EAChBC,EAAcN,EAAY/Q,OAAS,EACnCsR,EAAgBP,EAAYK,GAC5BG,EAAcR,EAAYM,GAKnBD,GAAiBC,GAAezD,GAAcC,GAG9CqD,EAGKC,EAGAG,EAGAC,EAKD/D,YAAY0D,EAAYI,IAC/BE,MAAMhG,EAAK0F,EAAYI,GACvBJ,EAAazB,IAAW7B,GACxB0D,EAAgBP,IAAcK,IAIvB5D,YAAY2D,EAAUI,IAC7BC,MAAMhG,EAAK2F,EAAUI,GACrBJ,EAAW1B,IAAW5B,GACtB0D,EAAcR,IAAcM,IAOrB7D,YAAY2D,EAAUG,IAC7BE,MAAMhG,EAAK2F,EAAUG,GACrBxD,aACEtC,EACAuC,EACAuD,EAAcpF,KACdV,EAAIiG,KAAKF,EAAYrF,OAEvBiF,EAAW1B,IAAW5B,GACtByD,EAAgBP,IAAcK,IAKvB5D,YAAY0D,EAAYK,IAC/BC,MAAMhG,EAAK0F,EAAYK,GACvBzD,aACEtC,EACAuC,EACAwD,EAAYrF,KACZoF,EAAcpF,MAEhBgF,EAAazB,IAAW7B,GACxB2D,EAAcR,IAAcM,KAMvBL,IACHA,EAAgBtD,iBAAiBqD,EAAaK,EAAeC,IAS3D5R,MALJwR,EAAWC,EAAWjQ,IAClB+P,EAAcE,EAAWjQ,KACzBrD,YAIF4T,MAAMhG,EAAK0F,EAAYH,EAAYE,IACnCF,EAAYE,GAAsBrT,WAIlCiR,YAAYrD,EAAK0F,GAGnBnB,YAAYvE,EAAKuC,EAAYmD,EAAYI,GAEzCJ,EAAazB,IAAW7B,IAvExB2D,EAAcR,IAAcM,GAH5BC,EAAgBP,IAAcK,GAH9BD,EAAW1B,IAAW5B,GAHtBqD,EAAazB,IAAW7B,GAqFxBwD,EAAgBC,EAClB3B,UACElE,EACAuC,EACA0B,EACA7B,EACAC,EACA4B,EAAS5B,EAAW,IAGfD,EAAaC,GACpBsC,aACE3E,EACAuC,EACAgD,EACAK,EACAC,GAKN,SAAgBG,MAAMhG,EAAUC,EAAcC,GAE5C,GAAID,IAAUC,EAAd,CAIA,sBAGA,IAAK8B,YAAY/B,EAAOC,GAAW,CAIjCxQ,IAAM6S,EAAavC,EAAI4C,OAAOlC,GAM9B,OALA2C,YAAYrD,EAAKC,QACbsC,IACFgC,YAAYvE,EAAKuC,EAAYtC,EAAOC,GACpC0E,YAAY5E,EAAKuC,EAAYrC,KAUjC,GALAD,EAAMS,KAAOA,EACbT,EAAMnD,KAAOA,EAIToD,EAASuB,aAAe3E,EAAKiG,SAC/BjG,EAAK+G,OAAe5D,OAKtB,IAAIA,EAAMyE,WAAYxE,EAASwE,SAA/B,CAIAL,OAAkBrE,EAAKC,EAAOC,GAC9BoE,SAAkBtE,EAAKC,EAAOC,GAC9B8C,SAAiB/C,EAAOC,GACxB+C,SAAiBhD,EAAOC,GAExB,+CAEAgG,EAAUhG,EAASsD,KACnB2C,EAAUjG,EAASkE,KACnBmB,EAAcrF,EAAS+D,SAEnB9L,OAAUqL,GACRA,IAAS0C,GACXlG,EAAIwD,KAAK9C,EAAM8C,EAAMW,GAGhBhM,OAAUiM,GACbA,IAAS+B,GACXnG,EAAIoE,KAAK1D,EAAiB0D,EAAMD,GAI3BF,GAAYsB,EACftB,IAAasB,GACfD,eAAetF,EAAKU,EAAMuD,EAAUsB,GAI/BtB,IACH9L,OAAU+N,IAAY/N,OAAUgO,KAClCnG,EAAIwD,KAAK9C,EAAMnJ,aAAkB4M,GAEnCD,UAAUlE,EAAKU,EAAMuD,IAGdsB,EACPZ,aAAa3E,EAAKU,EAAM6E,IAGjBpN,OAAU+N,IAAY/N,OAAUgO,KACvCnG,EAAIwD,KAAK9C,EAAMnJ,aAAkB4M,cAKrBtB,OAAO7C,EAAUU,EAAY+C,EAAoB7P,EAAc4E,GAC7E,MAAO,CACLyJ,IAAKjC,EAAIiC,IAAIvB,GACb5D,KAAMqG,uBACNM,OACA/C,UACA9M,UACA4E,GAIJ,SAAgB0M,QAAQlF,EAAUC,EAAcmG,GAC9C,GAAIA,EAAU,CACZ1W,IAAM6S,EAAavC,EAAI4C,OAAO3C,EAAMS,MAChC6B,GACFqC,YAAY5E,EAAKuC,EAAYtC,QAS/B6E,aAAa9E,EAAKC,qBCjmBG9N,EAAa2I,GACpC,OAAOuL,QAAWlU,IACbA,EACD8B,MAAM6G,GACJA,EACA,ECLDpL,IAAM4W,QAAU,EAKVC,WAAa,EAKbC,OAAS,EAKTC,MAAQ,EAKRC,OAAS,EAKTC,QAAU,EAKVC,MAAQ,EAKRC,OAAS,EAKTC,KAAO,EC3CPC,MAAQ,CACnBC,IAAK,CAAEC,cAAKxN,GAAU,OAAQA,IAC9ByN,IAAK,CAAED,cAAKxN,GAAU,OAAQA,IAC9B0N,IAAK,CAAEF,cAAKxN,GAAU,OAAQA,IAC9B2N,IAAK,CAAEH,cAAKxN,GAAU,OAAQA,IAC9B4N,KAAM,CAAEJ,cAAKxN,GAAU,QAASA,KAIrB6N,OAAS,CACpBC,IAAK,CAAEC,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnD+N,IAAK,CAAED,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDgO,IAAK,CAAEF,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDsN,IAAK,CAAEQ,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDwN,IAAK,CAAEM,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDiO,KAAM,CAAEH,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrDkO,KAAM,CAAEJ,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrDmO,MAAO,CAAEL,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,IAAMC,IACvDoO,IAAK,CAAEN,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDqO,KAAM,CAAEP,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrDsO,IAAK,CAAER,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IACnDuO,KAAM,CAAET,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrDwO,KAAM,CAAEV,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrDyO,KAAM,CAAEX,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACrD0O,MAAO,CAAEZ,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,IAAMC,IACvD2O,MAAO,CAAEb,KAAM,GAAIP,cAAKxN,EAAQC,GAAU,OAAOD,IAAMC,IACvD4O,IAAK,CAAEd,KAAM,EAAGP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IAClD6O,IAAK,CAAEf,KAAM,EAAGP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IAClD8O,IAAK,CAAEhB,KAAM,EAAGP,cAAKxN,EAAQC,GAAU,OAAOD,EAAIC,IAClD+O,KAAM,CAAEjB,KAAM,EAAGP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IACpDgP,KAAM,CAAElB,KAAM,EAAGP,cAAKxN,EAAQC,GAAU,OAAOD,GAAKC,IAEpDiP,KAAM,CACJnB,KAAM,EACNP,cAAKxN,EAAWC,GACd,OAAOD,EAAIC,EACP,SAAUpF,GACV,IAAKG,IAAIC,EAAI+E,EAAG5D,EAAQ,EAAGnB,EAAIgF,EAAGhF,IAChCJ,EAASI,EAAGmB,MAGd,SAAUvB,GACV,IAAKG,IAAIC,EAAI+E,EAAG5D,EAAQ,EAAGnB,EAAIgF,EAAGhF,IAChCJ,EAASI,EAAGmB,QAKtB+S,KAAM,CACJpB,KAAM,EACNP,cAAKxN,EAAWC,GACd,OAAOD,EAAIC,EACP,SAAUpF,GACV,IAAKG,IAAIC,EAAI+E,EAAG5D,EAAQ,EAAGnB,GAAKgF,EAAGhF,IACjCJ,EAASI,EAAGmB,MAGd,SAAUvB,GACV,IAAKG,IAAIC,EAAI+E,EAAG5D,EAAQ,EAAGnB,GAAKgF,EAAGhF,IACjCJ,EAASI,EAAGmB,SCnDXgT,UAAY,EAKZC,UAAY,EAKZC,SAAW,EA6CXC,OAAS,oBC7DG7W,GACvB,OAAOA,IAAWC,0BCHKD,GACvB,OAAO8W,KAAKC,UAAU/W,OC0DxBgX,YAAc,IAEdC,YAAc,IAEdC,kBAAoB,IAEpBC,sBAAwB,IAExBC,wBAA0B,IAE1BC,kBAAoB,IAEpBC,qBAAuB,IAEvBC,eAAiB,IAEjBC,cAAgB,IAEhBC,UAEY,IAUZC,aAAeC,OAAOvS,cAItBwS,YAAc,YACZC,KAAW,CACTX,kBACAC,sBACAC,wBACAC,kBACAC,qBACAN,YACAO,eACAC,cACAP,aACCQ,uBC/ECK,aAAe,GAsHrB,SAAgB3U,UAAQoL,EAAYwJ,EAAkDtW,GACpF,OAAOqW,aAAavJ,EAAKhO,MAAMgO,EAAMwJ,EAAQtW,GCnH/C,SAASuW,QAAQhY,EAAaiK,EAAc3G,EAAahD,IAC3CN,EAAOiK,KAAUjK,EAAOiK,GAAQ,KACxC3G,GAAOhD,WAGG2X,OACdxW,EACAyW,EACAC,EACApJ,EACAqJ,EACAC,GAGA/V,IAMAgW,EANIC,EAAWnT,aAEfoT,EAA8B,UAAED,GAEhCE,EAAS,CAACF,EAAUC,GAIpBE,EAAwB,GAExBC,EAA0C,GAE1CC,EAAS,SAAUC,EAAcnV,EAAeJ,EAAaiL,EAAeuK,EAAqBC,GAE/FzW,IAAI+D,EAAU2S,OAAiBH,EAAMnV,GAAQJ,GAE7C2V,EAAQJ,EAAMnV,EAAQ,GAStB,GAPA6K,EAAK2K,gBAAkB7S,EAGnB8S,QAAQJ,KACVA,EAAiB1S,GAGfiS,GAAcc,MAAWd,EAAYhV,GACvC,OAAOgV,EAAWhV,GAIpB,GAAI8V,MAAWH,EAAO3V,GACpB,OAAO2V,EAAM3V,GAIf,GAAI8V,MAAWH,EAAO,SAAU,CAO9B,GANAA,EAAQA,EAAMI,MAMV/V,IAAQ8B,aACV,OAAO6T,EAGT,GAAIA,GAASG,MAAWH,EAAO3V,GAC7B,OAAO2V,EAAM3V,GAKjBhB,IAAIiB,EAAS9B,EAAQ4G,IAAIhC,EAASuS,EAAQE,GAC1C,GAAIvV,IAAWqV,EAAQ,CAErB,GAAIrK,EAAKqK,SAAWpW,OAAakB,EAAQ,EAEvC,OAAOkV,EAAOC,EADdnV,GAAS,EACmBJ,EAAKiL,EAAMuK,EAAWC,GAGpD,KADAxV,EAAS+V,IAAWpB,EAAS5U,IAI3B,OAFAiL,EAAK2K,gBAAkBH,OACvBQ,cAAqBhL,yBAGvBhL,EAASA,EAAOjD,MAGlB,OAAOiD,GAITiW,EAAW,SAAUC,EAAsBX,EAAqBD,GAE9Dtb,IAAMmc,EAAcb,GAASJ,aAI7B,OAAOkB,UACLF,EACA,SAAUpT,EAAiBkI,GACzB,OAAOqK,EACLc,EACArX,EAAS,IAAMkM,EAAK3I,QAAU,GAAK,GACnCS,EACAkI,EACAuK,IAGJrX,IAKJmY,EAAa,SAAU9L,EAAYQ,GAEjC,aAEAhO,EAAQkZ,EAASC,EAAMzV,MAEvBV,EAAM0V,OAAiBa,kBAA0BvL,EAAKrE,MAEtDkF,EAAQJ,EAAW8K,mBAkBnB,OAhBI1K,GACF6I,QACElK,EACA,aACAxK,EACA,CACEwG,GAAI+P,kBACJ5P,KAAMqE,EAAKrE,SACX3G,QACA6L,EACA2K,QAASL,EAAKP,gBACdrK,KAAMP,EAAKO,OAKVvO,GAkITyZ,EAAsB,SAAUxZ,GAC9B,OAAO,SAAUsK,EAAcF,GACzBE,EAAMtK,OAASA,IACjBsK,EAAQ,IAAImP,YAAMzZ,EAAMsK,IAE1BpJ,EAAQgJ,KAAKI,EAAOF,KAIxBsP,EAAuB,SACrBC,EACAxY,EACAmX,GAEA,OAAO,SAAUhO,EAAeF,GAE9BpN,IAIMgG,EAJA4W,EAAS1Y,EAAQyY,GAEnBrP,aAAiBmP,aAIftY,GAEF4W,EAAa,CACX8B,OAAQvP,EACRwP,MAAO1P,GAETpH,EAASJ,QAAQgX,EAAQ1Y,EAASC,EAAKmX,IAEvCP,EAAarY,WAGbsD,EAASJ,QAAQgX,EAAQ1Y,EAASkJ,EAAO,CAACE,EAAOF,GAAQE,GAGvDtH,IAAWf,OACbqI,EAAMvG,UAAUC,QAIlBpB,QACEgX,EACA1Y,EACAC,EAAOA,EAAKmX,GAAS5Y,aAO7Bqa,EAAe,SAAUvC,EAAkBc,GACzC,OAAO,WACL,OAAOd,EAAOc,KAIlB0B,EAAmB,SAAUd,EAAsBe,GACjDjd,IAAM+C,EAAQkZ,EAASC,GACvB,OAAOe,EACHta,WAASI,GACTA,GAGNma,EAAsB,SAAUhB,EAAsBZ,GACpD,OAAOW,EAASC,EAAMxZ,UAAe4Y,IAGvC6B,EAAwB,SAAUjB,EAAsBe,GACtDG,EACEJ,EAAiBd,EAAMe,KAI3BG,EAAkB,SAAUtJ,GAC1B9T,IAAMqd,EAAYC,KAAWnC,GAC7B,GAAIkC,EAAW,CACbrd,IAAMud,EAAYD,KAAWD,GACzBE,GAAaA,EAAU3J,OACzB2J,EAAUzJ,MAAQA,EAGlB0J,KACEH,EACA,CACEzJ,OAAQnN,UACRqN,UACA5P,EACA4E,QAASkS,MAOnByC,EAAqB,SACnBlN,EACAmN,EACAC,EACAzL,GA0DA,GAvDIwL,IACFjT,KACEiT,EACA,SAAU3M,GAER,uBAEA,OAAQA,EAAK/N,MAEX,KAAK4a,UAEC7M,EAAKwL,UACPxZ,EAAQsZ,EAAW9L,EAAOQ,IAGxBR,EAAMwB,YACR0I,QAAQlK,EAAO,QAAS7D,EAAM3J,GAG9B0X,QAAQlK,EAAO,cAAe7D,EAAM,MAAEA,QAAM3J,IAG9C,MAEF,KAAK8a,SACHpD,QACElK,EACA,cACA7D,EACA,MACEA,EACA3J,MAAOgO,EAAKwL,QAAUF,EAAW9L,EAAOQ,GAAQhO,EAChDuO,KAAMP,EAAKO,OAGf,MAEF,KAAKwM,WA/NA,SAAUvN,EAAYQ,GAEnC,IAIAwL,EAEA3K,EAEA4I,EAEAuD,EAEAtI,4BAVA1P,EAAM0V,OAAiBlP,EAAIG,GAY3B,OAAQH,GAEN,KAAKyR,gBACHpM,EAAQJ,EAAWwM,iBACnBD,EAAUhN,EAAKzD,MACXkP,EAAoBzL,EAAKzD,OACzBoP,EAAqB3L,EAAK4L,OAAQ5L,EAAK5M,KAAM+W,GACjD,MAEF,KAAK+C,eAUH,aATAxI,EAAaoF,EAAY9X,MAEvBwN,EAAMkF,WAAaA,IASvB,KAAKyI,gBACHtM,EAAQJ,EAAW0M,iBACnB3N,EAAM4N,MAAQlC,EAASlL,EAAKmL,KAAMzV,MAClC8V,EAAUxL,EAAKmL,KAAKP,gBACpB,MAEF,KAAKyC,eAEH,YADA3D,QAAQlK,EAAO,OAAQ7D,EAAM3J,GAG/B,QACE6O,EAAQJ,EAAW9E,GACfqE,EAAK4L,OACPoB,EAAUrB,EAAqB3L,EAAK4L,OAAQ5L,EAAK5M,KAAM+W,GAEhDnK,EAAKyJ,SACZA,EAASuC,EAAahM,EAAKyJ,OAAQU,IAMrCtJ,GACF6I,QACElK,EACA,aACAxK,EACA,IACEwG,OACAG,MACA3G,QACAhD,UACAwZ,QACA3K,SACA4I,UACAuD,IAwJIM,CAAa9N,EAAOQ,GACpB,MAEF,KAAKuN,QA7QA,SAAU/N,EAAYQ,GAEnC,aAEAhO,EAAQkZ,EAASC,EAAMnL,EAAKwL,SAG5B,GAAI1S,OAAU9G,KAAWsB,MAAStB,GAAQ,CAExC+N,OACE/N,EACA,SAAUA,EAAYgD,GACpB0U,QAAQlK,EAAO,QAASxK,EAAKhD,KAIjC/C,IAAM2b,EAAkBO,EAAKqC,sBAC7B,GAAI5C,EAAiB,CACnB3b,IAAM+F,EAAM0V,OAAiBa,kBAA0BX,GACvD/J,EAAQJ,EAAW8K,mBACf1K,GACF6I,QACElK,EACA,aACAxK,EACA,CACEwG,GAAI+P,kBACJ5P,KAAM7E,iBACN9B,QACA6L,EACA2K,QAASd,OAAiBE,EAAiB,aAQnDK,SAAgBE,sBAwORsC,CAAajO,EAAOQ,MAOxBR,EAAMiB,aAAejB,EAAMkO,OAC7BlO,EAAMkO,KAAO7N,eAKb+M,EACFxC,EAAWzV,KAAK6K,EAAMgE,SAAW,IACjCoJ,IACAe,IAAUvD,QAEP,GAAIjJ,EAAO,CACdlS,IAAM2e,EAAc,GACpB7N,OACEoB,EACA,SAAU0M,EAAgBlS,GACxByO,EAAWzV,KAAK,IAChBkZ,IACAD,EAAYjS,GAAQgS,IAAUvD,KAGlC5K,EAAM2B,MAAQyM,EAGhBpO,EAAMrM,QAAUA,EAChBqM,EAAMzH,QAAUkS,EAEhBhb,IAAMqd,EAAYC,KAAWnC,GAK7B,OAJIkC,GACFG,KAAWH,EAAW9M,GAGjBA,GAKTsO,EAAa,SAAUnS,EAAcoS,GAEnC9e,IAAMqd,EAAYC,KAAWnC,GAAa1I,EAASvO,EAAQ4G,IAAI4B,GAE3D+F,EACFhI,KACEgI,EACA,SAAUlC,GACRiN,KAAWH,EAAW9M,GACtBA,EAAM2C,OAAShP,IAIZ4a,GACPA,KAQJC,EAAgB,SAAUrS,EAAcgO,GACtCU,EAAc1O,GAAQgO,GAIxBsE,EAAe,SAAUtS,GACvB,GAAI0O,EAAc1O,GAChB0O,EAAc1O,SADhB,CAKE1M,IAAMif,EAAUrE,EAASlO,GACrBuS,GACFA,EACEjC,EACAE,EACAC,EACAC,EACAK,EACAoB,EACAE,EACAC,EACAE,KAURA,EAAa,SAAUhD,EAAsB/V,EAAiC4X,GAE5EhZ,IAAIoa,EAA0BC,EAE1Bhb,KAAQ+B,IACViZ,EAAcjZ,EACdgZ,EAAYzc,YAGZ0c,EAAcrB,EACdoB,EAAYhZ,GAGdnG,IAAM+C,EAAQkZ,EAASC,GAEvBmD,EAAcnD,EAAKqC,sBAEnBe,EAAcD,GAAe5D,OAAiBT,EAAUkB,EAAKqD,KAE7D3a,EAAW,SAAUS,EAAWU,GAE9BhB,IAAIya,EAAcxE,EAAUyE,EAAYxE,EAAQyE,EAAmBxE,EAEnEF,EAAWS,OAAiB6D,EAAa3c,WAASoD,IAClDkV,EAAS,GAGTuC,KAFAtC,EAASzN,KAAYyN,GAEFF,GACnBwC,KAAWtC,EAAQD,GAInBA,EAAOD,SAAWA,EAIbqE,IACHpE,EAAOa,MAAQzW,GAGb8Z,IACFlE,EAAOkE,GAAapZ,GAGtBqZ,EAAY/Z,EAAMU,GAElBiV,EAAWwE,EACXvE,EAASwE,EACTvE,EAASwE,GAIPrb,MAAStB,GACX0H,KAAW1H,EAAO6B,GAEXiF,OAAU9G,GACjB+N,OAAY/N,EAAO6B,GAEZR,KAAQrB,IACfA,EAAM6B,IAKV,OAAOkW,EACLkC,EACAE,EACAC,EACAC,EACAK,EACAoB,EACAE,EACAC,EACAE,GDrkBJ3E,aAAaoF,SAAoB,SAAU3O,GACzC,OAAOA,EAAKjO,OAGdwX,aAAaqF,YAAuB,SAAU5O,EAAkBwJ,GAC9D,OAAOA,EAAOxJ,EAAKtE,KAAMsE,IAG3BuJ,aAAasF,QAAmB,SAAU7O,EAAcwJ,EAAkDtW,GAuBxG,IAAqC4b,EAAY1S,8BAEjD,GAAIwO,QAAQmE,GAAgB,EAG1BD,EAAQ9N,EAAM,IAEJhP,OAAS4c,WACjBG,EAAiBD,EAAqBpT,MAGtCqT,EAAgBlY,aAChBuF,EAAOxH,UAAQka,EAAOtF,EAAQtW,IAGhC,IAAKa,IAAIC,EAAI,EAAGgb,EAAMhO,EAAMlN,OAAQE,EAAIgb,EAAKhb,IAC3C+a,EAAgBtE,OACdsE,EACAna,UAAQoM,EAAMhN,GAAIwV,EAAQtW,IAMhC,OAAIK,MAAM6I,IACRA,EAAO2O,IAAW3O,EAAM2S,IACV3S,EAAKrK,MAAQL,UAGzB8X,EACKA,EAAOuF,EAAyB/O,QADzC,GAMFuJ,aAAa0F,OAAkB,SAAUjP,EAAawJ,EAAkDtW,GACtG,OAAOgc,MAAkBlP,EAAKmP,UAAU5I,KACtC3R,UAAQoL,EAAKoP,IAAK5F,EAAQtW,KAI9BqW,aAAa8F,QAAmB,SAAUrP,EAAcwJ,EAAkDtW,GACxG,OAAOoc,OAAmBtP,EAAKmP,UAAU5I,KACvC3R,UAAQoL,EAAKuP,KAAM/F,EAAQtW,GAC3B0B,UAAQoL,EAAKwP,MAAOhG,EAAQtW,KAIhCqW,aAAakG,SAAoB,SAAUzP,EAAewJ,EAAkDtW,GAC1G,OAAO0B,UAAQoL,EAAKvF,KAAM+O,EAAQtW,GAC9B0B,UAAQoL,EAAK0P,IAAKlG,EAAQtW,GAC1B0B,UAAQoL,EAAK2P,GAAInG,EAAQtW,IAG/BqW,aAAaqG,OAAkB,SAAU5P,EAAiBwJ,EAAkDtW,GAC1G,OAAO8M,EAAK6P,SAASC,IACnB,SAAU9P,GACR,OAAOpL,UAAQoL,EAAMwJ,EAAQtW,MAKnCqW,aAAawG,QAAmB,SAAU/P,EAAkBwJ,EAAkDtW,GAC5Ga,IAAIiB,EAAS,GAOb,OANAyE,KACEuG,EAAKpH,KACL,SAAU7D,EAAKI,GACbH,EAAOD,GAAOH,UAAQoL,EAAKgQ,OAAO7a,GAAQqU,EAAQtW,KAG/C8B,GAGTuU,aAAa0G,MAAiB,SAAUjQ,EAAYwJ,EAAkDtW,GACpG,OAAOgd,QACLtb,UAAQoL,EAAK4L,OAAQpC,EAAQtW,GAC7BA,EACA8M,EAAK7M,KAAK2c,IACR,SAAU9P,GACR,OAAOpL,UAAQoL,EAAMwJ,EAAQtW,OE7HrClE,IAAMmhB,mBAAqC,CAAEC,KAAM3a,MAEnD4a,oBAAsC,CAAED,KAAMnc,OAOzBqc,SA0EnB,SACExY,EACAsY,EACA1X,EACA6X,EACAC,EACAhH,EACAiH,GAGAzhB,IAAMuN,EAAW7I,KAEjB6I,EAASzE,QAAUA,EACnByE,EAAS6T,KAAOA,EAChB7T,EAAS7D,MAAQA,EAEjB6D,EAASgU,KAAO,GAEhBhU,EAASrJ,QAAUsd,EAAStd,QAC5BqJ,EAASiU,SAAWA,EACpBjU,EAASiN,OAASA,EAClBjN,EAASkU,OAASA,EAElBlU,EAASmU,OAAS,KAET9c,SAAW,SAAU4C,EAASC,EAASka,GAI9C3hB,IAAM6Q,EAAWtD,EAASxK,MAC1B4N,EAAWpD,EAASzC,IAAIrE,MAEpBkK,IAAaE,KACN+Q,KAAK9Y,EAAS6H,EAAUE,KAKjCtD,EAASsU,OAASC,MAAYP,WAE9BA,EACA,SAAUQ,GACRxU,EAASyU,IAAID,KAGjBxU,EAASuE,4BCjIUmQ,EAAkBnZ,GAEzC/D,IAAIiB,EAgBJ,OAdAyE,KACEwX,EACA,SAAUlZ,GACR/I,IAAM8E,EAASod,MAAkBpZ,EAASC,GAC1C,GAAIjE,GAAU,EAKZ,OAJAkB,EAAS,CACP0G,KAAM3D,EACNqI,KAAMxE,MAAa9D,EAAShE,IAEvBG,QAKNe,qBC1BgBmc,EAAarZ,GAEpC,GAAIqZ,GAAUze,MAAYoF,IAAYjB,aACpC,OAAOsa,EAGTniB,IAAMgG,EAAS+V,IAAWoG,EAAQrZ,GAClC,OAAI9C,EACKA,EAAOjD,WADhB,sBCCA4N,EACAE,EACAjM,GAGA5E,IAAMoiB,EAAc3Z,OAAUkI,GAE9B0R,EAAc5Z,OAAUoI,GAExB,GAAIuR,GAAeC,EAMjB,OALAzd,EACE0d,WACAF,EAAczR,EAAS7L,OAASpC,UAChC2f,EAAcxR,EAAS/L,OAASpC,WAE3B+D,wBCfTkK,EACAE,EACAjM,GAGA5E,IAAMuiB,EAAale,MAASsM,GAE5B6R,EAAane,MAASwM,GAEtB,GAAI0R,GAAcC,EAAY,CAE5BxiB,IAAMyiB,EAAYF,EAAa5R,EAAS7L,OAASpC,UAEjDggB,EAAYF,EAAa3R,EAAS/L,OAASpC,UAE3CkC,EACE0d,WACAG,EACAC,GAGF,IAAK3d,IAAIC,EAAI,EAAGF,EAAS6d,KAAK9U,IAAI4U,GAAa,EAAGC,GAAa,GAAI1d,EAAIF,EAAQE,IAC7EJ,KACKI,EACH2L,EAAWA,EAAS3L,GAAKtC,UACzBmO,EAAWA,EAAS7L,GAAKtC,WAI7B,OAAO+D,0BC5BTkK,EACAE,EACAjM,GAGA5E,IAAM4iB,EAAc/Y,OAAU8G,GAE9BkS,EAAchZ,OAAUgH,IAEpB+R,GAAeC,KAEjBlS,EAAWiS,EAAcjS,EAAWC,aACpCC,EAAWgS,EAAchS,EAAWD,aAEhCgS,GACF9R,OACEH,EACA,SAAU5N,EAAYgD,GAChBhD,IAAU8N,EAAS9K,IACrBnB,EAASmB,EAAKhD,EAAO8N,EAAS9K,MAMlC8c,GACF/R,OACED,EACA,SAAU9N,EAAYgD,GAChBhD,IAAU4N,EAAS5K,IACrBnB,EAASmB,EAAK4K,EAAS5K,GAAMhD,eClCjB+f,cACtBha,EACA6H,EACAE,EACAkS,EACAne,GAGA5E,IAAM4hB,EAAO,SAAUoB,EAAoBC,EAAkBC,GAE3D,GAAID,IAAgBC,EAAa,CAE/BljB,IAAMmjB,EAAa1H,OAAiB3S,EAASka,GAE7CvY,KACEsY,EACA,SAAUK,GACJ7e,MAAM8e,WAAuBF,EAAYC,KAC3Cxe,EACEwe,EAAcD,EAAYF,EAAaC,KAM/CJ,cAAcK,EAAYF,EAAaC,EAAaH,EAAoBne,KAM5E0e,WAAW3S,EAAUE,EAAU+Q,IAC1B2B,UAAU5S,EAAUE,EAAU+Q,IAC9B4B,WAAW7S,EAAUE,EAAU+Q,wBC/BpC9Y,EACA6H,EACAE,EACA4S,EAAiBC,EACjB9e,GAGAG,IAAI4e,EAGJ7S,OACE2S,EACA,SAAUnZ,EAAGsZ,GAGX,GAAIC,QAAoBD,GAOlBrf,MAAM8e,WAAuBva,EAAS8a,IACxChf,EACEgf,EAAc9a,EAAS6H,EAAUE,GAG5B6S,IACHC,EACFnG,KACEmG,EACAC,GAIFD,EAAgB,CAACC,QApBvB,CA6BA5jB,IAAM8E,EAASod,MAAkB0B,EAAc9a,GAC/C,GAAIhE,GAAU,EAAG,CAEf9E,IAAMgjB,EAAapW,MAAagX,EAAc9e,GAC9Cme,EAAca,UAAUnT,EAAUqS,GAClCE,EAAcY,UAAUjT,EAAUmS,GAE9BC,IAAgBC,GAClBte,EACEgf,EAAcA,EAAcX,EAAaC,OAY/CS,GACFb,cAAcha,EAAS6H,EAAUE,EAAU8S,EAAe/e,0BCnErCmI,EAAyBK,GAEhD,GAAIL,EAAQgX,OAAS3W,EASnB,OAHAL,EAAQgX,QAGD3W,EAAK,KAAOA,EAAK,GCT5B,8BAAyBL,GAEvB,OAAOA,IAAYtG,KACf,CAAEud,UAAWvd,MACboD,OAAUkD,GACRU,KAAYV,GACZ,YTeCkX,eAAMnb,EAAiB0Y,EAA6BzU,OAQzDyN,EAEAiH,EARI/X,EAAQjD,KAEZ2a,EAAO3a,KAEP8a,EAAO2C,eAMH9f,KAAQ2I,KACDA,EAEFlD,OAAUkD,KACbjB,QAAWiB,EAAQrD,SACrBA,EAAQqD,EAAQrD,OAEdoC,QAAWiB,EAAQqU,QACrBA,EAAOrU,EAAQqU,MAEb/c,MAAS0I,EAAQwU,QACnBA,EAAOxU,EAAQwU,MAEbnd,KAAQ2I,EAAQjC,OAClB0P,EAASzN,EAAQjC,KAEf1G,KAAQ2I,EAAQ7B,OAClBuW,EAAS1U,EAAQ7B,MAIjBsP,EACF,OAAO,IAAI8G,SAASxY,EAASsY,EAAM1X,EAAO6X,EAAMC,EAAUhH,EAAQiH,uBAoFtE3W,aAAIqZ,GAEFnkB,MAAiB0E,cAAAA,aAKjB,GALiBA,KAKHgF,OAKT,GAAIya,IAAUtI,MAVFnX,KAUuB0f,WAGtC,GAbe1f,KAaFmd,MAbEnd,KAcJ3B,MAAQ6C,QAAQ4U,EAAQtW,OAE9B,CAhBUQ,KAkBJmN,SAGT7R,IAAMqkB,EAAe/C,SAASgD,QAC9BhD,SAASgD,QAtBI5f,KAAAA,KAwBJ3B,MAAQ6C,QAAQ4U,EAAQtW,GAxBpBQ,KA2BJoN,OAETwP,SAASgD,QAAUD,QA7BN3f,KAMN3B,MAAQ6C,QAAQ4U,EAAQtW,GA4BnC,OAlCiBQ,KAkCD3B,0BAGlBmI,aAAInI,SAC0B2B,cAAAA,aACxB+c,KACKve,KAAKgB,EAASnB,uBAWzBif,aAAID,QACGL,OAAOK,GAAOtb,yBAMrBqL,sBAEqDpN,cAAAA,YAAAA,gBAAAA,gBAAAA,iBAGjDgd,EACA,SAAUpX,EAAQyX,QACLR,EAAMQ,GACjBP,EAAS+C,MACPxC,EACAnd,EACAwc,EAAOD,mBAAqBE,uBAOlC3c,KAAKgd,OAAS,uBAOhB7P,wBAEuCnN,YAAAA,gBAAAA,mBAGnC6c,EACA,SAAUQ,KACCyC,QAAQzC,EAAKnd,IAExB6B,MAGF8a,EAAKzc,OAAS,GUpNlB,IAAqB2f,SAoBnB,SAAYrX,EAAelJ,GAERQ,KAER0I,KAAOA,GAAQ,GAFP1I,KAGRR,QAAUA,GAHFQ,KAAAA,KAIRggB,SAAW,IAAI9V,SAJPlK,KAMRigB,YAAc,IAAIrY,QANV5H,KAORkgB,aAAe,IAAItY,QAPX5H,KAQRmgB,aAAe,uBAY1B/Z,aACEhC,EACAsC,EACAmQ,OAoBIvV,EAAavD,EAfjBqiB,EAAkBxD,SAASgD,UAFV5f,YAAAA,gBAAAA,0BAOjB,GAAIoE,IAAYjB,oBACPuF,KAKL0X,IAAoBvJ,GACtBuJ,EAAgB9C,IAAIlZ,GAKlBic,EAAU,IACZtiB,EAASsiB,EAASjc,GAEhB,OAAOrG,EAAOqI,SAEZka,EAAsB,KAClBnc,EAAQoc,UAAUD,EAAsBlc,GAC1CD,GAASA,EAAMuI,SACR2K,IACPgJ,EAASlc,EAAM6D,MAAM5B,MACrBjC,EAAMuI,eAMTpL,MACM+V,IAAW3O,EAAMtE,IAGrB9C,EAASA,EAAOjD,MAAQqI,sBAUjCF,aACEpC,EACA/F,GAGA/C,IAAMuN,EAAW7I,oDAIjBwgB,EAAW,SAAUvU,EAAe7H,OAE5B+H,EAAWtD,EAASzC,IAAIhC,GAC9B,GAAI6H,IAAaE,EAAjB,KAIIpO,KAEAsiB,KACFtiB,EAASsiB,EAASjc,KAEhBrG,EAAOyI,IAAIyF,GAETqU,GAAsB,KAClBnc,EAAQoc,UAAUD,EAAsBlc,GAC9C,GAAID,GAASA,EAAMuI,SACR2T,EAASlc,EAAM6D,OACZ,KACJyY,EAAc1iB,EAAOqI,OACvBjB,OAAUsb,IAAgB9gB,MAAS8gB,KACrCC,IAAWD,EAAatc,EAAMuI,KAAMT,IAOzClO,OACQ2K,EAAMtE,EAAS6H,KAGnBiR,KAAK9Y,EAAS6H,EAAUE,KAI/BpI,OAAUK,GACZoc,EAASniB,EAAO+F,GAETe,OAAUf,WACLA,EAASoc,uBAYzBtD,cACE9Y,EACA6H,EACAE,GAGA7Q,IAAMuN,EAAW7I,uDASjBgf,EAAyC,KAA3B2B,OAAcvc,eAG1BA,EAAS6H,EAAUE,EACnB8T,EAAYnY,UAAWkX,EACvB,SAAUE,EAAsB9a,EAAiB6H,EAAeE,GAC9D8T,EAAYzX,KAAK0W,EAAc,CAACjT,EAAUE,EAAU/H,kBAiBtDA,EAAS6H,EAAUE,EACnB+T,EAAapY,UAAWkX,EACxB,SAAUE,EAAsB9a,EAAiB6H,EAAeE,GAE9DpG,KACEma,EAAapY,UAAUoX,GACvB,SAAUve,GACRA,EAAK0e,iBAIQc,EAAa/b,KAAa+b,EAAa/b,GAAW,CAAE/F,MAAO8N,EAAU5H,KAAM,WACvFyE,IAAUzE,EAAM2a,SACR3a,EAAM2a,GAGdrW,EAAS+X,UACZ/X,EAAS+X,QAAU7e,KACnB8G,EAASmX,SAAS5V,OAChB,WACMvB,EAAS+X,UACX/X,EAAS+X,QAAU5iB,UACnB6K,EAASgY,sCAavBA,qBAEEvlB,IAAMuN,EAAW7I,uCAIjB6I,EAASsX,aAAe,UAGtBA,EACA,SAAUxf,EAAMyD,GAEd9I,IAAMmE,EAAO,CAACoJ,EAASzC,IAAIhC,GAAUzD,EAAKtC,MAAO+F,QAM/CzD,EAAK4D,KACL,SAAU2a,KACK1W,KAAK0W,EAAczf,EAAMqhB,uCAehDC,qBACE3c,EACAiE,GAGA/M,IACA+kB,EAAWzD,SAAS2C,MAAMnb,EADTpE,KAC4BqI,MAEzCgY,SAHargB,KAKDqgB,WALCrgB,KAMJqgB,SAAW,IANPrgB,KASNqgB,SAASjc,GAAWic,EATdrgB,KAUNsgB,qBAAuBU,KAVjBhhB,KAUsCqgB,SAAUte,MAExDse,sBAWXY,wBACE7c,GAGA9I,MAAiB0E,cAGbqgB,GAAYlJ,MAAWkJ,EAAUjc,YAC5Bic,EAASjc,GAJDpE,KAKNsgB,qBAAuBU,KAAYX,EAAUte,2BAe1D8d,eACEzb,EACA2a,EACA1W,GAGA/M,IAAMuN,EAAW7I,kDAIjBoN,EAAO,SAAUhJ,EAAiB2a,EAAc1W,GAE1ClD,OAAU4Z,KAER3X,QAAW2X,EAAQO,aACrBjX,EAAQiX,UAAYP,EAAQO,WAE1BlY,QAAW2X,EAAQrC,QACrBrU,EAAQqU,KAAOqC,EAAQrC,MAErBtV,QAAW2X,EAAQmC,QACrB7Y,EAAQ6Y,KAAOnC,EAAQmC,MAErBxhB,KAAQqf,EAAQA,WAClBA,EAAUA,EAAQA,cAKhBoC,EAAU9Y,EAAQqU,KAAOuD,EAAcC,EAE7C,GAAIxgB,KAAQqf,GAAU,KACd3W,EAA2B,IAC3B2W,MACCvf,QACE,GAEL6I,EAAQ6Y,OACV9Y,EAASe,IAAM,KAETG,GAAGlF,EAASgE,GAQlBC,EAAQiX,WACVpe,QACE6d,EACAvf,EACA,CACEqJ,EAASzC,IAAIhC,aAEbA,KAOJL,OAAUK,IACR1E,KAAQqf,IAAY5Z,OAAU4Z,OAE9B3a,EACA2a,EACAqC,qBAAqB/Y,WAYzBjE,EACA,SAAU/F,EAAY+F,KACfA,EAAS/F,EAAO,0BAY3ByhB,iBACE1b,EACA2a,QAEKkB,YAAY7W,IAAIhF,EAAS2a,QACzBmB,aAAa9W,IAAIhF,EAAS2a,uBAWjCsC,gBAAOjd,OACC/F,GAAS2B,KAAKoG,IAAIhC,eACnBoC,IAAIpC,EAAS/F,GACXA,sBAYTijB,kBAASld,EAAiBmd,EAAepY,OACjC9K,EAAQmjB,SAASxhB,KAAKoG,IAAIhC,GAAU,IAAMmd,GAAQ,GACxD,IAAKje,OAAU6F,IAAQ9K,GAAU8K,cAC1B3C,IAAIpC,EAAS/F,GACXA,sBAaXojB,kBAASrd,EAAiBmd,EAAeG,OACjCrjB,EAAQmjB,SAASxhB,KAAKoG,IAAIhC,GAAU,IAAMmd,GAAQ,GACxD,IAAKje,OAAUoe,IAAQrjB,GAAUqjB,cAC1Blb,IAAIpC,EAAS/F,GACXA,sBAWXsjB,gBAAOvd,EAAiBzD,EAAWc,OAE7B8C,EAAOvE,KAAKoG,IAAIhC,MACpBG,EAAQ5E,MAAS4E,GAAawE,KAAYxE,GAAjB,cAGrB9C,IAAUM,MAAYN,IAAUrB,EAClCmE,EAAKvD,KAAKL,QAEP,GAAIc,IAAUlB,OAAuB,IAAVkB,EAC9B8C,EAAK1D,QAAQF,OAEV,CAAA,KAAIc,EAAQ,GAAKA,EAAQrB,GAI5B,SAHK0B,OAAOL,EAAO,EAAGd,GAQxB,YAFK6F,IAAIpC,EAASG,GAEXxC,yBAUTqI,gBAAOhG,EAAiBzD,GACtB,OAAOX,KAAK2hB,OAAOvd,EAASzD,EAAMoB,0BASpCuI,iBAAQlG,EAAiBzD,GACvB,OAAOX,KAAK2hB,OAAOvd,EAASzD,EAAMJ,2BASpCqhB,kBAASxd,EAAiB3C,OACpB8C,EAAOvE,KAAKoG,IAAIhC,GACpB,GAAIzE,MAAS4E,IACR9C,GAAS,GACTA,EAAQ8C,EAAKnE,OAKhB,SAHO2I,KAAYxE,IACdzC,OAAOL,EAAO,QACd+E,IAAIpC,EAASG,GACXxC,yBAUXF,gBAAOuC,EAAiBzD,OAClB4D,EAAOvE,KAAKoG,IAAIhC,GACpB,GAAIzE,MAAS4E,IAEPsd,SADG9Y,KAAYxE,GACI5D,GAErB,YADK6F,IAAIpC,EAASG,GACXxC,yBAWbkE,cAAQyC,EAASxC,UACR6C,KAAYL,EAAMxC,uBAM3B4K,mBACmB9Q,KACRigB,YAAY7W,MADJpJ,KAERkgB,aAAa9W,MAFLpJ,KAGRggB,SAASra,QAClBmc,MAJiB9hB,OCzkBrBK,IAAI5C,MAAMskB,IAGVC,UAAY,cAEZC,YAAc,SAAUC,GACtB5mB,IAAMgR,EAAQ7O,MAAiB0kB,cAAcD,GAC7C,GAAI5V,EACF,OAAOA,GAIX8V,iBAAmB,SAAU9V,EAAmBhO,EAAc8J,GAC5DkE,EAAK8V,iBAAiB9jB,EAAM8J,EAAU7H,QAGxC8hB,oBAAsB,SAAU/V,EAAmBhO,EAAc8J,GAC/DkE,EAAK+V,oBAAoB/jB,EAAM8J,EAAU7H,QAI3C+hB,SAAW,SAAUhW,EAAmBiW,GACtCjW,EAAKkW,UAAUlF,IAAIiF,IAGrBE,YAAc,SAAUnW,EAAmBiW,GACzCjW,EAAKkW,UAAU3gB,OAAO0gB,IAGxBG,YAAc,SAAU9Z,EAAY0D,GAClC,OAAO1D,GAGLnL,QAEGA,MAAIklB,KAAKH,YACZF,SAAW,SAAUhW,EAAmBiW,GACtCjnB,IAAMsnB,EAAUtW,EAAKiW,UAAU/d,MAAMqe,iBAChC7Z,IAAU4Z,EAASL,KACtBzJ,KAAW8J,EAASL,GACpBjW,EAAKiW,UAAY3M,KAAWgN,EAASC,mBAGzCJ,YAAc,SAAUnW,EAAmBiW,GACzCjnB,IAAMsnB,EAAUtW,EAAKiW,UAAU/d,MAAMqe,iBACjChB,OAAae,EAASL,KACxBjW,EAAKiW,UAAY3M,KAAWgN,EAASC,yBAuHvCA,gBAAkB,IAKxBC,QAAU,WAUVC,kBAAoB,mBAKpBC,gBAAkB,iBAElBC,OAAS,qBAETC,WAAa,CACXC,IAAKF,OAAS,YAKhBG,cAA8C,GAE9CC,OAAc,CAEZzT,uBAAc/B,EAAayV,GACzB,OAAOA,EACF7lB,MAAiB8lB,gBAAgBL,WAAWC,IAAKtV,GACjDpQ,MAAiBmS,cAAc/B,IAGtCsB,oBAAWC,GACT,OAAQ3R,MAAiB+lB,eAAepU,IAG1CE,uBAAcF,GACZ,OAAQ3R,MAAiB6R,cAAcF,IAGzC1C,cAAKJ,EAAmBtE,EAAc3J,GACpC,IAAIwB,MAAMxB,GAIR,OAAOgZ,IAAW/K,EAAMtE,GAHxB0Y,IAAWpU,EAAMtE,EAAM3J,EAAOkC,QAOlCoM,oBAAWL,EAAmBtE,EAAc4E,GAC1C8T,IACEpU,EACAtE,EACA4E,IAAS6W,aACLljB,MACA4C,aACJ5C,QAIJ8L,cAAKC,EAAmBtE,EAAc3J,GACpC,GAAIwB,MAAMxB,GACRiO,EAAKoX,aAAa1b,EAAM3J,OAErB,CAEH/C,IAAM+C,EAAQiO,EAAKqX,aAAa3b,GAChC,GAAI3J,GAASW,KACX,OAAOX,IAKbkO,oBAAWD,EAAmBtE,GAC5BsE,EAAKsX,gBAAgB5b,IAGvBqG,gBAAOF,EAAkB7B,EAAY8B,GACnCD,EAAWD,aAAa5B,EAAM8B,IAGhChE,gBAAO+D,EAAkB7B,GACvB6B,EAAW0V,YAAYvX,IAGzBzJ,iBAAQsL,EAAkB7B,EAAYwX,GACpC3V,EAAW4V,aAAazX,EAAMwX,IAGhCjiB,gBAAOsM,EAAkB7B,GACvB6B,EAAW6V,YAAY1X,IAGzBkC,gBAAOlC,GACG,mBACR,GAAI6B,EACF,OAAOA,GAIX0D,cAAKvF,GACK,oBACR,GAAI2X,EACF,OAAOA,GAIXC,KAAMjC,YAENpU,aAAIvB,GACF,GAAsB,IAAlBA,EAAK6X,SACP,OAAQ7X,EAAqB8X,QAAQ3lB,eAIzC2Q,cAAK9C,EAAY8C,EAAeW,GAC9B,IAAIlQ,MAAMuP,GAcR,OAAO9C,EAAK0V,WAJV1V,EAAK0V,WAAa5S,GAQxBY,cAAK1D,EAAe0D,EAAeD,GACjC,IAAIlQ,MAAMmQ,GAcR,OAAO1D,EAAK+X,UAJV/X,EAAK+X,UAAYrU,YAQvBsS,qBAEAG,YAEAnZ,YAAGgD,EAAmBhO,EAAc8J,EAAyC5I,GAE3ElE,IAAM6lB,EAAmB7U,EAAKwW,WAAaxW,EAAKwW,SAAW,IAAIlb,SAE/D0c,EAAkBnD,EAAQmD,kBAAoBnD,EAAQmD,gBAAkB,IAGxE,IAAKA,EAAgBhmB,GAAO,CAG1BhD,IAAMipB,EAAUnB,cAAc9kB,GAG9BkmB,EAAiB,SAAU5b,GAEzBuY,EAAQ3Y,KACNI,aAAiB9I,YACb8I,EACA,IAAI9I,YAAY8I,EAAMtK,KAAMokB,YAAY9Z,EAAO0D,MAKvDgY,EAAgBhmB,GAAQkmB,EAEpBD,EACFA,EAAQjb,GAAGgD,EAAMkY,GAGjBpC,iBAAiB9V,EAAMhO,EAAMkmB,GAIjCrD,EAAQ7X,GACNhL,EACA,CACEiB,GAAI6I,EACJa,IAAKzJ,KAKX4J,aAAIkD,EAAmBhO,EAAc8J,GAEnC9M,IAAM6lB,EAAmB7U,EAAKwW,2CAQ9B,GAHA3B,EAAQ/X,IAAI9K,EAAM8J,GAGdkc,IAAoBnD,EAAQzf,IAAIpD,GAAO,CAEzChD,IAAMipB,EAAUnB,cAAc9kB,GAE9BkmB,EAAiBF,EAAgBhmB,GAE7BimB,EACFA,EAAQnb,IAAIkD,EAAMkY,GAGlBnC,oBAAoB/V,EAAMhO,EAAMkmB,UAG3BF,EAAgBhmB,GAIrBmmB,QAAa3c,KACfwE,EAAKwW,SAAW9kB,0BAKpBolB,iCC3ZuB7jB,EAAcmlB,EAAepF,GAEpDjf,IAAIskB,EAEJ,OAAO,WAEL,IAAKA,EAAO,CAEVrpB,IAAMmE,EAAOmlB,QAAcC,WACvBvF,GACFpe,QAAQ3B,EAAIvB,UAAeyB,GAG7BklB,EAAQ1a,WACN,WACE0a,EAAQ3mB,UACHshB,GACHpe,QAAQ3B,EAAIvB,UAAeyB,IAG/BilB,KD2YRtB,cAAc0B,aAAmB,CAC/Bxb,YAAGgD,EAAmBlE,GACpB/H,IAAI0kB,EAASxkB,MACb8iB,OAAO/Z,GAAGgD,EAAMyW,kBAAmB3a,EAAS2a,mBAAqB,WAC/DgC,EAAShjB,OAEXshB,OAAO/Z,GAAGgD,EAAM0W,gBAAiB5a,EAAS4a,iBAAmB,SAAUpa,GACrEmc,EAASxkB,MACTqI,EAAMtK,KAAOwmB,YACb1c,EAASQ,KAEXwZ,iBAAiB9V,EAAMwY,YAAiB1c,EAAS0c,aAAmB,SAAUlc,GACvEmc,GACH3c,EAASQ,MAIfQ,aAAIkD,EAAmBlE,GACrBib,OAAOja,IAAIkD,EAAMyW,kBAAmB3a,EAAS2a,oBAC7CM,OAAOja,IAAIkD,EAAM0W,gBAAiB5a,EAAS4a,kBAC3CX,oBAAoB/V,EAAMwY,YAAiB1c,EAAS0c,cACpD1c,EAAS2a,mBACT3a,EAAS4a,iBACT5a,EAAS0c,aAAmB9mB,YEnbhC1C,IAAM0pB,eAAiBC,SAAe,CAACC,YAAiBC,YAExDlY,UAA4B,CAC1BG,cAAKd,EAAyBW,EAAsBpB,GAElD,yBAEAkO,EAAOlO,EAAMkO,KAAK/R,IAAS6D,EAAMkO,KAAK5W,cAEtC,GAAKkW,EAkBL,GAdIU,IAEEA,IAAShY,KACXiG,EAAOod,aAGP/L,EAAUgM,SACRhM,EACAU,EACAiL,eAAehd,KAKjB6D,EAAMwB,YAAa,CAErB/R,IAAMkU,EAAYlD,EAElBkD,EAAUlG,GAAGtB,EAAMqR,GACnBxN,EAAMnD,KAAKuE,EAAU5L,KAAO,WAC1BmO,EAAUpG,IAAIpB,EAAMqR,QAInB,CAEH/d,IAAMgqB,EAAKhZ,EAEXV,OAAItC,GAAGgc,EAAItd,EAAMqR,GACjBxN,EAAMnD,KAAKuE,EAAU5L,KAAO,WAC1BuK,OAAIxC,IAAIkc,EAAItd,EAAMqR,MAOxBlM,gBAAOb,EAAyBW,EAAsBpB,GACpD3K,QAAQ2K,EAAMnD,KAAKuE,EAAU5L,QCjDjC,SAASkkB,eAAeC,GACtB,OAAO3lB,MAAM2lB,EAAOnnB,OAChBmnB,EAAOnnB,MACPmnB,EAAOpW,KAab9T,IAAMmhB,qBAAqB,CAAEC,KAAM3a,MAEnC0jB,aAAwB,CACtBjf,aAAIkf,EAAyBthB,EAAiB5E,GAC5CkmB,EAAMrnB,MAAQJ,WAASuB,EAAQ4G,IAAIhC,KAErCsY,cAAKgJ,EAAyBthB,EAAiB5E,GAC7CA,EAAQgH,IAAIpC,EAASshB,EAAMrnB,QAE7B2J,KAAM0X,WAGRiG,cAAyB,CACvBnf,aAAIof,EAA2BxhB,EAAiB5E,GAC9ClE,IAAM+C,EAAQmB,EAAQ4G,IAAIhC,GAC1B2B,KACE6e,QAAcgB,EAAOvd,SACrBud,EAAOC,SACH,SAAUL,GACVA,EAAOM,SAAW9c,IAAU3K,EAAOknB,eAAeC,GAASjlB,QAE3D,SAAUilB,EAA2B/jB,GACrC,GAAI8jB,eAAeC,IAAWnnB,EAE5B,OADAunB,EAAOG,cAAgBtkB,EAChBlB,SAKjBmc,cAAKkJ,EAA2BxhB,EAAiB5E,GAC/ClE,IAAM+M,EAAUuc,QAAcgB,EAAOvd,SACrC,GAAIud,EAAOC,SAAU,CACnBvqB,IAAMghB,EAAS,GACfvW,KACEsC,EACA,SAAUmd,GACJA,EAAOM,UACThN,KACEwD,EACAiJ,eAAeC,MAMlBpI,MAAYd,IAAYc,MAAY5d,EAAQ4G,IAAIhC,KACnD5E,EAAQgH,IAAIpC,EAASkY,QAIvB9c,EAAQgH,IACNpC,EACAmhB,eACEld,EAAQud,EAAOG,kBAKvB/d,KAAM0X,WAGRsG,aAAwB,CACtBxf,aAAIyf,EAAyB7hB,EAAiB5E,GAC5CymB,EAAMC,QAAUD,EAAM5nB,QAAUJ,WAASuB,EAAQ4G,IAAIhC,KAEvDsY,cAAKuJ,EAAyB7hB,EAAiB5E,GACzCymB,EAAMC,SACR1mB,EAAQgH,IAAIpC,EAAS6hB,EAAM5nB,QAG/B2J,KAAM,WAGRme,gBAA2B,CACzB3f,aAAI4f,EAA4BhiB,EAAiB5E,GAC/ClE,IAAM+C,EAAQmB,EAAQ4G,IAAIhC,GAC1BgiB,EAASF,QAAUvmB,MAAStB,GACxB2K,IAAU3K,EAAO+nB,EAAS/nB,MAAOkC,OAChC6G,QAAW/I,GAASA,IAAUA,GAErCqe,cAAK0J,EAA4BhiB,EAAiB5E,GAChDlE,IAAM+C,EAAQmB,EAAQ4G,IAAIhC,GACtBzE,MAAStB,GACP+nB,EAASF,QACX1mB,EAAQ4K,OAAOhG,EAASgiB,EAAS/nB,OAGjCmB,EAAQoiB,SACNxd,EACAiiB,QAAchoB,EAAO+nB,EAAS/nB,MAAOkC,QAKzCf,EAAQgH,IAAIpC,EAASgiB,EAASF,UAGlCle,KAAM,WAGRse,iBAA4B,CAC1B9f,aAAIgJ,EAAgBpL,EAAiB5E,GACnCgQ,EAAUhJ,IACRgJ,EAAU+W,OACV/mB,EAAQ4G,IAAIhC,KAGhBsY,cAAKlN,EAAgBpL,EAAiB5E,GACpCA,EAAQgH,IACNpC,EACAoL,EAAUpJ,IAAIoJ,EAAU+W,UAG5Bve,KAAM0X,WAGR8G,gBAAkB,CAChBP,MAAOD,aACPI,SAAUD,gBACVP,OAAQD,eAGV1Y,YAA4B,CAC1BG,cAAKd,EAAyBW,EAAsBpB,GAElD,IAoBA2D,EAEAiX,EAEAC,EAEApoB,0CAtBAyb,EAAOlO,EAAMkO,KAAKP,kBAA2B3N,EAAMkO,KAAK5W,cAExDqD,EAAM,WACCmgB,GACHD,EAAQlgB,IAAIgJ,GAAaiX,EAAS5O,EAAmBrY,IAIzDkd,EAAO,WACLiK,EAAY5kB,KACZ2kB,EAAQhK,KAAKlN,GAAaiX,EAAS5O,EAAmBrY,GACtDmnB,EAAYpmB,OAGdomB,EAAYpmB,MAURwZ,GAAQA,IAAShY,OACnB2a,EAAO2I,SAAS3I,EAAM3C,IAGpBlO,EAAMwB,aAGRqZ,EAAUJ,kBADV9W,EAAYlD,GAIFuT,MAAMrQ,EAAU+W,OAAQ7J,KAMlCgK,EAAUF,iBADVC,EAAUna,GACwBsa,YAAkBJ,gBAAgB5a,OAAIiC,IAAI4Y,IAG5EnoB,EAAO8mB,aAGFsB,IACHA,EAAUjB,aACN1L,IAAShY,OACXzD,EAAOwmB,cAKNrY,GAAgB0K,MAAW1K,EAAaia,EAAQ1e,OACnDxB,IAIFoF,OAAItC,GAAGmd,EAASnoB,EAAMoe,IAMxBld,EAAQqgB,MAAMhI,EAAmBrR,EAAKiW,sBAEtC5Q,EAAMnD,KAAKuE,EAAU5L,KAAO,WACtBwK,EAAMwB,YACRmC,EAAUsQ,QAAQtQ,EAAU+W,OAAQ7J,GAGpC9Q,OAAIxC,IAAIqd,EAASnoB,EAAMoe,GAEzBld,EAAQsgB,QAAQjI,EAAmBrR,KAKvC2G,gBAAOb,EAAyBW,EAAsBpB,GACpD3K,QAAQ2K,EAAMnD,KAAKuE,EAAU5L,QCvO3B4L,YAA4B,CAEhCG,cAAKd,EAAyBW,EAAsBpB,GAI1C,gBAER,GAAIgM,EAAS,CAEXvc,IAAMsJ,EAAUua,QAAoBtH,GAEpCkH,EAAU,SAAU9S,EAAeE,EAAe/H,GAEhD9I,IAAM0M,EAAOpD,EACT+Z,WAAuBva,EAASyT,GAChC5K,EAAUjF,KAEV6D,EAAMwB,YACPf,EAAa9F,IAAIwB,EAAMiE,GAEjBpM,MAAMoN,EAAUL,MACvBhB,OAAIc,KAAKJ,EAAqBtE,EAAMiE,GAGpCL,OAAIS,KAAKC,EAAqBtE,EAAMiE,IAKxCJ,EAAMrM,QAAQqgB,MAAMhI,EAASkH,GAE7BlT,EAAMnD,KAAKuE,EAAU5L,KAAO,WAC1BwK,EAAMrM,QAAQsgB,QAAQjI,EAASkH,MAOrC5R,gBAAOb,EAAyBW,EAAsBpB,GACpD3K,QAAQ2K,EAAMnD,KAAKuE,EAAU5L,QC3CjC,iBAAyB2G,GAIvB,OAAOnI,MAAMG,KAAKoG,IAAIygB,iBAA0B7e,IC4BlD1M,IAAMwrB,iBAAmB,GAEzBC,kBAAoB,GAEpBC,iBAAmB,GAEnBC,eAAiB,GAEjBC,cAAgB,GAEhBC,kBAAoB,IAAMC,aAE1BC,gBAAkB,gBAEGC,IAmOnB,WAAYjf,GAEV/M,IAAMuN,EAAW7I,KAEZmF,OAAUkD,KACbA,EAAU6D,cAIZrD,EAAS0e,SAAWlf,EAEpBnH,QAAQmH,EAASmf,oBAA6B3e,EAAUR,gOAuBpDof,UACY5e,EAAU4e,GAGtBhO,IACF5Q,EAAS0d,OAAS9M,GAIpBne,IAAMmiB,EAASnQ,EACXzE,EAAS0E,eAAeD,GACxB,GAGAE,UACYiQ,EAAQjQ,GAIpBF,GAASnI,OAAUuD,IACrB4O,KAAY,4CAKdhc,IAAMwhB,EAAWjU,EAAS6e,UAAY,IAAI3H,SAAStC,EAAQ5U,GAEvDwX,UAEAA,EACA,SAAUhY,EAAqDjE,KACpD2c,YAAY3c,EAASiE,SAM9BxC,EAASnG,KAAQgJ,GAAQxH,QAAQwH,EAAMG,EAAUR,GAAWK,EAC9DvD,OAAUU,WAEVA,EACA,SAAUxH,EAAOgD,GACX8V,MAAWsG,EAAQpc,YACLA,qEAGhBoc,EAAOpc,GAAOhD,MAQbspB,SAAW,IAAI/f,QAAQ7F,UAE5B6lB,EAEJvY,EAAY9O,SAKNwD,OAAUqS,GAERiR,gBAAgBtgB,KAAKqP,OACTiN,OAAOa,KAAK9N,QAEbiN,OAAOrT,KAAK4X,GACvBA,EAAc5pB,WAUlBoY,EAAWpY,UAITsnB,EACF,GAAIvhB,OAAUuhB,GAAK,CACjBhqB,IAAM4mB,EAAWoD,EACb+B,gBAAgBtgB,KAAKmb,OACTmB,OAAOa,KAAKhC,WAcdoD,EAKdsC,IAAgB/kB,IAGlBwM,EAAYtN,KACZshB,OAAOjZ,OACLwd,EACAA,EAAcvE,OAAO/T,cAAcnM,gBAInCqL,IACF3F,EAASgf,QAAUrZ,sBAGF3F,EAAU0Q,eAAoBpD,sBAC9BtN,EAAU8G,cAAmBmY,sBAC7Bjf,EAAUkf,cAAmBjb,sBAC7BjE,EAAUmf,YAAiB9R,sBAC3BrN,EAAUof,WAAgBhS,GAI3CiS,UAEAA,EACA,SAAUjQ,EAAkBjQ,GAM1Ba,EAASb,GAAQiQ,YAKf5P,EAAS8f,mBAA4Btf,GAOvCuN,MAOOgS,UAAYd,EAAIe,QAAQjS,GAGjC0G,EAASiE,YACPoG,kBACA,CAEEzK,KAAMnc,UACD,WACH,OAAOsI,EAASmN,eAMXsS,EACPvf,KAAYuf,GACZ,IAGKnB,mBAAqB,SAAUtb,KAC7BF,OAAOE,EAAOhD,EAAS+H,SAI7BgX,IACHvY,EAAYtN,OACEshB,OAAO/T,cAAcnM,eAGrC0F,EAAS8C,OACP9C,EAASzC,IAAI+gB,mBACboB,OACElF,OACAuE,EACAvY,EACAxG,EACA1F,gBAcJqlB,GACF3f,EAASS,GAAGkf,GAIVF,GACFxL,EAASkD,SAAS1V,QAChB,WACMzB,EAAS6e,WACX7e,EAASgX,MAAMyI,MAokB3B,SAASG,mBAAmB5f,EAAexH,EAAahD,GAClDqB,KAAQrB,GACVwK,EAASxH,GAAKH,QAAQ7C,EAAOwK,IAEtB1D,OAAU9G,IACjBwK,EAASxH,GAAKhD,GAIlB,SAASqqB,kBAAkBhgB,EAAkCV,EAAc9H,GACzE,GAAIwI,GAAQyO,MAAWzO,EAAMV,GAAO,CAClC1M,IAAMkU,EAAY9G,EAAKV,GAEvB,GAAItI,KAAQ8P,GAAY,CAChB,eACDmZ,EAoBH7P,KAAW6P,EAAQzoB,IAnBnByoB,EAASnZ,EAAUmZ,OAAS,CAACzoB,GAC7BsP,EACE,SAAUoZ,GAERpZ,EAAUmZ,OAAS3qB,UAEnB0K,EAAKV,GAAQ4gB,EAEb7iB,KACE4iB,EACA,SAAUzoB,GACRA,EAAS0oB,aAanB1oB,EAASsP,GAEX,OAAOzN,MAIX,SAAS8mB,YAAYngB,EAAkCV,EAAc2O,GACnE,OAAIjO,GAAQA,EAAKV,GACRU,EAAKV,GAEL2O,EACAA,EAAO3O,QADX,EAKP,SAAS8gB,YAAYpgB,EAA2BV,EAAoC3J,EAAa0qB,GAC3FhlB,OAAUiE,GACZU,EAAKV,GAAkB+gB,EAAcA,EAAY1qB,GAASA,EAG1D+N,OACEpE,EACA,SAAU3J,EAAOgD,GACfqH,EAAKrH,GAAO0nB,EAAcA,EAAY1qB,GAASA,IAMvD,SAAS2qB,cAAcC,EAAoCC,GACzD,OAAOD,GAAUC,EACbC,OAAc,GAAID,EAASD,GAC3BA,GAAUC,EApjCP5B,IAAO8B,aAAIC,GAChBA,EAAOC,QAAQhC,MAMVA,IAAO3f,kBAAS0C,YACZX,SAASU,OAAOC,IAMpBid,IAAOe,iBAAQjS,EAAkBtB,UAiB7B,IAAIyU,mBAAmBnT,EAAvB,IAIJkR,IAAOra,mBACZjF,EACAiF,MAGMlJ,OAAUiE,KAAUiF,EACtB,OAAO4b,YAAY/B,iBAAkB9e,eAE3B8e,iBAAkB9e,EAAMiF,IAIjCqa,IAAOvW,oBACZ/I,EACA+I,MAGMhN,OAAUiE,KAAU+I,EACtB,OAAO8X,YAAY9B,kBAAmB/e,eAE5B+e,kBAAmB/e,EAAM+I,IAIlCuW,IAAO9X,mBACZxH,EACAwH,GAGE,GAAIzL,OAAUiE,GAAO,KAEdwH,EACH,OAAOqZ,YAAY7B,iBAAkBhf,GAElC,GAAItI,KAAQ8P,GAEf,8BADkBwX,iBAAkBhf,EAAgBwH,eAI5CwX,iBAAkBhf,EAAMwH,IAIjC8X,IAAO/M,iBACZvS,EACAuS,MAGMxW,OAAUiE,KAAUuS,EACtB,OAAOsO,YAAY5B,eAAgBjf,GAErC8gB,YAAY7B,eAAgBjf,EAAMuS,EAAS+M,IAAIe,UAI5Cf,IAAO3e,gBACZX,EACAW,MAGM5E,OAAUiE,KAAUW,EACtB,OAAOkgB,YAAY3B,cAAelf,eAExBkf,cAAelf,EAAMW,IAO9B2e,IAAO/Z,wBAAeD,EAA4Bkc,OACnDloB,EAASyH,KAAYuE,iBAEvBkc,EACA,SAAUC,EAAgBpoB,GAGxBhB,IAsBQqpB,EAtBJprB,EAAOmrB,EAAKnrB,KAGhBD,EAAQorB,EAAKprB,MAGbsrB,EAAWF,EAAKE,SAGhBC,EAAStc,EAAMjM,IAGX3B,KAAQiqB,KACVA,EAAYA,EAAsBrc,IAIhCzN,MAAM+pB,IAIJtrB,GAGGurB,QAAavrB,GAGR8e,MAAY9e,SAElBA,EACA,SAAUwrB,MACJC,GAAMH,EAAQE,GAEhB,OADAJ,EAAU3nB,KACHxB,UARHwpB,GAAMH,EAAQtrB,GAatBorB,IAAY3nB,wBACWV,+CAIFA,iCAKpBsoB,oBACkBtoB,0DAGlBxB,MAAMxB,OACNgD,GAAO/C,IAASK,aACnBN,EACCqB,KAAQrB,GAASA,EAAMiP,GAASjP,KAIpCiD,iBAwQTyf,qBACE3c,EACAic,UAEOrgB,KAAK0nB,UAAU3G,YAAY3c,EAASic,kBAM7CY,wBACE7c,QAEKsjB,UAAUzG,eAAe7c,kBAMhCgC,aACEhC,EACAsC,EACAmQ,GAEA,OAAO7W,KAAK0nB,UAAUthB,IAAIhC,EAASsC,EAAcmQ,kBAMnDrQ,aACEpC,EACA/F,SAIsB2B,eAClB0nB,KACQlhB,IAAIpC,EAAS/F,kBAO3BiL,YACEhL,EACA8J,UAEApI,KAAK2nB,SAASre,GAAGhL,EAAM8J,EAAU,CAAEa,IAAKjJ,OACjCA,oBAMTkhB,cACE5iB,EACA8J,eAEKuf,SAASre,GAAGhL,EAAM8J,EAAU,CAAEa,IAAKjJ,KAAMmJ,IAAK,IAC5CnJ,oBAMToJ,aACE9K,EACA8J,eAEKuf,SAASve,IAAI9K,EAAM8J,GACjBpI,oBAMTwI,cACEC,EACAC,EACAshB,OAWAC,EAEAnhB,EAJAF,EAAQH,aAAkBsP,YAAQtP,EAAS,IAAIsP,YAAMtP,UAOhDG,EAAM7K,SACT6K,EAAM7K,OAVOiC,MAcXmF,OAAUuD,KACAA,EAELA,IAAS3G,OAChBioB,EAAWjoB,OAGb+G,EArBe9I,KAqBO2nB,SAASnf,KAAKI,EAAOqhB,MAErCD,EAvBShqB,KAwBEkqB,gBAxBFlqB,KA0BEkqB,UACT,SAAU3b,GACR,OAAOzF,EAAayF,EAAM/F,KAAKI,EAAOF,EAAM3G,QA5BvC/B,KAiCK6nB,UAChB/e,EAlCW9I,KAkCW6nB,QAAQrf,KAAKI,EAAOF,KAIvCI,iBAOT+W,eACEzb,EACA2a,EACA1W,UAEArI,KAAK0nB,UAAU7H,MAAMzb,EAAS2a,EAAS1W,GAChCrI,oBAMTmqB,mBACE/lB,EACA2a,EACA1W,OAEM+hB,EAAiBhJ,qBAAqB/Y,UAC5C+hB,EAAelJ,KAAOnf,KACtB/B,KAAK0nB,UAAU7H,MAAMzb,EAAS2a,EAASqL,GAChCpqB,oBAMT8f,iBACE1b,EACA2a,eAEK2I,UAAU5H,QAAQ1b,EAAS2a,GACzB/e,oBAGTiN,mBACEjF,EACAiF,GAGE3R,MAAiB0E,oBACb+D,OAAUiE,KAAUiF,SACf4b,YAAYwB,EAAariB,EAAgBsf,IAAIra,WAEtD6b,YACEuB,IALerqB,KAKUqqB,YAAc,IACvCriB,EACAiF,kBAKN8D,oBACE/I,EACA+I,GAGEzV,MAAiB0E,qBACb+D,OAAUiE,KAAU+I,SACf8X,YAAYyB,EAActiB,EAAgBsf,IAAIvW,YAEvD+X,YACEwB,IALetqB,KAKWsqB,aAAe,IACzCtiB,EACA+I,kBAKNvB,mBACExH,EACAwH,GAGElU,MAAiB0E,iBACjB,GAAI+D,OAAUiE,GAAO,KAEdwH,SACIqZ,YAAY0B,EAAaviB,EAAgBsf,IAAI9X,WAEjD,GAAI9P,KAAQ8P,GAIf,YAHKkZ,kBAAkB6B,EAAaviB,EAAgBwH,sBAChCwX,iBAAkBhf,EAAgBwH,IAK1DsZ,YACEyB,IAdevqB,KAcUuqB,YAAc,IACvCviB,EACAwH,kBAKN+K,iBACEvS,EACAuS,GAGEjf,MAAiB0E,kBACb+D,OAAUiE,KAAUuS,SACfsO,YAAY2B,EAAWxiB,EAAgBsf,IAAI/M,qBAGlDiQ,IALexqB,KAKQwqB,UAAY,IACnCxiB,EACAuS,EACA+M,IAAIe,wBAKV1f,gBACEX,EACAW,GAGErN,MAAiB0E,iBACb+D,OAAUiE,KAAUW,SACfkgB,YAAY4B,EAAUziB,EAAgBsf,IAAI3e,QAEnDmgB,YACE2B,IALezqB,KAKOyqB,SAAW,IACjCziB,EACAW,kBASN+hB,uBAGIpvB,MAAiB0E,cAAAA,kBAIb4Q,EAAQ,CAEVtV,IAAM+kB,EAAqBqH,EAAUrH,SAAS8G,mBAE9Chb,EAAWkU,EAASja,MAGpBshB,EAAU1H,SAASzV,MAGf4B,IAAakU,EAASja,OAdXpG,KAeJ2L,OACP0U,EAASja,IAAIrE,MACb6O,mBAUVoF,yBAGW2U,OADU3qB,KAGfgpB,cAHehpB,KAGQyqB,SAAUvD,eACjC8B,cAJehpB,KAIQwqB,UAAWvD,gBAClC+B,cALehpB,KAKQqqB,YAAavD,kBACpCkC,cANehpB,KAMQsqB,aAAcvD,mBANtB/mB,KAONooB,0BAWfzc,gBAAOE,EAAcC,GAEjBzL,IAIAuqB,EAJI/hB,EAAW7I,6BASf6I,EAAS8E,MAAQ,GAEbiD,WACM2W,EAAUsD,oBAA6BhiB,SAChCwa,OAAQxX,EAAOC,KACvByb,EAASuD,6BAGRvD,EAAUwD,mBAA4BliB,SAC/Bwa,OAAQxX,EAAOC,GAC9BjD,EAAS6F,IAAM7C,EAAMS,OACdib,EAASyD,mBAGlBniB,EAAS+H,OAAS/E,EAId+e,GACF/hB,EAASlB,SACP,WACMkB,EAAS+H,QACX1P,QAAQ0pB,EAAM/hB,oBAa1B0E,wBAAeD,SACStN,KAAKunB,mBAC3B,OAAOiC,EACHlC,IAAI/Z,eAAeD,EAAOkc,GAC1Blc,iBAUNmB,gBAAOpG,EAAqBwD,EAAeS,SAE7BvD,KAAYV,IACdmG,OAASxO,KAEb6L,EAAO,CAGLS,IACFjE,EAAQid,GAAKhZ,EACbjE,EAAQxF,QAAUd,wCAWpB,GANIyL,IACFnF,EAAQmF,MAAQA,GAKd3N,MAAM4Z,GAAQ,CACXnM,MACK,QAEJtF,EAAOK,EAAQoR,OAASiG,UACzBvI,MAAW7J,EAAOtF,KACrBsF,EAAMtF,GAAQyR,GAEhBpR,EAAQoR,MAAQzR,EAGlBK,EAAQiF,MAAQA,MAIZiB,EAAQ,IAAI+Y,IAAIjf,UACtByQ,KACE9Y,KAAKkqB,YAAclqB,KAAKkqB,UAAY,IACpC3b,GAGKA,iBAOXuC,mBAEExV,MAAiB0E,gBAAAA,gBAAAA,uBAITunB,EAAU0D,qBAJDjrB,YAAAA,cAAAA,aAUX6nB,GAAWA,EAAQqC,kBACRrC,EAAQqC,UAXRlqB,MAcX4Q,WAdW5Q,KAgBG4Q,eACCyS,OAAQzS,GAASiX,IAKtCF,EAASve,MACTse,EAAU5W,UAEVgR,MAzBiB9hB,cA2BTunB,EAAU2D,oBA3BDlrB,qBAkCnB2H,kBAAS0C,EAAgBC,SACFtK,KAAK0nB,mBACtBpd,EACF0V,EAAS1V,QAAQD,GAGjB2V,EAAS5V,OAAOC,kBASpBgX,gBAAOjd,UACEpE,KAAK0nB,UAAUrG,OAAOjd,kBAY/Bkd,kBAASld,EAAiBmd,EAAepY,GACvC,OAAOnJ,KAAK0nB,UAAUpG,SAASld,EAASmd,EAAMpY,kBAYhDsY,kBAASrd,EAAiBmd,EAAeG,GACvC,OAAO1hB,KAAK0nB,UAAUjG,SAASrd,EAASmd,EAAMG,kBAUhDC,gBAAOvd,EAAiBzD,EAAWc,GACjC,OAAOzB,KAAK0nB,UAAU/F,OAAOvd,EAASzD,EAAMc,kBAS9C2I,gBAAOhG,EAAiBzD,UACfX,KAAK0nB,UAAUtd,OAAOhG,EAASzD,kBASxC2J,iBAAQlG,EAAiBzD,UAChBX,KAAK0nB,UAAUpd,QAAQlG,EAASzD,kBASzCihB,kBAASxd,EAAiB3C,UACjBzB,KAAK0nB,UAAU9F,SAASxd,EAAS3C,kBAS1CI,gBAAOuC,EAAiBzD,UACfX,KAAK0nB,UAAU7lB,OAAOuC,EAASzD,kBASxCsF,cAAQyC,EAASxC,UACRlG,KAAK0nB,UAAUzhB,KAAKyC,EAAMxC,IAz/BrBohB,YAAU,cAKVA,OAAKlpB,KACLkpB,UAAQ1oB,QACR0oB,WAASvoB,SACTuoB,WAASroB,SACTqoB,WAAS6D,OACT7D,UAAQvP,YACRuP,YAAU1f,QA+jCxB0f,IAAS,IAAIjE,OAEbiE,IAAIra,UAAU,OAAErE,gBAAO6Q,oBAAO5B,cAE9ByP,IAAI3e,OAAO,SAAEyiB"}