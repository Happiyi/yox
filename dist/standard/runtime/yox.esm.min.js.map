{"version":3,"file":"yox.esm.min.js","sources":["../../../../yox-config/src/config.ts","../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/function/isUndef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/holder.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-common/src/function/guid.ts","../../../../yox-snabbdom/src/field.ts","../../../../yox-snabbdom/src/nativeAttr.ts","../../../../yox-snabbdom/src/nativeProp.ts","../../../../yox-snabbdom/src/directive.ts","../../../../yox-snabbdom/src/component.ts","../../../../yox-snabbdom/src/snabbdom.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-template-compiler/src/renderer.ts","../../../../yox-dom/src/dom.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../../yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  Namespace,\n} from '../../../yox-type/src/type'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  CustomEventInterface,\n} from '../../../yox-type/src/emitter'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间信息\n  ns?: Namespace\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += env.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(env.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + env.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import { ValueHolder } from '../../../yox-type/src/type'\nimport * as env from './env'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: env.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder\n} from '../../../yox-type/src/type'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\nimport isDef from '../function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\ndefaultLogLevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = env.WINDOW && /edge|msie|trident/i.test(env.WINDOW.navigator.userAgent)\n  ? env.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : env.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (env.GLOBAL) {\n    const logLevel = env.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  Namespace,\n  NativeListener,\n} from '../../../yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\nimport {\n  EmitterInterface,\n} from '../../../yox-type/src/emitter'\n\nimport execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace.key, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = instance.parse(type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = instance.parse(type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = instance.parse(type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    const result = {\n      key: type,\n      name: type,\n      ns: env.EMPTY_STRING,\n    }\n\n    if (this.ns) {\n      const index = string.indexOf(type, env.RAW_DOT)\n      if (index >= 0) {\n        result.name = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from '../../../yox-type/src/type'\n\nimport {\n  NextTaskInterface,\n} from '../../../yox-type/src/yox'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","let guid = 0\n\nexport default function (): number {\n  return ++guid\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n  Attribute,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import {\n  VNode,\n  Property\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}","import {\n  VNode,\n  Directive,\n} from '../../yox-type/src/vnode'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { once, bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (once\n          || directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL\n} from '../../yox-config/src/config'\n\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (props) {\n        node.checkProps(props)\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from '../../yox-type/src/type'\n\nimport {\n  DomApi,\n} from '../../yox-type/src/api'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport guid from '../../yox-common/src/function/guid'\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = guid()\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = env.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(env.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = env.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Can't destroy vnode without parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","import {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\nimport toString from '../../yox-common/src/function/toString'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\nimport * as keypathUtil from '../../yox-common/src/util/keypath'\n\nimport globalHolder from '../../yox-common/src/util/holder'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: env.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  $vnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index], keypath = keypathUtil.join(scope.$keypath, key), value: any = stack, holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (isDef(scope[key])) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (isDef(scope.$item)) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != env.NULL && isDef(scope[key])) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = context.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`\"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = env.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = env.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = env.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        const textVnode: any = {\n          isText: env.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    if ($vnode.isComponent) {\n      setPair($vnode, 'props', name, value)\n    }\n    else {\n      setPair($vnode, 'nativeAttrs', name, { name, value })\n    }\n  },\n\n  renderPropertyVnode = function (name: string, hint: PropertyHint, value: any | void) {\n    setPair($vnode, 'nativeProps', name, { name, value, hint })\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair($vnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    $vnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!$vnode.transition) {\n        logger.fatal(`Transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: env.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`Directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      $vnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : env.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : env.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    // 如果为 null 或 undefined，则不需要 warn\n    if (value != env.NULL) {\n      // 数组也算一种对象，要排除掉\n      if (is.object(value) && !is.array(value)) {\n\n        object.each(\n          value,\n          function (value, key) {\n            setPair($vnode, 'props', key, value)\n          }\n        )\n\n        if (keypath) {\n          const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n          setPair(\n            $vnode,\n            KEY_DIRECTIVES,\n            key,\n            {\n              ns: DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              modifier: keypathUtil.join(keypath, env.RAW_WILDCARD),\n              hooks: directives[DIRECTIVE_BINDING],\n            }\n          )\n        }\n\n      }\n    }\n\n  },\n\n  renderElementVnode = function (\n    vnode: Data,\n    tag: string | void,\n    attrs: Function | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (tag) {\n      const componentName = context.get(tag)\n      if (process.env.NODE_ENV === 'development') {\n        if (!componentName) {\n          logger.warn(`Dynamic component \"${tag}\" can't be found.`)\n        }\n      }\n      vnode.tag = componentName\n    }\n\n    if (attrs) {\n      $vnode = vnode\n      attrs()\n      $vnode = env.UNDEFINED\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          const vnodes = array.pop(vnodeStack) as VNode[]\n          renderSlots[name] = vnodes.length ? vnodes : env.UNDEFINED\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $scope.$keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    const myStack = stack || $stack,\n    result = findValue(\n      myStack,\n      myStack.length - ((offset || 0) + 1),\n      name,\n      lookup,\n      depIgnore\n    )\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, env.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (isDef(runtimeKeypath)) {\n      staticKeypath = array.join(runtimeKeypath as string[], env.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = env.UNDEFINED\n    globalHolder.value = match ? match.value : env.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = env.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || env.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    vnodes = context.get(name)\n\n    if (vnodeList) {\n      if (vnodes) {\n        array.each(\n          vnodes,\n          function (vnode: VNode) {\n            array.push(vnodeList, vnode)\n            vnode.slot = name\n            vnode.parent = context\n          }\n        )\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          toString\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`Partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (isDef(length)) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, env.EMPTY_STRING + i)\n            : env.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : env.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    equal: boolean | void,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      if (equal) {\n        for (let i = from; i <= to; i++) {\n          eachHandler(\n            generate,\n            i,\n            count++,\n            env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n      else {\n        for (let i = from; i < to; i++) {\n          eachHandler(\n            generate,\n            i,\n            count++,\n            env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n    else {\n      if (equal) {\n        for (let i = from; i >= to; i--) {\n          eachHandler(\n            generate,\n            i,\n            count++,\n            env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n      else {\n        for (let i = from; i > to; i--) {\n          eachHandler(\n            generate,\n            i,\n            count++,\n            env.EMPTY_STRING,\n            index\n          )\n        }\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    toString\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from '../../yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  HINT_BOOLEAN\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\n\n\n// 这里先写 IE9 支持的接口\nlet innerText = 'textContent',\n\ninnerHTML = 'innerHTML',\n\nfindElement = function (selector: string): Element | void {\n  const node = (env.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, env.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, env.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n},\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (env.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!env.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!env.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange'\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === env.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = env.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              env.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = env.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === env.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === env.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, env.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n        const isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = env.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = env.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE 678\n        innerText = 'innerText'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"#id\" is the only supported selector for legacy version.`)\n          }\n          const node = (env.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[env.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = env.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = env.FALSE\n      listener(event)\n    })\n    addEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, env.EVENT_INPUT, listener[env.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[env.EVENT_INPUT] = env.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (env.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (env.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (env.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (env.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (isDef(value)) {\n    object.set(node, name, value, env.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string, hint?: number): void {\n  object.set(\n    node,\n    name,\n    hint === HINT_BOOLEAN\n      ? env.FALSE\n      : env.EMPTY_STRING,\n    env.FALSE\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (isDef(value)) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != env.NULL) {\n      return value as string\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(text)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[innerText] = text as string\n      }\n    }\n    else {\n      node[innerText] = text as string\n    }\n  }\n  else {\n    return node[innerText]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (isDef(html)) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitter: Emitter = node[EMITTER],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (object.falsy(listeners)) {\n    node[EMITTER] = env.UNDEFINED\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.error(`Special event \"${type}\" is existed.`)\n    }\n    logger.info(`Special event \"${type}\" add success.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from '../../yox-common/src/function/execute'\n\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  Namespace,\n} from '../../../yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from '../../../yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: Namespace, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from '../../../yox-type/src/options'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from '../../yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from '../../yox-type/src/options'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = env.UNDEFINED\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from '../../../yox-config/src/config'\n\nimport execute from '../../../yox-common/src/function/execute'\nimport debounce from '../../../yox-common/src/function/debounce'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[env.EMPTY_STRING]\n\n    if (value === env.TRUE) {\n      name = env.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === env.EVENT_CLICK || name === env.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += env.RAW_DOT + modifier\n      }\n      component.on(name, handler)\n      vnode.data[key] = function () {\n        component.off(name, handler as Listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Watcher,\n  LazyValue,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from '../../../yox-config/src/config'\n\nimport debounce from '../../../yox-common/src/function/debounce'\nimport execute from '../../../yox-common/src/function/execute'\nimport toString from '../../../yox-common/src/function/toString'\n\nimport * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== env.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: env.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, env.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, env.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: env.RAW_VALUE\n}\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[env.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = env.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== env.TRUE) {\n        eventName = env.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = env.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from '../../../yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from '../../../yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from '../../../yox-type/src/yox'\n\nimport isDef from '../../../yox-common/src/function/isDef'\nimport execute from '../../../yox-common/src/function/execute'\n\nimport * as env from '../../../yox-common/src/util/env'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport * as domApi from '../../../yox-dom/src/dom'\n\nexport const once = env.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (isDef(directive.hint)) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = env.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Listener,\n  TypedListener,\n  Watcher,\n  TypedWatcher,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from '../../yox-type/src/type'\n\nimport {\n  VNode,\n} from '../../yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from '../../yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  WatcherOptions,\n  TypedWatcherOptions,\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from '../../yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from '../../yox-config/src/config'\n\nimport isDef from '../../yox-common/src/function/isDef'\nimport isUndef from '../../yox-common/src/function/isUndef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateGenerator from '../../yox-template-compiler/src/generator'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as domApi from '../../yox-dom/src/dom'\n\nimport Observer from '../../yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\ntype YoxClass = typeof Yox\ntype EmitterClass = typeof Emitter\ntype CustomEventClass = typeof CustomEvent\n\ntype YoxPlugin = {\n  version: string\n  install(Yox: YoxClass): void\n}\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox<Computed, Watchers, Events, Methods> implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event: CustomEventClass = CustomEvent\n  public static Emitter: EmitterClass = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数，不会再走进 Yox.compile\n      if (!compileCache[template]) {\n        const nodes = templateCompiler.compile(template)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`\"template\" should have just one root element.`)\n          }\n        }\n        compileCache[template] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(\n    options?: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n\n    const instance = this, $options: ComponentOptions = options || env.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (isUndef(value)) {\n              value = rule.value\n              if (isDef(value)) {\n                source[key] = rule.type === env.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`child component's data should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('\"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('\"template\" option is required.')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, TypedListener<this>>,\n    listener?: TypedListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, TypedListener<this>>,\n    listener?: TypedListener<this>\n  ): this {\n    addEvents(this, type, listener, env.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: TypedListener<this>\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    namespace = event.ns || (event.ns = $emitter.parse(event.type)),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (namespace.ns === MODIFER_NATIVE) {\n        logger.error(`\"${event.type}\": namespace \"${MODIFER_NATIVE}\" can't be used externally.`)\n      }\n    }\n\n    isComplete = $emitter.fire(namespace, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, TypedWatcher<this> | TypedWatcherOptions<this>>,\n    watcher?: TypedWatcher<this> | TypedWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`Component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: Data): void {\n    if (process.env.NODE_ENV === 'development') {\n      const instance = this\n      object.each(\n        props,\n        function (value, key) {\n          instance.checkProp(key, value)\n        }\n      )\n    }\n  }\n\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (isDef(value)) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = env.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = env.TRUE\n                return env.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction afterCreateHook(instance: YoxInterface, watchers: Record<string, Watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  if (process.env.NODE_ENV !== 'pure') {\n    execute(instance.$options[HOOK_AFTER_CREATE], instance)\n    instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Listener>,\n  listener?: Listener,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Listener, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return env.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return isDef((this as YoxInterface).get(SLOT_DATA_PREFIX + name))\n    }\n  })\n}\n"],"names":["HINT_BOOLEAN","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","MODEL_PROP_DEFAULT","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_DOT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","func","value","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","CustomEvent","[object Object]","type","originalEvent","this","phase","PHASE_CURRENT","instance","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","env.MINUS_ONE","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","str","start","end","is.number","env.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","upper","toUpperCase","lower","toLowerCase","is.string","replace","$0","$1","trim","offset","charAt","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","env.RAW_DOT","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","holder","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","env.EMPTY_FUNCTION","stylePrefix","env.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","env.GLOBAL","logLevel","getStyle","backgroundColor","Error","Emitter","ns","listeners","filter","namespace","parse","name","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","matchListener","createMatchListener","object.each","string.indexOf","string.slice","matchTrue","nextTick","setImmediate","isNative","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","shared","NextTask","tasks","run","array.unshift","task","guid","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","hint","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","once","bind","unbind","hooks","ref","props","slots","isComponent","model","$model","checkProps","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","component.update","directive.update","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions","loadComponent","object.has","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","setPair","KEY_DIRECTIVES","innerText","innerHTML","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","createEvent","env.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.join","array.remove","EMITTER","namespaces","svg","domain","specialEvents","object.set","object.get","setAttribute","getAttribute","appendChild","env.EVENT_MODEL","locked","on","find","selector","querySelector","addClass","removeClass","emitter","nativeListeners","special","nativeListener","customEvent","fire","object.falsy","createElementNS","createTextNode","removeAttribute","beforeNode","oldNode","replaceChild","removeChild","nextSibling","nodeType","string.lower","tagName","Computed","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","array.falsy","dep","watch","force","env.RAW_VALUE","lastComputed","current","unwatch","sorted","keypathUtil.match","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","keypathUtil.join","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","env.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","Observer","syncEmitter","asyncEmitter","asyncChanges","depIgnore","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","string.codeAt","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","object.sort","formatWatcherOptions","step","toNumber","min","insert","object.clear","delay","timer","array.toArray","arguments","element","modifier","handler","lazy","env.EVENT_CHANGE","debounce","env.EVENT_CLICK","env.EVENT_TAP","domApi.on","$el","domApi.off","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","array.indexOf","selectControl","multiple","option","selected","selectedIndex","values","dataBinding","lazyValue","viewBinding","viewSyncing","control","eventName","binding","checkProp","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","Yox","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","object.extend","rule","isUndef","addComputed","method","placeholder","el","root","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","env.RAW_TRANSITION","env.RAW_DIRECTIVE","env.RAW_PARTIAL","env.RAW_FILTER","newWatchers","render","afterCreateHook","$template","compile","snabbdom.create","domApi","plugin","install","stringify","getResource","setResource","partial","addEvents","downward","$children","PHASE_DOWNWARD","PHASE_UPWARD","$components","$directives","$transitions","$partials","$filters","$scope","$keypath","$stack","vnodeStack","localPartials","findValue","stack","lookup","defaultKeypath","scope","globalHolder","$item","createMethodListener","array.last","$event","$data","createGetter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","renderElementVnode","attrs","childs","componentName","array.pop","renderSlots","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","identifier","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","renderPartial","renderImport","renderEach","renderRange","eachHandler","generate","lastScope","lastStack","concat","$length","from","to","equal","templateRender.render","afterHook","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","addEvent","registry","componentCallback","queue","promise","then","formatValue","is","logger"],"mappings":"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"}