{"version":3,"file":"yox.cjs.min.js","sources":["../../../../yox-common/src/util/env.ts","../../../../yox-common/src/function/isDef.ts","../../../../yox-common/src/util/is.ts","../../../../yox-common/src/function/execute.ts","../../../../yox-common/src/util/CustomEvent.ts","../../../../yox-common/src/util/array.ts","../../../../yox-common/src/util/string.ts","../../../../yox-common/src/util/keypath.ts","../../../../yox-common/src/util/object.ts","../../../../yox-common/src/function/toString.ts","../../../../yox-common/src/util/logger.ts","../../../../yox-common/src/function/nextTick.ts","../../../../yox-common/src/util/Emitter.ts","../../../../yox-common/src/function/isNative.ts","../../../../yox-common/src/util/NextTask.ts","../../../../yox-config/src/config.ts","../../../../yox-common/src/function/toNumber.ts","../../../../yox-common/src/function/toJSON.ts","../../../../yox-common/src/util/stringify.ts","../../../../yox-observer/src/Computed.ts","../../../../yox-observer/src/function/matchBest.ts","../../../../yox-observer/src/function/readValue.ts","../../../../yox-observer/src/function/diffString.ts","../../../../yox-observer/src/function/diffArray.ts","../../../../yox-observer/src/function/diffObject.ts","../../../../yox-observer/src/function/diffRecursion.ts","../../../../yox-observer/src/function/diffWatcher.ts","../../../../yox-observer/src/function/filterWatcher.ts","../../../../yox-observer/src/function/formatWatcherOptions.ts","../../../../yox-observer/src/Observer.ts","../../../src/Yox.ts"],"sourcesContent":["import ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nexport const VALUE_HOLDER: ValueHolder = {\n  value: UNDEFINED\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from '../../../yox-type/src/event/CustomEvent'\nimport Yox from '../../../yox-type/src/interface/Yox'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = env.RAW_MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 哪个组件发出的事件\n  target?: Yox\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number, length: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, length) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = env.RAW_MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(env.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): Object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from './env'\nimport * as string from './string'\n\nimport isDef from '../function/isDef'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\nexport const separator = '.'\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += separator\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : env.RAW_MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 判断字符串是因为 keypath 有可能是 toString\n  // 而 splitCache.toString 是个函数\n  const list = isDef(splitCache[keypath])\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(separator))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + separator + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, env.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from '../function/isDef'\n\nimport * as type from '../../../yox-type/src/type'\nimport ValueHolder from '../../../yox-type/src/interface/ValueHolder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: type.data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: type.data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: type.data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: type.data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: type.data, object: type.data): type.data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: type.data | void, object2: type.data | void): type.data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            env.VALUE_HOLDER.value = value\n            object = env.VALUE_HOLDER\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: type.data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: type.data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return isDef(object[key])\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as env from '../util/env'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : isDef(defaultValue)\n      ? defaultValue as string\n      : env.EMPTY_STRING\n}\n","import * as env from './env'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nlevel = /yox/.test(toString(env.EMPTY_FUNCTION)) ? DEBUG : WARN,\n\n/**\n * console 样式前缀\n */\nstylePrefix = '%c'\n\n/**\n * 全局调试开关\n */\nfunction getLevel() {\n  if (env.WINDOW) {\n    const logLevel = env.WINDOW['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return level\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= DEBUG) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox debug'), getStyle('#999'), msg)\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= INFO) {\n    nativeConsole.log(stylePrefix + (tag || 'Yox info'), getStyle('#2db7f5'), msg)\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= WARN) {\n    nativeConsole.warn(stylePrefix + (tag || 'Yox warn'), getStyle('#f90'), msg)\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (nativeConsole && getLevel() <= ERROR) {\n    nativeConsole.error(stylePrefix + (tag || 'Yox error'), getStyle('#ed4014'), msg)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as type from '../../../yox-type/src/type'\nimport EmitterOptions from '../../../yox-type/src/options/Emitter'\nimport EmitterInterface from '../../../yox-type/src/event/Emitter'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter implements EmitterInterface {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, type.nativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(\n    type: string,\n    args: any[] | void,\n    filter?: (type: string, args: any[] | void, options: EmitterOptions) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : env.UNDEFINED\n\n      array.each(\n        list,\n        function (options: EmitterOptions, _: number) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(type, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = env.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string,\n    listener?: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const { name, ns } = parseNamespace(instance.ns, type)\n      options.ns = ns\n      array.push(\n        listeners[name] || (listeners[name] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Invoke emitter.on(type, listener) failed.`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    { listeners } = instance\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but the \"type\" argument is undefined or null.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    { listeners } = instance,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n\nfunction matchTrue(options: EmitterOptions) {\n  return env.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : env.TRUE\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import NextTaskInterface from '../../../yox-type/src/interface/NextTask'\nimport TaskInterface from '../../../yox-type/src/interface/Task'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask implements NextTaskInterface {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: TaskInterface[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","import * as is from '../util/is'\nimport isDef from './isDef'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : isDef(defaultValue)\n      ? defaultValue as number\n      : 0\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import isDef from '../function/isDef'\nimport toJSON from '../function/toJSON'\n\nimport * as env from './env'\nimport * as array from './array'\n\nconst SEP_COMMA = ','\n\nexport const TRUE = '!0'\n\nexport const FALSE = '!1'\n\nexport const EMPTY = toJSON(env.EMPTY_STRING)\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, SEP_COMMA)}]`\n}\n\nexport function toCall(name: string, args: (string | void)[]): string {\n  return `${name}(${array.join(trimArgs(args), SEP_COMMA)})`\n}\n\n","import execute from '../../yox-common/src/function/execute'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\n\nimport * as type from '../../yox-type/src/type'\nimport ComputedInterface from '../../yox-type/src/watcher/Computed'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps: string[] = [],\n\n    getter: type.getter | void,\n\n    setter: type.setter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(options.deps)) {\n        deps = object.copy(options.deps)\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.getter\n\n  setter: type.setter | void\n\n  watcher: type.watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.getter,\n    setter: type.setter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, env.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, watcher)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      env.RAW_LENGTH,\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      env.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as object from '../../../yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath: string) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import isDef from '../../../yox-common/src/function/isDef'\nimport * as array from '../../../yox-common/src/util/array'\nimport * as object from '../../../yox-common/src/util/object'\nimport * as string from '../../../yox-common/src/util/string'\nimport * as keypathUtil from '../../../yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import EmitterOptions from '../../../yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: string, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import * as is from '../../../yox-common/src/util/is'\nimport * as env from '../../../yox-common/src/util/env'\nimport * as logger from '../../../yox-common/src/util/logger'\n\nimport * as type from '../../../yox-type/src/type'\nimport WatcherOptions from '../../../yox-type/src/options/Watcher'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: env.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: type.watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as type.watcher\n    optionsHolder.immediate = immediate === env.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as object from '../../yox-common/src/util/object'\nimport * as string from '../../yox-common/src/util/string'\n\nimport toNumber from '../../yox-common/src/function/toNumber'\nimport execute from '../../yox-common/src/function/execute'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as type from '../../yox-type/src/type'\nimport ValueHolder from '../../yox-type/src/interface/ValueHolder'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport ObserverInterface from '../../yox-type/src/watcher/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: type.data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: type.data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as type.data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item: EmitterOptions) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.getter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as type.data,\n      function (options: type.watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import isDef from '../../yox-common/src/function/isDef'\nimport execute from '../../yox-common/src/function/execute'\n\nimport CustomEvent from '../../yox-common/src/util/CustomEvent'\nimport Emitter from '../../yox-common/src/util/Emitter'\nimport NextTask from '../../yox-common/src/util/NextTask'\n\nimport * as is from '../../yox-common/src/util/is'\nimport * as env from '../../yox-common/src/util/env'\nimport * as array from '../../yox-common/src/util/array'\nimport * as string from '../../yox-common/src/util/string'\nimport * as object from '../../yox-common/src/util/object'\nimport * as logger from '../../yox-common/src/util/logger'\n\nimport * as config from '../../yox-config/src/config'\nimport * as snabbdom from '../../yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from '../../yox-template-compiler/src/compiler'\nimport * as templateStringify from '../../yox-template-compiler/src/stringify'\nimport * as templateRender from '../../yox-template-compiler/src/renderer'\n\nimport * as type from '../../yox-type/src/type'\n\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport YoxInterface from '../../yox-type/src/interface/Yox'\nimport YoxPluginInterface from '../../yox-type/src/interface/YoxPlugin'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport ComputedOptions from '../../yox-type/src/options/Computed'\nimport WatcherOptions from '../../yox-type/src/options/Watcher'\nimport EmitterOptions from '../../yox-type/src/options/Emitter'\nimport DirectiveHooks from '../../yox-type/src/hooks/Directive'\nimport TransitionHooks from '../../yox-type/src/hooks/Transition'\nimport PropRule from '../../yox-type/src/interface/PropRule'\n\nimport Computed from '../../yox-observer/src/Computed'\nimport Observer from '../../yox-observer/src/Observer'\n\nimport domApi from '../../yox-dom/src/dom'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nLOADER_QUEUE = '$queue',\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, type.filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPluginInterface): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          if (!compileCache[template]) {\n            const nodes = templateCompiler.compile(template)\n            if (process.env.NODE_ENV === 'development') {\n              if (nodes.length !== 1) {\n                logger.fatal(`\"template\" should have just one root element.`)\n              }\n            }\n            compileCache[template] = templateStringify.stringify(nodes[0])\n          }\n          template = compileCache[template]\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n    else {\n      return env.EMPTY_STRING\n    }\n  }\n\n  public static checkProp(key: string, value: any, rule: PropRule): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      // 类型\n      const type = rule.type,\n\n      // 默认值\n      defaultValue = rule.value\n\n      // 传了数据\n      if (isDef(value)) {\n\n        if (process.env.NODE_ENV === 'development') {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n\n            // 自定义函数判断是否匹配类型\n            // 自己打印警告信息吧\n            if (is.func(type)) {\n              (type as type.propType)(key, value)\n            }\n            else {\n\n              let matched = env.FALSE\n\n              // type: 'string'\n              if (!string.falsy(type)) {\n                matched = matchType(value, type as string)\n              }\n              // type: ['string', 'number']\n              else if (!array.falsy(type)) {\n                array.each(\n                  type as string[],\n                  function (item: string) {\n                    if (matchType(value, item)) {\n                      matched = env.TRUE\n                      return env.FALSE\n                    }\n                  }\n                )\n              }\n\n              if (!matched) {\n                logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n              }\n\n            }\n\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n        }\n\n      }\n      else {\n\n        if (process.env.NODE_ENV === 'development') {\n          // 没传值但此项是必传项\n          if (rule.required) {\n            logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n          }\n        }\n\n        // 没传值但是配置了默认值\n        if (isDef(defaultValue)) {\n          value = type === env.RAW_FUNCTION\n            ? defaultValue\n            : is.func(defaultValue)\n              ? (defaultValue as type.propValue)()\n              : defaultValue\n        }\n\n      }\n    }\n\n    return value\n\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options: YoxOptions | void) {\n\n    const instance = this, $options: YoxOptions = options || env.EMPTY_OBJECT\n\n    // 一进来就执行 before create\n    execute($options[config.HOOK_BEFORE_CREATE], instance, $options)\n    execute(Yox[config.HOOK_BEFORE_CREATE], env.UNDEFINED, $options)\n\n    instance.$options = $options\n\n    let {\n      data,\n      props,\n      computed,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    // 如果传了 props，则 data 应该是个 function\n    if (process.env.NODE_ENV === 'development') {\n      if (props && is.object(data)) {\n        logger.fatal('\"data\" option should be a function.')\n      }\n    }\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源\n    const source = instance.checkProps(props || {})\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: type.getter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`method [${name}] is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    if (events) {\n      instance.on(events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = env.UNDEFINED,\n\n      {\n        el,\n        vnode,\n        root,\n        model,\n        parent,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`\"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(env.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      if (root) {\n        instance.$root = root\n      }\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: env.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        afterCreateHook(instance, newWatchers)\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('根组件不传 el 是几个意思？')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            env.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('组件不写 template 是几个意思？')\n        }\n      }\n\n    }\n\n    afterCreateHook(instance, watchers)\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: type.getter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | type.data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener)\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, type.listener>,\n    listener?: type.listener\n  ): YoxInterface {\n    return addEvents(this, type, listener, env.TRUE)\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type?: string,\n    listener?: type.listener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: type.data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as type.data)\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event.type, args)\n    if (isComplete) {\n      const { $parent, $children } = instance\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher | WatcherOptions,\n    immediate?: boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: type.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: type.componentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        const hasComponent = loadComponent(globalComponents, name, callback)\n        if (process.env.NODE_ENV === 'development') {\n          if (!hasComponent) {\n            logger.error(`Component [${name}] is not found.`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: YoxOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.vnode = vnode\n      options.replace = env.TRUE\n\n      let { props, slots } = vnode,\n\n      modelKey = options.model || env.RAW_VALUE,\n\n      modelValue = vnode.model\n\n      options.model = modelKey\n\n      if (isDef(modelValue)) {\n        if (!props) {\n          props = {}\n        }\n        props[modelKey] = modelValue\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of [Component ${vnode.tag}] is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, type.component>,\n    component?: type.component\n  ): type.component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, type.filter>,\n    filter?: type.filter\n  ): type.filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(data?: type.data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (data) {\n          instance.set(data)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!data && oldValue === template.get()) {\n          instance.update(\n            template.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[config.HOOK_BEFORE_UPDATE], instance)\n        execute(Yox[config.HOOK_BEFORE_UPDATE], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = config.HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[config.HOOK_BEFORE_MOUNT], instance)\n        execute(Yox[config.HOOK_BEFORE_MOUNT], env.UNDEFINED, instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = config.HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            execute(Yox[afterHook], env.UNDEFINED, instance)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProps(props: type.data): type.data {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const result = object.copy(props)\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            result[key] = Yox.checkProp(key, props[key], rule)\n          }\n        )\n        return result\n      }\n    }\n    return props\n  }\n\n  checkProp(key: string, value: any): any {\n    if (process.env.NODE_ENV !== 'pure') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          value = Yox.checkProp(key, value, rule)\n        }\n      }\n    }\n    return value\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    execute($options[config.HOOK_BEFORE_DESTROY], instance)\n    execute(Yox[config.HOOK_BEFORE_DESTROY], env.UNDEFINED, instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = env.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    execute($options[config.HOOK_AFTER_DESTROY], instance)\n    execute(Yox[config.HOOK_AFTER_DESTROY], env.UNDEFINED, instance)\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction afterCreateHook(instance: Yox, watchers: Record<string, type.watcher | WatcherOptions> | void) {\n\n  if (watchers) {\n    instance.watch(watchers)\n  }\n\n  execute(instance.$options[config.HOOK_AFTER_CREATE], instance)\n  execute(Yox[config.HOOK_AFTER_CREATE], env.UNDEFINED, instance)\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | type.data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: Yox, type: string, listener: type.listener, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  instance.$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: Yox,\n  type: string | Record<string, type.listener>,\n  listener?: type.listener,\n  once?: true\n): Yox {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as type.listener, once)\n  }\n  else {\n    object.each(\n      type as type.data,\n      function (value: type.listener, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n  return instance\n}\n\nfunction loadComponent(data: Record<string, type.component> | void, name: string, callback: type.componentCallback): true | void {\n  if (data && data[name]) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      let loader = component as type.componentLoader,\n\n      queue: type.componentCallback[] = loader[LOADER_QUEUE]\n\n      if (queue) {\n        array.push(queue, callback)\n      }\n      else {\n        queue = component[LOADER_QUEUE] = [callback]\n\n        loader(\n          function (options: YoxOptions) {\n\n            loader[LOADER_QUEUE] = env.UNDEFINED\n\n            data[name] = options\n\n            array.each(\n              queue,\n              function (callback) {\n                callback(options)\n              }\n            )\n\n          }\n        )\n      }\n\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as YoxOptions)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: type.data | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: type.data, name: string | type.data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as type.data,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n\n"],"names":["TRUE","FALSE","NULL","UNDEFINED","RAW_UNDEFINED","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_MINUS_ONE","WINDOW","window","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","VALUE_HOLDER","value","target","env.UNDEFINED","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","numeric","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","env.TRUE","isStoped","stopPropagation","env.RAW_MINUS_ONE","each","callback","reversed","length","i","env.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","env.EMPTY_ARRAY","slice","toObject","key","join","separator","falsy","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","hyphenate","lower","capitalize","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","match","keypath","prefix","string.startsWith","list","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","env.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","keys","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","isLast","hasValue","env.VALUE_HOLDER","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","env.RAW_UNDEFINED","level","test","env.EMPTY_FUNCTION","stylePrefix","getLevel","env.WINDOW","logLevel","getStyle","backgroundColor","debug","msg","tag","log","info","warn","error","fatal","Error","nextTick","ns","listeners","Emitter","filter","instance","_a","name","isComplete","object.copy","event_1","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","ns_1","matchListener_1","createMatchListener","object.each","matchListener","parseNamespace","string.indexOf","string.slice","matchTrue","namespace","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","run","array.unshift","task","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","is.numeric","JSON","stringify","EMPTY","toJSON","sync","deps","observer","getter","setter","unique","watcher","$2","oldValue","newValue","diff","watcherOptions","fixed","array.falsy","dep","watch","Computed","is.boolean","force","object.has","env.RAW_VALUE","unbind","lastComputed","current","bind","unwatch","sorted","keypathUtil.match","prop","source","object.get","newIsString","oldIsString","env.RAW_LENGTH","newIsArray","oldIsArray","newLength","oldLength","Math","newIsObject","oldIsObject","env.EMPTY_OBJECT","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","keypathUtil.join","fuzzyKeypath","keypathUtil.matchFuzzy","diffString","diffArray","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","optionsHolder","immediate","data","nextTask","syncEmitter","asyncEmitter","asyncChanges","Observer","depIgnore","currentComputed","computed","reversedComputedKeys","add","matchBest","setValue","targetValue","object.set","string.codeAt","diffWatcher","fire","keypaths","pending","append","diffAsync","change","filterWatcher","build","object.sort","emitter","once","on","formatWatcherOptions","step","toNumber","min","insert","array.remove","object.clear","$options","config.HOOK_BEFORE_CREATE","Yox","props","events","methods","watchers","extensions","object.extend","checkProps","$observer","addComputed","method","$emitter","afterCreateHook","plugin","install","template","rule","directive","transition","component","partial","removeComputed","addEvents","downward","event","$parent","$children","PHASE_DOWNWARD","child","PHASE_UPWARD","vnode","oldVnode","config.HOOK_BEFORE_DESTROY","destroy","config.HOOK_AFTER_DESTROY","toggle","increase","decrease","prepend","removeAt","is","logger","config.HOOK_AFTER_CREATE","addEvent"],"mappings":"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"}