{"version":3,"file":"yox.min.js","sources":["../node_modules/yox-common/src/util/env.ts","../node_modules/yox-common/src/function/isDef.ts","../node_modules/yox-common/src/util/is.ts","../node_modules/yox-common/src/function/execute.ts","../node_modules/yox-common/src/util/Event.ts","../node_modules/yox-common/src/util/array.ts","../node_modules/yox-common/src/util/string.ts","../node_modules/yox-common/src/function/toString.ts","../node_modules/yox-common/src/util/keypath.ts","../node_modules/yox-common/src/util/object.ts","../node_modules/yox-common/src/util/logger.ts","../node_modules/yox-common/src/util/Emitter.ts","../node_modules/yox-common/src/function/isNative.ts","../node_modules/yox-common/src/function/nextTick.ts","../node_modules/yox-common/src/util/NextTask.ts","../node_modules/yox-config/index.ts","../node_modules/yox-snabbdom/src/field.ts","../node_modules/yox-snabbdom/src/nativeAttr.ts","../node_modules/yox-snabbdom/src/nativeProp.ts","../node_modules/yox-snabbdom/src/directive.ts","../node_modules/yox-snabbdom/src/component.ts","../node_modules/yox-snabbdom/index.ts","../node_modules/yox-common/src/function/toNumber.ts","../node_modules/yox-expression-compiler/src/nodeType.ts","../node_modules/yox-expression-compiler/src/creator.ts","../node_modules/yox-expression-compiler/src/interpreter.ts","../node_modules/yox-expression-compiler/src/compiler.ts","../node_modules/yox-template-compiler/src/nodeType.ts","../node_modules/yox-template-compiler/src/helper.ts","../node_modules/yox-template-compiler/src/creator.ts","../node_modules/yox-template-compiler/src/compiler.ts","../node_modules/yox-common/src/function/isUndef.ts","../node_modules/yox-common/src/function/toJSON.ts","../node_modules/yox-template-compiler/src/stringify.ts","../node_modules/yox-expression-compiler/src/executor.ts","../node_modules/yox-template-compiler/src/renderer.ts","../node_modules/yox-observer/src/Computed.ts","../node_modules/yox-observer/src/function/matchBest.ts","../node_modules/yox-observer/src/function/readValue.ts","../node_modules/yox-observer/src/function/diffRecursion.ts","../node_modules/yox-observer/src/function/diffString.ts","../node_modules/yox-observer/src/function/diffArray.ts","../node_modules/yox-observer/src/function/diffObject.ts","../node_modules/yox-observer/src/function/diffWatcher.ts","../node_modules/yox-observer/src/function/filterWatcher.ts","../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../node_modules/yox-observer/src/Observer.ts","../node_modules/yox-dom/index.ts","../node_modules/yox-common/src/function/debounce.ts","../src/config/event.ts","../src/directive/event.ts","../src/directive/model.ts","../src/directive/binding.ts","../src/Yox.ts","../src/filter/hasSlot.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_TAG = 'tag'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\n\nexport const RAW_STATIC_KEYPATH = 'staticKeypath'\nexport const RAW_ABSOLUTE_KEYPATH = 'absoluteKeypath'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const win = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const doc = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for noop function\n */\nexport function EMPTY_FUNCTION() {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || plain` 确保是个对象\n */\nexport const EMPTY_OBJECT = {}\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = []\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target !== env.UNDEFINED\n}\n","import * as env from './env'\n\nconst toString = Object.prototype.toString\n\n// 这个函数比较慢，所以下面都不用它，主要是给外部用\nexport function is(value: any, type: string) {\n  return type === 'numeric'\n    ? numeric(value)\n    : toString.call(value).toLowerCase() === `[object ${type}]`\n}\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === env.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 和 undefined 当作 object\n  return value !== env.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number'\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import isDef from './isDef'\nimport * as is from '../util/is'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : isDef(context)\n        ? fn.call(context, args)\n        : isDef(args)\n          ? fn(args)\n          : fn()\n  }\n}\n","import CustomEventInterface from 'yox-type/src/Event'\n\nimport * as env from './env'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  // 事件名称\n  type: string\n\n  // 谁发出的事件\n  target?: any\n\n  // 原始事件，比如 dom 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: boolean\n\n  // 事件是否已停止冒泡\n  isStoped?: boolean\n\n  // 处理当前事件的监听器\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    this.type = type\n    this.originalEvent = originalEvent\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): CustomEventInterface {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = env.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): CustomEventInterface {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = env.TRUE\n    }\n    return instance\n  }\n\n  prevent(): CustomEventInterface {\n    return this.preventDefault()\n  }\n\n  stop(): CustomEventInterface {\n    return this.stopPropagation()\n  }\n\n}\n","import * as is from './is'\nimport * as env from './env'\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each(array: any[], callback: (item: any, index: number, array: any[]) => boolean | void, reversed?: boolean) {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i, array) === env.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\nfunction nativePush(array: any[], item: any) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift(array: any[], item: any) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem(array: any[], value: any, action: Function) {\n  if (is.array(value)) {\n    each(\n      value,\n      function (item: any) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push(array: any[], target: any) {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift(array: any[], target: any) {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray(array: Array<any> | ArrayLike<any>): Array<any> {\n  return is.array(array)\n    ? array\n    : execute([].slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any) {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf(array: any[], target: any, strict?: boolean): number {\n  let result = -1\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        result = index\n        return env.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has(array: any[], target: any, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last(array: any[]): any {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop(array: any[]): any {\n  return array.pop()\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove(array: any[], target: any, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === env.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    env.TRUE\n  )\n  return result\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as env from './env'\n\nimport isDef from '../function/isDef'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return $1.toUpperCase()\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + $1.toLowerCase()\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? env.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number) {\n  return is.number(end)\n    ? start === end\n      ? env.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, isDef(start) ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, isDef(end) ? end : str.length)\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as env from '../util/env'\n\nexport default function (target: any, defaultValue = env.EMPTY_STRING): string {\n  return target != env.NULL && target.toString\n    ? target.toString()\n    : defaultValue\n}\n","import * as is from './is'\nimport * as env from './env'\nimport * as string from './string'\nimport toString from '../function/toString'\n\nconst SEPARATOR = '.', patternCache = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += SEPARATOR\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : -1\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: any, callback: (key: string | number, isLast: boolean) => boolean | void) {\n  if (string.falsy(keypath)) {\n    callback(\n      keypath,\n      env.TRUE\n    )\n  }\n  else {\n    let startIndex = 0, endIndex = 0\n    while (env.TRUE) {\n      endIndex = string.indexOf(keypath, SEPARATOR, startIndex)\n      if (endIndex > 0) {\n        if (\n          callback(\n            string.slice(keypath, startIndex, endIndex),\n            env.FALSE\n          ) === env.FALSE\n        ) {\n          break\n        }\n        startIndex = endIndex + 1\n      }\n      else {\n        callback(\n          string.slice(keypath, startIndex),\n          env.TRUE\n        )\n        break\n      }\n    }\n  }\n}\n\n\nfunction formatKeypath(keypath: any): string {\n  return is.string(keypath)\n    ? keypath\n    : is.number(keypath)\n      ? toString(keypath)\n      : env.EMPTY_STRING\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: any, keypath2: any): string {\n\n  keypath1 = formatKeypath(keypath1)\n  keypath2 = formatKeypath(keypath2)\n\n  return keypath1 === env.EMPTY_STRING\n    ? keypath2\n    : keypath2 !== env.EMPTY_STRING\n      ? keypath1 + SEPARATOR + keypath2\n      : keypath1\n\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, '*')\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    cache = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*\\*/g, '([\\.\\\\w]+?)')\n      .replace(/\\*/g, '(\\\\w+)')\n    cache = patternCache[pattern] = new RegExp(`^${cache}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as keypathUtil from './keypath'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Object): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Object, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Object, callback: (value: any, key: string) => boolean | void) {\n  for (let key in object) {\n    if (callback(object[key], key) === env.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Object, key: string | number): boolean {\n  // 优先不要用 hasOwnProperty，性能差\n  return isDef(object[key])\n    // 没辙，那就用吧\n    || object.hasOwnProperty(key)\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Object): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Object, ...objects: Object[]): Object {\n  array.each(\n    objects,\n    function (object) {\n      each(\n        object,\n        function (value, key) {\n          original[key] = value\n        }\n      )\n    }\n  )\n  return original\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 辅助 get 函数，持有最后找到的值，避免频繁的创建临时对象\n */\nconst valueHolder: Record<string, any> = {}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string | number): any {\n\n  /**\n   * 考虑以下情况:\n   *\n   * {\n   *   'a.b.c.d': 1,\n   *   'a.b.c': {\n   *      d: 2\n   *   }\n   * }\n   *\n   * 此时 keypath 是 `a.b.c.d`，可以获取到 1\n   * 如果没有这个 key，按 keypath 推进是取不到值的，因为没有 a.b.c 对象\n   * 个人觉得没有必要支持字面量，情况实在太多，会把这个函数搞的性能很差\n   */\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != env.NULL) {\n\n        // 这里主要目的是提升性能\n        // 因此不再调用 has 方法了\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = isDef(value) || object.hasOwnProperty(key)\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            valueHolder.value = value\n            object = valueHolder\n          }\n          else {\n            object = env.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = env.UNDEFINED\n        return env.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Object, keypath: string | number, value: any, autofill?: boolean) {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return env.FALSE\n      }\n    }\n  )\n}\n","import * as is from './is'\nimport * as env from './env'\nimport toString from '../function/toString'\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== env.RAW_UNDEFINED ? console : env.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n */\nuseSource = /yox/.test(toString(env.EMPTY_FUNCTION))\n\n/**\n * 全局调试开关\n *\n * 比如开发环境，开了 debug 模式，但是有时候觉得看着一堆日志特烦，想强制关掉\n * 比如线上环境，关了 debug 模式，为了调试，想强制打开\n */\nfunction isDebug() {\n  if (env.win) {\n    let debug = env.win['DEBUG']\n    if (is.boolean(debug)) {\n      return debug\n    }\n  }\n  return useSource\n}\n\n/**\n * 打印普通日志\n *\n * @param msg\n */\nexport function log(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.log(`[Yox log]: ${msg}`)\n  }\n}\n\n/**\n * 打印警告日志\n *\n * @param msg\n */\nexport function warn(msg: string) {\n  if (nativeConsole && isDebug()) {\n    nativeConsole.warn(`[Yox warn]: ${msg}`)\n  }\n}\n\n/**\n * 打印错误日志\n *\n * @param msg\n */\nexport function error(msg: string) {\n  if (nativeConsole) {\n    nativeConsole.error(`[Yox error]: ${msg}`)\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string): never {\n  throw new Error(`[Yox fatal]: ${msg}`)\n}\n","import execute from '../function/execute'\n\nimport * as is from './is'\nimport * as env from './env'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\n\nimport * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport CustomEvent from './Event'\n\ninterface Namespace {\n  name: string\n  ns: string\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   *\n   * 命名空间格式为  name.namespace\n   *\n   * 典型的场景是在一个组件创建时绑定全局事件，销毁时解绑事件，如下\n   *\n   * create:\n   *\n   *    component.on('a.namespace', listener)\n   *    component.on('b.namespace', listener)\n   *\n   * destroy:\n   *\n   *    component.off('.namespace') // 无需依次解绑，费时费力\n   *\n   * a.namespace 会响应全局 a 事件，原因正如上面这个例子，否则无法实现快捷解绑\n   * a 不会响应 a.namespace 事件，因为命名空间不匹配\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, Record<string, any>[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, (event: Event) => void>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || env.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param bullet 事件或事件名称\n   * @param data 事件数据\n   */\n  fire(bullet: string | CustomEvent, data: type.eventData | any[] | void, filter?: (options: EmitterOptions, data: type.eventData | any[] | void) => boolean | void) {\n\n    let event: CustomEvent | void, type: string, args: any\n\n    if (bullet instanceof CustomEvent) {\n      event = bullet\n      type = bullet.type\n      args = is.object(data) ? [event, data] : event\n    }\n    else {\n      type = bullet\n      if (data) {\n        args = data\n      }\n    }\n\n    let instance = this,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    list = instance.listeners[name],\n\n    isComplete = env.TRUE\n\n    if (list) {\n\n      array.each(\n        object.copy(list),\n        function (options: EmitterOptions, _: number, list: EmitterOptions[]) {\n\n          // 传了 filter，则用 filter 测试是否继续往下执行\n          if ((filter ? !filter(options, data) : !matchNamespace(ns, options))\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function,\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(type, options)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === env.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = env.FALSE\n            }\n          }\n\n          if (result === env.FALSE) {\n            return isComplete = env.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(type: string, listener?: Function | EmitterOptions): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    { name, ns } = parseNamespace(instance.ns, type),\n\n    result = env.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: Object[]) {\n      array.each(\n        list,\n        function (options: EmitterOptions) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = env.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   * @param data\n   */\n  on(type: string | Record<string, Function | EmitterOptions>, listener?: Function | EmitterOptions, data?: EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    addListener = function (item: Function | EmitterOptions | void, type: string) {\n      if (item) {\n        const options: EmitterOptions = is.func(item) ? { fn: item as Function } : item as EmitterOptions\n        if (is.object(options) && is.func(options.fn)) {\n          if (data) {\n            object.extend(options, data)\n          }\n          const { name, ns } = parseNamespace(instance.ns, type)\n          options.ns = ns\n          array.push(\n            listeners[name] || (listeners[name] = []),\n            options\n          )\n          return\n        }\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`注册 ${type} 事件失败`)\n      }\n    }\n\n    if (is.string(type)) {\n      addListener(listener, type as string)\n    }\n    else {\n      object.each(type, addListener)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(type?: string, listener?: Function | EmitterOptions) {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const { name, ns } = parseNamespace(instance.ns, type),\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: Object[], name: string) {\n        array.each(\n          list,\n          function (options: EmitterOptions, index: number, array: any[]) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              array.splice(index, 1)\n            }\n          },\n          env.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'dev') {\n        if (arguments.length > 0) {\n          logger.warn(`绑定的事件已被全部移除`)\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * 把事件类型解析成命名空间格式\n *\n * @param ns\n * @param type\n */\nfunction parseNamespace(ns: boolean, type: string): Namespace {\n\n  const result = {\n    name: type,\n    ns: env.EMPTY_STRING,\n  }\n\n  if (ns) {\n    const index = string.indexOf(type, '.')\n    if (index >= 0) {\n      result.name = string.slice(type, 0, index)\n      result.ns = string.slice(type, index + 1)\n    }\n  }\n\n  return result\n\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | EmitterOptions | void): (options: EmitterOptions) => boolean {\n  return is.object(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options\n      }\n    : is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : function (options: EmitterOptions) {\n          return env.TRUE\n        }\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 options 未指定命名空间，或 options.ns 和 namespace 一致，返回 true\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string, options: EmitterOptions): boolean {\n  return !namespace.length || namespace === options.ns\n}","import * as is from '../util/is'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target) && /native code/.test(toString(target))\n}","import * as env from '../util/env'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === env.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === env.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    let channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    if (!shared) {\n      shared = new NextTask()\n    }\n    return shared\n  }\n\n  /**\n   * 异步队列\n   */\n  nextTasks: Function[]\n\n  constructor() {\n    this.nextTasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(task: Function) {\n    array.push(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(task: Function) {\n    array.unshift(this.nextTasks, task)\n    this.start()\n  }\n\n  /**\n   * 启动下一轮任务\n   */\n  start() {\n    const instance = this\n    if (instance.nextTasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear() {\n    this.nextTasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run() {\n    const { nextTasks } = this\n    if (nextTasks.length) {\n      this.nextTasks = []\n      array.each(\n        nextTasks,\n        execute\n      )\n    }\n  }\n\n}\n","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Attribute from 'yox-type/src/vnode/Attribute'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (attr: Attribute, name: string) {\n        if (!oldValue[name]\n          || attr.value !== oldValue[name].value\n        ) {\n          api.attr(node, name, attr.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (_: Attribute, name: string) {\n        if (!newValue[name]) {\n          api.removeAttr(node, name)\n        }\n      }\n    )\n\n  }\n\n}\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Property from 'yox-type/src/vnode/Property'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || env.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (prop: Property, name: string) {\n        if (!oldValue[name]\n          || prop.value !== oldValue[name].value\n        ) {\n          api.prop(node, name, prop.value)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (prop: Property, name: string) {\n        if (!newValue[name]) {\n          api.removeProp(node, name, prop.hint)\n        }\n      }\n    )\n\n  }\n\n}\n\n//\n// 旧 [ child1, child2 ]\n// 新 innerHTML\n//\n// 这种情况，要让外部先把 child1 child2 正常移除掉，再用 innerHTML 覆盖，否则指令无法销毁\n//\n// 旧 innerHTML\n// 新 [ child1, child2 ]\n//\n// 这种情况，先用 innerHTML 覆盖，再处理 child1 child2\n//\n// export default {\n//   create: createProps,\n//   update: removeProps,\n//   postpatch: createProps,\n// }\n","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || env.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || env.EMPTY_OBJECT\n\n    object.each(\n      newValue,\n      function (directive: Directive, name: string) {\n        const { bind, unbind } = directive.hooks\n        if (!oldValue[name]) {\n          bind(node, directive, vnode)\n        }\n        else if (directive.value !== oldValue[name].value\n          || isKeypathChange\n        ) {\n          if (unbind) {\n            unbind(node, oldValue[name], oldVnode as VNode)\n          }\n          bind(node, directive, vnode)\n        }\n      }\n    )\n\n    object.each(\n      oldValue,\n      function (directive: Directive, name: string) {\n        if (!newValue[name]) {\n          const { unbind } = directive.hooks\n          if (unbind) {\n            unbind(node, directive, oldVnode as VNode)\n          }\n        }\n      }\n    )\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    object.each(\n      directives,\n      function (directive: Directive) {\n        const { unbind } = directive.hooks\n        if (unbind) {\n          unbind(node, directive, vnode)\n        }\n      }\n    )\n  }\n}\n","import VNode from 'yox-type/src/vnode/VNode'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n      if (props) {\n        node.set(node.checkPropTypes(props))\n      }\n      if (slots) {\n        node.set(slots)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport API from 'yox-type/src/API'\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxOptions from 'yox-type/src/options/Yox'\n\nimport * as field from './src/field'\n\nimport * as nativeAttr from './src/nativeAttr'\nimport * as nativeProp from './src/nativeProp'\nimport * as directive from './src/directive'\nimport * as component from './src/component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || env.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: API, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: YoxOptions | void) {\n\n  if (!options) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`component [${vnode.tag}] is not found.`)\n    }\n    return\n  }\n\n  // 渲染同步加载的组件时，vnode.node 为空\n  // 渲染异步加载的组件时，vnode.node 不为空，因为初始化用了占位节点\n  const child = (vnode.parent || vnode.context).create(options, vnode, vnode.node),\n\n  // 组件初始化创建的元素\n  node = child.$el as Node\n\n  if (node) {\n    vnode.node = node\n  }\n  else {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`the root element of component [${vnode.tag}] is not found.`)\n    }\n  }\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = env.FALSE\n\n  component.update(vnode)\n  directive.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Record<string, any> {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: API, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let isAsync = env.TRUE\n\n    context.component(\n      tag as string,\n      function (options: any) {\n        if (isDef(data[field.LOADING])) {\n          // 异步组件\n          if (data[field.LOADING]) {\n            // 尝试使用最新的 vnode\n            if (data[field.VNODE]) {\n              vnode = data[field.VNODE]\n              // 用完就删掉\n              delete data[field.VNODE]\n            }\n            enterVnode(\n              vnode,\n              createComponent(vnode, options)\n            )\n          }\n        }\n        // 同步组件\n        else {\n          createComponent(vnode, options)\n          isAsync = env.FALSE\n        }\n      }\n    )\n\n    if (isAsync) {\n      vnode.node = api.createComment(env.RAW_COMPONENT)\n      data[field.LOADING] = env.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.append(\n        node,\n        api.createText(text)\n      )\n    }\n    else if (html) {\n      api.html(node as Element, html)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    component.update(vnode)\n    directive.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: API, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= (end as number)) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: API, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      context.nextTick(enter, env.TRUE)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: API, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = isDef(endIndex) ? endIndex : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: API, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: Yox | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: API, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n  if (vnode.parent && vnode.parent !== vnode.context) {\n    return\n  }\n\n  const { data, children } = vnode\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = env.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child: VNode) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: Yox | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement,\n        env.EMPTY_FUNCTION\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: Yox | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = env.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: API, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : env.UNDEFINED\n\n      // 移动元素\n      if (isDef(oldIndex)) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = env.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: API, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  // 两棵静态子树就别折腾了\n  if (vnode.isStatic && oldVnode.isStatic) {\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n  component.update(vnode, oldVnode)\n  directive.update(vnode, oldVnode)\n\n  const { text, html, children } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, env.EMPTY_STRING)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, env.EMPTY_STRING)\n  }\n\n}\n\nexport function create(api: API, node: Node, isComment: boolean, context: Yox, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    isComment,\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: API, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`destroy vnode is not work without parent node.`)\n      }\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\n\nexport default function (target: any, defaultValue = 0): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import isDef from 'yox-common/src/function/isDef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(elements: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    elements,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(callee: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    callee,\n    args,\n  }\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean | void, offset: number | void, staticKeypath: string | void): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath: isDef(staticKeypath) ? staticKeypath as string : name,\n  }\n}\n\nfunction createMemberInner(raw: string, props: Node[], lookup: boolean | void, offset: number, staticKeypath: string | void) {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    props,\n    lookup: lookup === env.FALSE ? lookup : env.UNDEFINED,\n    offset: offset > 0 ? offset : env.UNDEFINED,\n    staticKeypath,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup: boolean | void, offset: number | void\n\n  if (name === env.KEYPATH_CURRENT\n    || name === env.KEYPATH_PARENT\n  ) {\n    lookup = env.FALSE\n    if (name === env.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = env.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, arg: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    arg,\n  }\n}\n\nfunction getLiteralNode(nodes: Node[], index: number): Literal | void {\n  if (nodes[index]\n    && nodes[index].type === nodeType.LITERAL\n  ) {\n    return nodes[index] as Literal\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个元素\n *\n * nodes 元素类型没有限制，可以是 Identifier、Literal、Call，或是别的完整表达式\n *\n * @param raw\n * @param nodes\n */\nexport function createMemberIfNeeded(raw: string, nodes: (Node | Identifier | Literal)[]): Node | Identifier | Member {\n\n  let { length } = nodes,\n\n  lookup: boolean | void,\n\n  offset = 0,\n\n  staticKeypath: string | void,\n\n  name = env.EMPTY_STRING,\n\n  list: (Node | Identifier | Literal)[] = [],\n\n  literal: Literal | void,\n\n  identifier: Identifier\n\n  if (length > 1) {\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n    if (nodes[0].type === nodeType.IDENTIFIER) {\n\n      identifier = nodes[0] as Identifier\n\n      name = identifier.name\n      lookup = identifier.lookup\n      staticKeypath = identifier.staticKeypath\n\n      if (identifier.offset > 0) {\n        offset += identifier.offset as number\n      }\n\n      if (name) {\n        array.push(list, identifier)\n      }\n\n      // 优化 1：计算 staticKeypath\n      //\n      // 计算 staticKeypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n      // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n      // 如 a.b.c 可以算出 staticKeypath，而 a[b].c 则不行，因为 b 是动态的\n      // 下面这段属于性能优化，避免在运行时反复计算 Member 的 keypath\n\n      // 优化 2：计算 offset 并智能转成 Identifier\n      //\n      // 比如 ../../xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n      for (let i = 1; i < length; i++) {\n        literal = getLiteralNode(nodes, i)\n        if (literal) {\n          if (literal.raw === env.KEYPATH_PARENT) {\n            offset += 1\n            continue\n          }\n          if (isDef(staticKeypath)\n            && literal.raw !== env.KEYPATH_CURRENT\n          ) {\n            staticKeypath = keypathUtil.join(staticKeypath as string, literal.value)\n          }\n        }\n        else {\n          staticKeypath = env.UNDEFINED\n        }\n        array.push(list, nodes[i])\n      }\n\n      // 表示 nodes 中包含路径，并且路径节点被干掉了\n      if (list.length < length) {\n        nodes = list\n        // 剩下的节点，第一个如果是 Literal，把它转成 Identifier\n        literal = getLiteralNode(nodes, 0)\n        if (literal) {\n          name = literal.value\n          nodes[0] = createIdentifierInner(literal.raw, name, lookup, offset)\n        }\n      }\n\n    }\n\n    // 如果全是路径节点，如 ../../this，nodes 为空数组\n    // 如果剩下一个节点，则可转成标识符\n    return nodes.length < 2\n      ? createIdentifierInner(raw, name, lookup, offset, staticKeypath)\n      : createMemberInner(raw, nodes, lookup, offset, staticKeypath)\n\n  }\n\n  return nodes[0]\n\n}\n","export const unary = {\n  '+': { exec(a: any) { return +a } },\n  '-': { exec(a: any) { return -a } },\n  '~': { exec(a: any) { return ~a } },\n  '!': { exec(a: any) { return !a } },\n  '!!': { exec(a: any) { return !!a } },\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': { prec: 14, exec(a: any, b: any) { return a * b } },\n  '/': { prec: 14, exec(a: any, b: any) { return a / b } },\n  '%': { prec: 14, exec(a: any, b: any) { return a % b } },\n  '+': { prec: 13, exec(a: any, b: any) { return a + b } },\n  '-': { prec: 13, exec(a: any, b: any) { return a - b } },\n  '<<': { prec: 12, exec(a: any, b: any) { return a << b } },\n  '>>': { prec: 12, exec(a: any, b: any) { return a >> b } },\n  '>>>': { prec: 12, exec(a: any, b: any) { return a >>> b } },\n  '<': { prec: 11, exec(a: any, b: any) { return a < b } },\n  '<=': { prec: 11, exec(a: any, b: any) { return a <= b } },\n  '>': { prec: 11, exec(a: any, b: any) { return a > b } },\n  '>=': { prec: 11, exec(a: any, b: any) { return a >= b } },\n  '==': { prec: 10, exec(a: any, b: any) { return a == b } },\n  '!=': { prec: 10, exec(a: any, b: any) { return a != b } },\n  '===': { prec: 10, exec(a: any, b: any) { return a === b } },\n  '!==': { prec: 10, exec(a: any, b: any) { return a !== b } },\n  '&': { prec: 9, exec(a: any, b: any) { return a & b } },\n  '^': { prec: 8, exec(a: any, b: any) { return a ^ b } },\n  '|': { prec: 7, exec(a: any, b: any) { return a | b } },\n  '&&': { prec: 6, exec(a: any, b: any) { return a && b } },\n  '||': { prec: 5, exec(a: any, b: any) { return a || b } },\n\n  '->': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i > b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i < b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  },\n  '=>': {\n    prec: 0,\n    exec(a: number, b: number) {\n      return a > b\n        ? function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i >= b; i--) {\n            callback(i, index++)\n          }\n        }\n        : function (callback: (index: number, counter: number) => void) {\n          for (let i = a, index = 0; i <= b; i++) {\n            callback(i, index++)\n          }\n        }\n    }\n  }\n}\n","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const { length } = content\n    this.index = -1\n    this.end = length\n    this.code = CODE_EOF\n    this.content = content\n    this.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? -1 : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this\n\n    // 走一步\n    if (instance.code === CODE_EOF) {\n      instance.go(step)\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (env.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (step && step < 0) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   *\n   * @param startIndex\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(-1)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'dev') {\n        instance.fatal(index, `一元运算只有操作符没有表达式？`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      instance.fatal(startIndex, `数字写错了知道吗？`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (env.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，字符串还没解析完呢？`)\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys = [], values = [], isKey = env.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'dev') {\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, `对象的 keys 和 values 的长度不一致`)\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，对象还没解析完呢？`)\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = env.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = env.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'dev') {\n                  instance.fatal(startIndex, `对象的 key 必须是字面量或标识符`)\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `对象的值没找到`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (env.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `到头了，tuple 还没解析完呢？`)\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ../../，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string | void\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (env.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = env.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = env.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, env.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `path 写法错误`)\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (env.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, env.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `. 后面跟的都是啥玩意啊`)\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              instance.fatal(startIndex, `[] 内部不能为空`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && object.has(keywordLiterals, raw)\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // +、/、%、~、^\n      case CODE_PLUS:\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // -、->\n      case CODE_MINUS:\n        instance.go()\n        if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===、=>\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n        }\n        else {\n          // 一个等号要报错\n          if (process.env.NODE_ENV === 'dev') {\n            instance.fatal(startIndex, `不支持一个等号这种赋值写法`)\n          }\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.code > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorInfo: any | void,\n\n    lastOperator: string | void,\n\n    lastOperatorInfo: any | void\n\n    while (env.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorInfo = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorInfo = interpreter.binary[lastOperator])\n            && lastOperatorInfo.prec >= operatorInfo.prec\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (env.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanBinary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanBinary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(-1)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(index, `三元表达式谁教你这样写的？`)\n        }\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          instance.fatal(index, `大兄弟，我怀疑你表达式写错了吧？`)\n        }\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling expression:\\n${this.content}\\n- ${message}`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals = {}\n\nkeywordLiterals[env.RAW_TRUE] = env.TRUE\nkeywordLiterals[env.RAW_FALSE] = env.FALSE\nkeywordLiterals[env.RAW_NULL] = env.NULL\nkeywordLiterals[env.RAW_UNDEFINED] = env.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as env from 'yox-common/src/util/env'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[env.RAW_SLOT] =\nspecialTags[env.RAW_TEMPLATE] =\n\nspecialAttrs[env.RAW_KEY] =\nspecialAttrs[env.RAW_REF] =\nspecialAttrs[env.RAW_SLOT] = env.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import * as env from 'yox-common/src/util/env'\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: env.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, modifier?: string, value?: string | number, expr?: ExpressionNode, children?: Node[]): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    name,\n    modifier,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createProperty(name: string, hint: number, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: env.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(expr: ExpressionNode, index: string): Each {\n  return {\n    type: nodeType.EACH,\n    expr,\n    index,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createElement(tag: string, isSvg: boolean, isComponent: boolean): Element {\n  // 是 svg 就不可能是组件\n  // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n  if (isSvg) {\n    isComponent = env.FALSE\n  }\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    isSvg,\n    isComponent,\n    isStatic: !isComponent && tag !== env.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isComplex: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n    isComplex: env.TRUE,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: env.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: env.TRUE,\n    isLeaf: env.TRUE,\n  }\n}","import * as config from 'yox-config/index'\n\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 缓存编译模板\nconst compileCache = {},\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和  lazy-click\ndirectiveSeparator = '-',\n\n// 分割符，即 {{ xx }} 和 {{{ xx }}}\nblockPattern = /(\\{?\\{\\{)\\s*([^\\}]+?)\\s*(\\}\\}\\}?)/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 属性的 name\nattributePattern = /^\\s*([-:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 首字母大写，或中间包含 -\ncomponentNamePattern = /^[$A-Z]|-/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\n/**\n * trim 文本开始和结束位置的换行符\n *\n * 换行符比较神奇，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\n *\n */\nfunction trimBreakline(content: string): string {\n  return content.replace(\n    /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n    env.EMPTY_STRING\n  )\n}\n\nexport function compile(content: string): Node[] {\n\n  let nodeList: Node[] = compileCache[content]\n  if (nodeList) {\n    return nodeList\n  }\n\n  nodeList = []\n\n  let nodeStack: Node[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  // 干掉 html 注释\n  str = content.replace(\n    /<!--[\\s\\S]*?-->/g,\n    env.EMPTY_STRING\n  ),\n\n  startQuote: string | void,\n\n  length: number | void,\n\n  isSafeBlock = env.FALSE,\n\n  nextIsBlock = env.FALSE,\n\n  match: RegExpMatchArray | null,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`Error compiling ${env.RAW_TEMPLATE}:\\n${content}\\n- ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode\n      && lastNode.type === nodeType.ELEMENT\n      && lastNode.tag !== popingTagName\n      && array.has(selfClosingTagNames, lastNode.tag)\n    ) {\n      popStack(lastNode.type, lastNode.tag)\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node: Branch = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch: Branch = array.last(nodeStack)\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        if (!currentBranch.isComplex\n          && (node.isComplex || isElement)\n        ) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'dev') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`结束标签是${tagName}，开始标签却是${element.tag}`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n        // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n        // 1. 很难做性能优化\n        // 2. 全局搜索不到事件名，不利于代码维护\n        // 3. 不利于编译成静态函数\n        if (process.env.NODE_ENV === 'dev') {\n          if (isDirective) {\n            fatal(`指令的值不能用插值或 if 语法`)\n          }\n        }\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement && isAttribute && isSpecialAttr(currentElement, node as Attribute)) {\n        bindSpecialAttr(currentElement, node as Attribute)\n      }\n\n      return node\n\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`出栈节点类型不匹配`)\n      }\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent && !element.slot && !child.safe) {\n      element.html = child.expr\n      element.children = env.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = env.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    if (prop.hint === config.HINT_NUMBER) {\n      prop.value = toNumber(text)\n    }\n    else if (prop.hint === config.HINT_BOOLEAN) {\n      prop.value = text === env.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = env.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      prop.binding = env.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    const { name } = attr\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'dev') {\n        fatal(`${name} 忘了写值吧？`)\n      }\n    }\n    // 比如 <Dog isLive>\n    else if (element.isComponent) {\n      attr.value = env.TRUE\n    }\n    // <div data-name checked>\n    else {\n      attr.value = string.startsWith(name, 'data-')\n        ? env.EMPTY_STRING\n        : name\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = env.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = env.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr[env.RAW_STATIC_KEYPATH]) {\n      attr.binding = env.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = env.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    const { text } = child\n\n    // lazy 不需要编译表达式\n    // 因为 lazy 的值必须是大于 0 的数字\n    if (directive.name === config.DIRECTIVE_LAZY) {\n      if (is.numeric(text)) {\n        const value = toNumber(text)\n        if (value > 0) {\n          directive.value = value\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal(`lazy 指令的值 [${text}] 必须大于 0`)\n          }\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`lazy 指令的值 [${text}] 必须是数字`)\n        }\n      }\n    }\n    else {\n\n      // 指令的值是纯文本，可以预编译表达式，提升性能\n      const expr = exprCompiler.compile(text),\n\n      // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n      isModel = directive.name === config.DIRECTIVE_MODEL,\n\n      // on-click=\"xx\" on-click=\"method()\" 值只能是标识符或函数调用\n      isEvent = directive.name === config.DIRECTIVE_EVENT\n\n      if (expr) {\n\n        if (process.env.NODE_ENV === 'dev') {\n          // 如果指令表达式是函数调用，则只能调用方法（难道还有别的好调用的吗？）\n          if (expr.type === exprNodeType.CALL) {\n            const { callee } = expr as ExpressionCall\n            if (callee.type !== exprNodeType.IDENTIFIER) {\n              fatal('指令表达式的类型如果是函数调用，则只能调用方法')\n            }\n          }\n          // 上面检测过方法调用，接下来事件指令只需要判断是否是标识符\n          else if (isEvent && expr.type !== exprNodeType.IDENTIFIER) {\n            fatal('事件指令的表达式只能是 标识符 或 函数调用')\n          }\n\n          if (isModel && !expr[env.RAW_STATIC_KEYPATH]) {\n            fatal(`model 指令的值格式错误: [${expr.raw}]`)\n          }\n        }\n\n        directive.expr = expr\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (isModel || isEvent) {\n            fatal(`${directive.name} 指令的表达式错误: [${text}]`)\n          }\n        }\n      }\n\n      directive.value = text\n\n    }\n\n    directive.children = env.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      fatal(`指令的表达式不能用插值语法`)\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | undefined,\n\n    hasNext: boolean | undefined\n\n    // 变成一维数组，方便遍历\n    while (env.TRUE) {\n      if (currentNode.children) {\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = env.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅仅用在 checkCondition 函数中\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 每个条件都是空内容，则删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    if (process.env.NODE_ENV === 'dev') {\n      const isTemplate = element.tag === env.RAW_TEMPLATE\n\n      if (element.slot) {\n        if (!isTemplate) {\n          fatal(`slot 属性只能用于 <template>`)\n        }\n        else if (element.key) {\n          fatal(`<template> 不支持 key`)\n        }\n        else if (element.ref) {\n          fatal(`<template> 不支持 ref`)\n        }\n        else if (element.attrs) {\n          fatal(`<template> 不支持属性或指令`)\n        }\n      }\n      else if (isTemplate) {\n        fatal(`<template> 不写 slot 属性是几个意思？`)\n      }\n      else if (element.tag === env.RAW_SLOT && !element.name) {\n        fatal(`<slot> 不写 name 属性是几个意思？`)\n      }\n    }\n\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === env.RAW_NAME || name === env.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'dev') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`${name} 不能写在 if 内`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === env.EMPTY_STRING) {\n        fatal(`${name} 的值不能是空字符串`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`${name} 的值只能是字符串字面量`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === env.RAW_SLOT && attr.name === env.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch: Branch | void = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = env.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    const type = node.type, currentBranch: Branch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('大哥，else 后面不能跟 else if 啊')\n          }\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal('大哥，只能写一个 else 啊！！')\n          }\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal('不写 if 是几个意思？？')\n        }\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        array.push(\n          // 这里不能写 currentElement && !currentAttribute，举个例子\n          //\n          // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n          //\n          // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n          currentElement && currentBranch.type === nodeType.ELEMENT\n            ? currentElement.attrs || (currentElement.attrs = [])\n            : currentBranch.children || (currentBranch.children = []),\n          node\n        )\n      }\n      else {\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        // 只要是 if 节点，并且和 element 同级，就加上 stub\n        // 方便 virtual dom 进行对比\n        // 这个跟 virtual dom 的实现原理密切相关，不加 stub 会有问题\n        if (!currentElement) {\n          (node as If).stub = env.TRUE\n        }\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = env.FALSE\n        }\n        // 当前树枝节点是简单节点，一旦加入了一个复杂子节点，当前树枝节点变为复杂节点\n        if (!currentBranch.isComplex && node.isComplex) {\n          currentBranch.isComplex = env.TRUE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n    text = trimBreakline(text)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          const tag = match[2]\n          if (match[1] === '/') {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n            popStack(nodeType.ELEMENT, tag)\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'dev') {\n              if (tag === env.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !lastNode.isComponent) {\n                  fatal('<template> 只能写在组件标签内')\n                }\n              }\n            }\n\n            const node = creator.createElement(\n              tag,\n              array.has(svgTagNames, tag),\n              componentNamePattern.test(tag)\n            )\n\n            addChild(node)\n            currentElement = node\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === '/') {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = env.UNDEFINED\n        }\n        // 处理结束标签的 >\n        return match[0]\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'dev') {\n            if (match[2]) {\n              fatal(`上一个属性似乎没有正常结束`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === config.DIRECTIVE_MODEL || name === env.RAW_TRANSITION) {\n            node = creator.createDirective(\n              string.camelize(name)\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_ON + directiveSeparator)) {\n            const event = slicePrefix(name, config.DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!event) {\n                fatal('缺少事件名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_EVENT,\n              string.camelize(event)\n            )\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, config.DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, config.DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_LAZY,\n              lazy ? string.camelize(lazy) : env.EMPTY_STRING\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, config.DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, config.DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!custom) {\n                fatal('缺少自定义指令名称')\n              }\n            }\n            node = creator.createDirective(\n              config.DIRECTIVE_CUSTOM,\n              string.camelize(custom)\n            )\n          }\n          else {\n            // 组件用驼峰格式\n            if (currentElement.isComponent) {\n              node = creator.createAttribute(\n                string.camelize(name)\n              )\n            }\n            // 原生 dom 属性\n            else {\n\n              // 把 attr 优化成 prop\n              const lowerName = name.toLowerCase()\n\n              // <slot> 或 <template> 中的属性不用识别为 property\n              if (helper.specialTags[currentElement.tag]) {\n                node = creator.createAttribute(name)\n              }\n              // 尝试识别成 property\n              else if (array.has(stringProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_STRING\n                )\n              }\n              else if (array.has(numberProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_NUMBER\n                )\n              }\n              else if (array.has(booleanProperyNames, lowerName)) {\n                node = creator.createProperty(\n                  attr2Prop[lowerName] || lowerName,\n                  config.HINT_BOOLEAN\n                )\n              }\n              // 没辙，还是个 attribute\n              else {\n                node = creator.createAttribute(name)\n              }\n\n            }\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(env.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = env.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (nextIsBlock) {\n          text = content\n          addTextChild(text)\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            fatal(`${currentAttribute.name} 没有找到结束引号`)\n          }\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        text = match && match.index as number > 0\n          ? string.slice(content, 0, match.index)\n          : content\n\n        addTextChild(text)\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (string.trim(content)) {\n            fatal(`<${currentElement.tag}> 属性里不要写乱七八糟的字符`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_EACH)) {\n        source = slicePrefix(source, config.SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, env.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const expr = exprCompiler.compile(string.trim(terms[0]))\n          if (expr) {\n            if (!currentElement) {\n              return creator.createEach(\n                expr,\n                string.trim(terms[1])\n              )\n            }\n            else {\n              if (process.env.NODE_ENV === 'dev') {\n                fatal(\n                  currentAttribute\n                    ? `each 不能写在属性的值里`\n                    : `each 不能写在属性层级`\n                )\n              }\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IMPORT)) {\n        source = slicePrefix(source, config.SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(\n                currentAttribute\n                  ? `import 不能写在属性的值里`\n                  : `import 不能写在属性层级`\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, config.SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(\n                currentAttribute\n                  ? `partial 不能写在属性的值里`\n                  : `partial 不能写在属性层级`\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_IF)) {\n        source = slicePrefix(source, config.SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_ELSE)) {\n        source = slicePrefix(source, config.SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`else 后面不要写乱七八糟的东西`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, config.SYNTAX_SPREAD)) {\n        source = slicePrefix(source, config.SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              is.string(expr[env.RAW_STATIC_KEYPATH])\n                ? env.TRUE\n                : env.FALSE\n            )\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(`延展属性只能用于组件属性`)\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!config.SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(expr, isSafeBlock)\n        }\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`无效的 expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (content: string) {\n    let tpl = content\n    while (tpl) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(tpl)\n          if (match) {\n            tpl = string.slice(tpl, match.length)\n            return env.FALSE\n          }\n        }\n      )\n    }\n    str = string.slice(str, content.length)\n  },\n\n  parseBlock = function (content: string, all: string) {\n    if (content) {\n      // 结束当前 block\n      // 正则会去掉 {{ xx }} 里面两侧的空白符，因此如果有 /，一定是第一个字符\n      if (string.charAt(content) === '/') {\n\n        /**\n         * 处理可能存在的自闭合元素，如下\n         *\n         * {{#if xx}}\n         *    <input>\n         * {{/if}}\n         */\n        popSelfClosingElementIfNeeded()\n\n        const name = string.slice(content, 1)\n\n        let type = helper.name2Type[name], isCondition: boolean | void\n        if (type === nodeType.IF) {\n          const node = array.pop(ifStack)\n          if (node) {\n            type = node.type\n            isCondition = env.TRUE\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              fatal(`if 还没开始就结束了？`)\n            }\n          }\n        }\n\n        const node: any = popStack(type)\n        if (node && isCondition) {\n          checkCondition(node)\n        }\n      }\n      else {\n        // 开始下一个 block 或表达式\n        array.each(\n          blockParsers,\n          function (parse) {\n            const node = parse(content)\n            if (node) {\n              addChild(node)\n              return env.FALSE\n            }\n          }\n        )\n      }\n    }\n    str = string.slice(str, all.length)\n  }\n\n  while (str) {\n    // 匹配 {{ }}\n    match = str.match(blockPattern)\n    if (match) {\n\n      nextIsBlock = env.TRUE\n\n      // 裁剪开头到 {{ 之间的模板内容\n      if (match.index as number > 0) {\n        parseHtml(\n          string.slice(str, 0, match.index)\n        )\n      }\n\n      // 获取开始分隔符的长度，用于判断是否是安全输出\n      length = match[1].length\n\n      // 避免手误写成 {{{ name }} 或 {{ name }}}\n      if (length === match[3].length) {\n        isSafeBlock = length === 2\n        parseBlock(match[2], match[0])\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          fatal(`${match[1]} and ${match[3]} is not a pair.`)\n        }\n      }\n\n    }\n    else {\n      nextIsBlock = env.FALSE\n      parseHtml(str)\n    }\n  }\n\n  return compileCache[content] = nodeList\n\n}","import * as env from '../util/env'\n\nexport default function (target: any): boolean {\n  return target === env.UNDEFINED\n}\n","export default function (target: any): string {\n  return JSON.stringify(target)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport toJSON from 'yox-common/src/function/toJSON'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否要执行 join 操作\nconst joinStack: boolean[] = [],\n\n// 是否正在收集子节点\ncollectStack: (boolean | void)[] = [],\n\nnodeStringify = {},\n\nRENDER_SLOT = 'a',\n\nRENDER_EACH = 'b',\n\nRENDER_EXPRESSION = 'c',\n\nRENDER_EXPRESSION_ARG = 'd',\n\nRENDER_EXPRESSION_VNODE = 'e',\n\nRENDER_TEXT_VNODE = 'f',\n\nRENDER_ELEMENT_VNODE = 'g',\n\nRENDER_PARTIAL = 'h',\n\nRENDER_IMPORT = 'i',\n\nARG_CONTEXT = 'j',\n\nSEP_COMMA = ',',\n\nSEP_COLON = ':',\n\nSEP_PLUS = '+',\n\nSTRING_TRUE = '!0',\n\nSTRING_FALSE = '!1',\n\nSTRING_EMPTY = toJSON(env.EMPTY_STRING),\n\nCODE_RETURN = 'return ',\n\nCODE_PREFIX = `function(${\n  array.join([\n    RENDER_EXPRESSION,\n    RENDER_EXPRESSION_ARG,\n    RENDER_EXPRESSION_VNODE,\n    RENDER_TEXT_VNODE,\n    RENDER_ELEMENT_VNODE,\n    RENDER_SLOT,\n    RENDER_PARTIAL,\n    RENDER_IMPORT,\n    RENDER_EACH\n  ], SEP_COMMA)\n}){return `,\n\nCODE_SUFFIX = `}`\n\n// 表达式求值是否要求返回字符串类型\nlet isStringRequired: boolean | void\n\nfunction stringifyObject(obj: Object): string {\n  const fields = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          `${toJSON(key)}${SEP_COLON}${value}`\n        )\n      }\n    }\n  )\n  return `{${array.join(fields, SEP_COMMA)}}`\n}\n\nfunction stringifyArray(arr: any[]): string {\n  return `[${array.join(arr, SEP_COMMA)}]`\n}\n\nfunction stringifyCall(name: string, arg: string): string {\n  return `${name}(${arg})`\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `function(${arg || env.EMPTY_STRING}){${result || env.EMPTY_STRING}}`\n}\n\nfunction stringifyGroup(code: string): string {\n  return `(${code})`\n}\n\nfunction stringifyExpression(renderName: string, expr: ExpressionNode, extra: string[] | void): string {\n  const args = [toJSON(expr)]\n  if (extra) {\n    array.push(args, extra)\n  }\n  return stringifyCall(\n    renderName,\n    array.join(args, SEP_COMMA)\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return stringifyExpression(\n    RENDER_EXPRESSION_ARG,\n    expr,\n    [ARG_CONTEXT]\n  )\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return toJSON(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return stringifyExpression(RENDER_EXPRESSION, expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    isStringRequired = children.length > 1\n    return stringifyChildren(children)\n  }\n}\n\nfunction stringifyChildren(children: Node[], isComplex: boolean | void): string {\n  // 如果是复杂节点的 children，则每个 child 的序列化都是函数调用的形式\n  // 因此最后可以拼接为 fn1(), fn2(), fn3() 这样依次调用，而不用再多此一举的使用数组，因为在 renderer 里也用不上这个数组\n\n  // children 大于一个时，才有 join 的可能，单个值 jion 啥啊...\n  const isJoin = children.length > 1 && !isComplex\n\n  array.push(joinStack, isJoin)\n  const value = array.join(\n    children.map(\n      function (child: Node) {\n        return nodeStringify[child.type](child)\n      }\n    ),\n    isJoin ? SEP_PLUS : SEP_COMMA\n  )\n  array.pop(joinStack)\n\n  return value\n\n}\n\nfunction stringifyConditionChildren(children: Node[] | void, isComplex: boolean | void): string | void {\n  if (children) {\n    const result = stringifyChildren(children, isComplex)\n    return children.length > 1 && isComplex\n      ? stringifyGroup(result)\n      : result\n  }\n}\n\nfunction stringifyIf(node: If | ElseIf, stub: boolean | void) {\n\n  let { children, isComplex, next } = node,\n\n  test = stringifyExpression(RENDER_EXPRESSION, node.expr),\n\n  yes = stringifyConditionChildren(children, isComplex),\n\n  no: string | void,\n\n  result: string\n\n  if (next) {\n    no = next.type === nodeType.ELSE\n      ? stringifyConditionChildren(next.children, next.isComplex)\n      : stringifyIf(next as ElseIf, stub)\n  }\n  // 到达最后一个条件，发现第一个 if 语句带有 stub，需创建一个注释标签占位\n  else if (stub) {\n    no = renderElement(\n      stringifyObject({\n        isComment: STRING_TRUE,\n        text: STRING_EMPTY,\n      })\n    )\n  }\n\n  if (isDef(yes) || isDef(no)) {\n\n    result = `${test}?${isDef(yes) ? yes : STRING_EMPTY}:${isDef(no) ? no : STRING_EMPTY}`\n\n    // 如果是连接操作，因为 ?: 优先级最低，因此要加 ()\n    return array.last(joinStack)\n      ? stringifyGroup(result)\n      : result\n\n  }\n\n  return STRING_EMPTY\n\n}\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = env.TRUE\n\n  array.each(\n    list,\n    function (arg: string | void) {\n      if (isDef(arg)) {\n        removable = env.FALSE\n        array.unshift(args, arg)\n      }\n      else if (!removable) {\n        array.unshift(args, STRING_FALSE)\n      }\n    },\n    env.TRUE\n  )\n\n  return args\n\n}\n\nfunction renderElement(data: string, attrs: string | void, childs: string | void, slots: string | void): string {\n  return stringifyCall(\n    RENDER_ELEMENT_VNODE,\n    array.join(\n      trimArgs([data, attrs, childs, slots]),\n      SEP_COMMA\n    )\n  )\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const slots = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = config.SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child: Node) {\n\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(element.slot, element.children)\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot('children', [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children: any, name: string) {\n      // 强制为复杂节点，因为 slot 的子节点不能用字符串拼接的方式来渲染\n      slots[name] = stringifyFunction(\n        stringifyChildren(children, env.TRUE)\n      )\n    }\n  )\n\n  if (!object.falsy(slots)) {\n    return stringifyObject(slots)\n  }\n\n}\n\nnodeStringify[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, isComponent, isSvg, isStatic, isComplex, name, ref, key, html, attrs, children } = node,\n\n  data: Record<string, any> = {},\n\n  elementAttrs: string[] = [],\n\n  elementChilds: string | void,\n\n  elementSlots: string | void,\n\n  args: string[]\n\n  if (tag === env.RAW_SLOT) {\n    args = [toJSON(config.SLOT_DATA_PREFIX + name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children, env.TRUE)\n        )\n      )\n    }\n    return stringifyCall(\n      RENDER_SLOT,\n      array.join(args, SEP_COMMA)\n    )\n  }\n\n  array.push(collectStack, env.FALSE)\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr: Node) {\n        array.push(\n          elementAttrs,\n          nodeStringify[attr.type](attr)\n        )\n      }\n    )\n  }\n\n  data.tag = toJSON(tag)\n\n  if (isSvg) {\n    data.isSvg = STRING_TRUE\n  }\n\n  if (isStatic) {\n    data.isStatic = STRING_TRUE\n  }\n\n  if (ref) {\n    data.ref = stringifyValue(ref.value, ref.expr, ref.children)\n  }\n\n  if (key) {\n    data.key = stringifyValue(key.value, key.expr, key.children)\n  }\n\n  if (html) {\n    data.html = stringifyExpression(RENDER_EXPRESSION, html, [STRING_TRUE])\n  }\n\n  if (isComponent) {\n    data.isComponent = STRING_TRUE\n    if (children) {\n      collectStack[collectStack.length - 1] = env.TRUE\n      elementSlots = getComponentSlots(children)\n    }\n  }\n  else if (children) {\n    isStringRequired = env.TRUE\n    collectStack[collectStack.length - 1] = isComplex\n    elementChilds = stringifyChildren(children, isComplex)\n    if (isComplex) {\n      elementChilds = stringifyFunction(elementChilds)\n    }\n    else {\n      data.text = elementChilds\n      elementChilds = env.UNDEFINED\n    }\n  }\n\n  array.pop(collectStack)\n\n  return renderElement(\n    stringifyObject(data),\n    array.falsy(elementAttrs)\n      ? env.UNDEFINED\n      : stringifyArray(elementAttrs),\n    elementChilds\n      ? elementChilds\n      : env.UNDEFINED,\n    elementSlots\n  )\n\n}\n\nnodeStringify[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.PROPERTY] = function (node: Property): string {\n  const result: Record<string, any> = {\n    type: node.type,\n    name: toJSON(node.name),\n    hint: node.hint,\n    binding: node.binding,\n  }\n  if (node.binding) {\n    result.expr = toJSON(node.expr)\n  }\n  else {\n    result.value = stringifyValue(node.value, node.expr, node.children)\n  }\n  return stringifyObject(result)\n}\n\nnodeStringify[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { type, name, value, expr } = node,\n\n  result: Record<string, any> = {\n    // renderer 遍历 attrs 要用 type\n    type,\n    // 换种说法\n    // name 变成命名空间\n    ns: toJSON(name),\n    // modifier 变成命名空间下的名称\n    name: toJSON(node.modifier),\n  }\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      const { callee, args } = expr as ExpressionCall\n      // compiler 保证了函数调用的 callee 是标识符\n      result.method = toJSON((callee as ExpressionIdentifier).name)\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy(args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        result.args = stringifyFunction(\n          CODE_RETURN + stringifyArray(args.map(stringifyExpressionArg)),\n          ARG_CONTEXT\n        )\n      }\n    }\n    else if (name === config.DIRECTIVE_EVENT) {\n      // compiler 保证了这里只能是标识符\n      result.event = toJSON((expr as ExpressionIdentifier).name)\n    }\n    // <input model=\"id\">\n    else if (name === config.DIRECTIVE_MODEL) {\n      result.expr = toJSON(expr)\n    }\n    else if (name === config.DIRECTIVE_CUSTOM) {\n\n      // 如果表达式是字面量，直接取值\n      // 比如 o-log=\"1\" 取出来就是数字 1\n      if (expr.type === exprNodeType.LITERAL) {\n        result.value = toJSON(\n          (expr as ExpressionLiteral).value\n        )\n      }\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      else {\n        result.getter = stringifyFunction(\n          CODE_RETURN + stringifyExpressionArg(expr),\n          ARG_CONTEXT\n        )\n      }\n\n    }\n\n  }\n\n  // 比如写了一个 o-x=\"x\"\n  // 外部可能是想从数据读取 x 的值，也可能只是想直接取字面量 x\n  if (isUndef(result.value) && isDef(value)) {\n    result.value = toJSON(value)\n  }\n\n  return stringifyObject(result)\n\n}\n\nnodeStringify[nodeType.SPREAD] = function (node: Spread): string {\n  return stringifyObject({\n    type: node.type,\n    expr: toJSON(node.expr),\n    binding: node.binding,\n  })\n}\n\nnodeStringify[nodeType.TEXT] = function (node: Text): string {\n\n  const result = toJSON(node.text)\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    return stringifyCall(\n      RENDER_TEXT_VNODE,\n      result\n    )\n  }\n\n  return result\n}\n\nnodeStringify[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  // 强制保留 isStringRequired 参数，减少运行时判断参数是否存在\n  // 因为还有 stack 参数呢，各种判断真的很累\n  let renderName = RENDER_EXPRESSION,\n\n  args = [isStringRequired ? STRING_TRUE : env.UNDEFINED]\n\n  if (array.last(collectStack) && !array.last(joinStack)) {\n    renderName = RENDER_EXPRESSION_VNODE\n  }\n\n  return stringifyExpression(\n    renderName,\n    node.expr,\n    trimArgs(args),\n  )\n}\n\nnodeStringify[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node, node.stub)\n}\n\nnodeStringify[nodeType.EACH] = function (node: Each): string {\n\n  const expr = toJSON(node.expr),\n\n  index = node.index ? `, ${toJSON(node.index)}` : env.EMPTY_STRING,\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_EACH, `${expr}${index},${children}`)\n\n}\n\nnodeStringify[nodeType.PARTIAL] = function (node: Partial): string {\n\n  const name = toJSON(node.name),\n\n  // compiler 保证了 children 一定有值\n  children = stringifyFunction(\n    stringifyChildren(node.children as Node[], node.isComplex)\n  )\n\n  return stringifyCall(RENDER_PARTIAL, `${name},${children}`)\n\n}\n\nnodeStringify[nodeType.IMPORT] = function (node: Import): string {\n\n  const name = toJSON(node.name)\n\n  return stringifyCall(RENDER_IMPORT, `${name}`)\n\n}\n\nexport function stringify(node: Node): string {\n  return CODE_PREFIX + nodeStringify[node.type](node) + CODE_SUFFIX\n}\n\nexport function hasStringify(code: string): boolean {\n  return string.startsWith(code, CODE_PREFIX)\n}","import isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport invoke from 'yox-common/src/function/execute'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Keypath from './node/Keypath'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nconst nodeExecutor = {}\n\nnodeExecutor[nodeType.LITERAL] = function (node: Literal): any {\n  return node.value\n}\n\nnodeExecutor[nodeType.IDENTIFIER] = function (node: Identifier, getter: (keypath: string, node: Keypath) => any): any {\n  return getter(node.name, node)\n}\n\nnodeExecutor[nodeType.MEMBER] = function (node: Member, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n\n  /**\n   * 先说第一种奇葩情况：\n   *\n   * 'xx'.length\n   *\n   * 没有变量数据，直接执行字面量，这里用不上 getter\n   *\n   * 第二种：\n   *\n   * a.b.c\n   *\n   * 这是常规操作\n   *\n   * 第三种：\n   *\n   * 'xx'[name]\n   *\n   * 以字面量开头，后面会用到变量\n   *\n   */\n\n  let { props, staticKeypath } = node, first: any, data: any\n\n  if (isUndef(staticKeypath)) {\n\n    // props 至少两个，否则无法创建 Member\n    first = props[0]\n\n    if (first.type === nodeType.IDENTIFIER) {\n      staticKeypath = (first as Identifier).name\n    }\n    else {\n      data = execute(first, getter, context)\n    }\n\n    for (let i = 1, len = props.length; i < len; i++) {\n      staticKeypath = keypathUtil.join(\n        staticKeypath,\n        execute(props[i], getter, context)\n      )\n    }\n\n  }\n\n  if (isDef(data)) {\n    data = object.get(data, staticKeypath as string)\n    return data ? data.value : env.UNDEFINED\n  }\n\n  if (getter) {\n    return getter(staticKeypath as string, node)\n  }\n\n}\n\nnodeExecutor[nodeType.UNARY] = function (node: Unary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.unary[node.operator].exec(\n    execute(node.arg, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.BINARY] = function (node: Binary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return interpreter.binary[node.operator].exec(\n    execute(node.left, getter, context),\n    execute(node.right, getter, context)\n  )\n}\n\nnodeExecutor[nodeType.TERNARY] = function (node: Ternary, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return execute(node.test, getter, context)\n    ? execute(node.yes, getter, context)\n    : execute(node.no, getter, context)\n}\n\nnodeExecutor[nodeType.ARRAY] = function (node: ArrayNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return node.elements.map(\n    function (node) {\n      return execute(node, getter, context)\n    }\n  )\n}\n\nnodeExecutor[nodeType.OBJECT] = function (node: ObjectNode, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  let result = {}\n  array.each(\n    node.keys,\n    function (key, index) {\n      result[key] = execute(node.values[index], getter, context)\n    }\n  )\n  return result\n}\n\nnodeExecutor[nodeType.CALL] = function (node: Call, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return invoke(\n    execute(node.callee, getter, context),\n    context,\n    node.args.map(\n      function (node) {\n        return execute(node, getter, context)\n      }\n    )\n  )\n}\n\nexport function execute(node: Node, getter?: (keypath: string, node: Keypath) => any, context?: any): any {\n  return nodeExecutor[node.type](node, getter, context)\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Event from 'yox-common/src/util/Event'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport Keypath from 'yox-expression-compiler/src/node/Keypath'\n\nimport * as exprExecutor from 'yox-expression-compiler/src/executor'\n\nimport * as signature from 'yox-type/index'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\n\nimport * as nodeType from './nodeType'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const map = target[name] || (target[name] = {})\n  map[key] = value\n}\n\nexport function render(\n  context: Yox,\n  filters: Record<string, Function>,\n  partials: Record<string, Function | void>,\n  directives: Record<string, DirectiveHooks | void>,\n  transitions: Record<string, TransitionHooks | void>,\n  template: Function\n) {\n\n  let $keypath = env.EMPTY_STRING,\n\n  $scope: Record<string, any> = { $keypath },\n\n  $stack = [$keypath, $scope],\n\n  eventScope: Record<string, any> | void,\n\n  vnodeStack: VNode[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  lookup = function (stack: any[], index: number, key: string, node: Keypath, depIgnore?: boolean, defaultKeypath?: string) {\n\n    let keypath = keypathUtil.join(stack[index], key),\n\n    scope = stack[index + 1]\n\n    node.absoluteKeypath = keypath\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (isUndef(defaultKeypath)) {\n      defaultKeypath = keypath\n    }\n\n    if (eventScope && object.has(eventScope, key)) {\n      return eventScope[key]\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 keypath\n    if (object.has(scope, key)) {\n      return scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    if (object.has(scope, '$item')) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === env.EMPTY_STRING) {\n        return scope\n      }\n      // 取 this.xx\n      if (scope && object.has(scope, key)) {\n        return scope[key]\n      }\n    }\n\n    // 正常取数据\n    let result = context.get(keypath, lookup, depIgnore)\n    if (result === lookup) {\n      // undefined 或 true 都表示需要向上寻找\n      if (node.lookup !== env.FALSE && index > 1) {\n        index -= 2\n        return lookup(stack, index, key, node, depIgnore, defaultKeypath)\n      }\n      result = object.get(filters, key)\n      if (!result) {\n        node.absoluteKeypath = defaultKeypath\n        logger.warn(`data [${node.raw}] is not found.`)\n        return\n      }\n      result = result.value\n    }\n\n    return result\n\n  },\n\n  getValue = function (expr: ExpressionNode, depIgnore?: boolean, stack?: any[]): any {\n\n    const renderStack = stack || $stack,\n\n    { length } = renderStack\n\n    return exprExecutor.execute(\n      expr,\n      function (keypath: string, node: Keypath): any {\n        return lookup(\n          renderStack,\n          length - 2 * ((node.offset || 0) + 1),\n          keypath,\n          node,\n          depIgnore\n        )\n      },\n      context\n    )\n\n  },\n\n  addBinding = function (vnode: any, attr: Record<string, any>): any {\n\n    const { expr } = attr,\n\n    value = getValue(expr, env.TRUE),\n\n    key = keypathUtil.join(config.DIRECTIVE_BINDING, attr.name),\n\n    hooks = directives[config.DIRECTIVE_BINDING]\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns: config.DIRECTIVE_BINDING,\n          name: attr.name,\n          key,\n          hooks,\n          binding: expr.absoluteKeypath,\n          hint: attr.hint,\n        }\n      )\n    }\n\n    return value\n\n  },\n\n  spreadObject = function (vnode: any, attr: Record<string, any>) {\n\n    let { expr } = attr,\n\n    value = getValue(expr, attr.binding)\n\n    // 数组也算一种对象，要排除掉\n    if (is.object(value) && !is.array(value)) {\n\n      object.each(\n        value,\n        function (value: any, key: string) {\n          setPair(vnode, 'props', key, value)\n        }\n      )\n\n      const absoluteKeypath = expr[env.RAW_ABSOLUTE_KEYPATH]\n      if (absoluteKeypath) {\n        const key = keypathUtil.join(config.DIRECTIVE_BINDING, absoluteKeypath),\n        hooks = directives[config.DIRECTIVE_BINDING]\n        if (hooks) {\n          setPair(\n            vnode,\n            'directives',\n            key,\n            {\n              ns: config.DIRECTIVE_BINDING,\n              name: env.EMPTY_STRING,\n              key,\n              hooks,\n              binding: keypathUtil.join(absoluteKeypath, '*'),\n            }\n          )\n        }\n      }\n\n    }\n    else {\n      logger.warn(`[${expr.raw}] 不是对象，延展个毛啊`)\n    }\n  },\n\n  addDirective = function (vnode: any, attr: Record<string, any>) {\n\n    let { ns, name, value } = attr,\n\n    key = keypathUtil.join(ns, name),\n\n    binding: string | void,\n\n    hooks: DirectiveHooks | void,\n\n    getter: signature.directiveGetter | void,\n\n    handler: signature.directiveHandler | signature.eventListener | void,\n\n    transition: TransitionHooks | void\n\n    switch (ns) {\n\n      case config.DIRECTIVE_EVENT:\n        hooks = directives[config.DIRECTIVE_EVENT]\n        handler = attr.event\n          ? createEventListener(attr.event)\n          : createMethodListener(attr.method, attr.args, $stack)\n        break\n\n      case env.RAW_TRANSITION:\n        transition = transitions[value]\n        if (transition) {\n          vnode.transition = transition\n        }\n        else {\n          if (process.env.NODE_ENV === 'dev') {\n            logger.fatal(`transition [${value}] is not found.`)\n          }\n        }\n        return\n\n      case config.DIRECTIVE_MODEL:\n        hooks = directives[config.DIRECTIVE_MODEL]\n        vnode.model = getValue(attr.expr, env.TRUE)\n        binding = attr.expr.absoluteKeypath\n        break\n\n      case config.DIRECTIVE_LAZY:\n        setPair(vnode, 'lazy', name, value)\n        return\n\n      default:\n        hooks = directives[name]\n        if (attr.method) {\n          handler = createMethodListener(attr.method, attr.args, $stack)\n        }\n        else if (attr.getter) {\n          getter = createGetter(attr.getter, $stack)\n        }\n        break\n\n    }\n\n    if (hooks) {\n      setPair(\n        vnode,\n        'directives',\n        key,\n        {\n          ns,\n          name,\n          key,\n          value,\n          binding,\n          hooks,\n          getter,\n          handler\n        }\n      )\n    }\n    else {\n      if (process.env.NODE_ENV === 'dev') {\n        logger.fatal(`directive [${key}] is not found.`)\n      }\n    }\n\n  },\n\n  createEventListener = function (type: string): signature.eventListener {\n    return function (event: Event, data?: Record<string, any>) {\n      if (event.type !== type) {\n        event = new Event(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    method: string,\n    args: Function | void,\n    stack: any[]\n  ): signature.directiveHandler {\n    return function (event?: Event, data?: Record<string, any>) {\n\n      const callee = context[method]\n\n      if (event instanceof Event) {\n\n        let result: any | void\n\n        if (args) {\n          // 给当前 scope 加上 event 和 data\n          eventScope = {\n            $event: event,\n            $data: data,\n          }\n          result = execute(callee, context, args(stack))\n          // 阅后即焚\n          eventScope = env.UNDEFINED\n        }\n        else {\n          result = execute(callee, context, data ? [event, data] : event)\n        }\n\n        if (result === env.FALSE) {\n          event.prevent().stop()\n        }\n      }\n      else {\n        execute(\n          callee,\n          context,\n          args ? args(stack) : env.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): signature.directiveGetter {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderExpression = function (expr: ExpressionNode, stringRequired: boolean | void): any {\n    const value = getValue(expr)\n    return stringRequired\n      ? toString(value)\n      : value\n  },\n\n  renderExpressionArg = function (expr: ExpressionNode, stack: any[]): any {\n    return getValue(expr, env.UNDEFINED, stack)\n  },\n\n  renderExpressionVnode = function (expr: ExpressionNode, stringRequired: boolean) {\n    renderTextVnode(\n      renderExpression(expr, stringRequired)\n    )\n  },\n\n  renderTextVnode = function (text: string) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        lastVnode.text += text\n      }\n      else {\n        array.push(\n          vnodeList,\n          {\n            isText: env.TRUE,\n            text,\n            context,\n            keypath: $keypath,\n          }\n        )\n      }\n    }\n  },\n\n  renderElementVnode = function (\n    vnode: Record<string, any>,\n    attrs: any[] | void,\n    childs: Function | void,\n    slots: Record<string, Function> | void\n  ) {\n\n    if (attrs) {\n      array.each(\n        attrs,\n        function (attr: any) {\n\n          let { name, value } = attr\n\n          switch (attr.type) {\n\n            case nodeType.ATTRIBUTE:\n\n              if (attr.binding) {\n                value = addBinding(vnode, attr)\n              }\n\n              if (vnode.isComponent) {\n                setPair(vnode, 'props', name, value)\n              }\n              else {\n                setPair(vnode, 'nativeAttrs', name, { name, value })\n              }\n\n              break\n\n            case nodeType.PROPERTY:\n              setPair(\n                vnode,\n                'nativeProps',\n                name,\n                {\n                  name,\n                  value: attr.binding ? addBinding(vnode, attr) : value,\n                  hint: attr.hint,\n                }\n              )\n              break\n\n            case nodeType.DIRECTIVE:\n              addDirective(vnode, attr)\n              break\n\n            case nodeType.SPREAD:\n              spreadObject(vnode, attr)\n              break\n\n          }\n        }\n      )\n      // 确保有 directives 就必然有 lazy\n      if (vnode.directives && !vnode.lazy) {\n        vnode.lazy = env.EMPTY_OBJECT\n      }\n    }\n\n    // childs 和 slots 不可能同时存在\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n    else if (slots) {\n      const renderSlots = {}\n      object.each(\n        slots,\n        function (slot: Function, name: string) {\n          vnodeStack.push([])\n          slot()\n          renderSlots[name] = array.pop(vnodeStack)\n        }\n      )\n      vnode.slots = renderSlots\n    }\n\n    vnode.context = context\n    vnode.keypath = $keypath\n\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n\n    return vnode\n\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack), vnodes = context.get(name)\n\n    if (vnodes) {\n      array.each(\n        vnodes,\n        function (vnode: any) {\n          array.push(vnodeList, vnode)\n          vnode.parent = context\n        }\n      )\n    }\n    else if (defaultRender) {\n      defaultRender()\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n      return\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpression,\n          renderExpressionArg,\n          renderExpressionVnode,\n          renderTextVnode,\n          renderElementVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach\n        )\n        return\n      }\n    }\n    if (process.env.NODE_ENV === 'dev') {\n      logger.fatal(`partial [${name}] is not found.`)\n    }\n  },\n\n  renderEach = function (expr: ExpressionNode, index: string | Function | void, handler?: Function) {\n\n    let eachIndex: string | void, eachHandler: Function\n\n    if (is.func(index)) {\n      eachHandler = index as Function\n      eachIndex = env.UNDEFINED\n    }\n    else {\n      eachHandler = handler as Function\n      eachIndex = index as string\n    }\n\n    const value = getValue(expr),\n\n    exprKeypath = expr[env.RAW_ABSOLUTE_KEYPATH],\n\n    eachKeypath = exprKeypath || keypathUtil.join($keypath, expr.raw),\n\n    callback = function (item: any, key: string | number) {\n\n      let lastKeypath = $keypath, lastScope = $scope, lastKeypathStack = $stack\n\n      $keypath = keypathUtil.join(eachKeypath, key)\n      $scope = {}\n      $stack = object.copy($stack)\n\n      array.push($stack, $keypath)\n      array.push($stack, $scope)\n\n      // 从下面这几句赋值可以看出\n      // scope 至少会有 '$keypath' '$item' eachIndex 等几个值\n      $scope.$keypath = $keypath\n\n      // 类似 {{#each 1 -> 10}} 这样的临时循环，需要在 scope 上加上当前项\n      // 因为通过 context.get() 无法获取数据\n      if (!exprKeypath) {\n        $scope.$item = item\n      }\n\n      if (eachIndex) {\n        $scope[eachIndex] = key\n      }\n\n      eachHandler(item, key)\n\n      $keypath = lastKeypath\n      $scope = lastScope\n      $stack = lastKeypathStack\n\n    }\n\n    if (is.array(value)) {\n      array.each(value, callback)\n    }\n    else if (is.object(value)) {\n      object.each(value, callback)\n    }\n    else if (is.func(value)) {\n      value(callback)\n    }\n\n  }\n\n  return template(\n    renderExpression,\n    renderExpressionArg,\n    renderExpressionVnode,\n    renderTextVnode,\n    renderElementVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach\n  )\n\n}","import execute from 'yox-common/src/function/execute'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as type from 'yox-type/index'\nimport ComputedInterface from 'yox-type/src/Computed'\nimport ObserverInterface from 'yox-type/src/Observer'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\nconst syncWatcherOptions: WatcherOptions = { sync: env.TRUE },\n\nasyncWatcherOptions: WatcherOptions = { sync: env.FALSE }\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed implements ComputedInterface {\n\n  static current?: Computed\n\n  /**\n   * 对外的构造器，把用户配置的计算属性对象转换成内部对象\n   *\n   * @param keypath\n   * @param observer\n   * @param options\n   */\n  static build(keypath: string, observer: ObserverInterface, options: any): Computed | void {\n\n    let cache = env.TRUE,\n\n    sync = env.TRUE,\n\n    deps = env.EMPTY_ARRAY,\n\n    getter: type.computedGetter | void,\n\n    setter: type.computedSetter | void\n\n    if (is.func(options)) {\n      getter = options\n    }\n    else if (is.object(options)) {\n      if (is.boolean(options.cache)) {\n        cache = options.cache\n      }\n      if (is.boolean(options.sync)) {\n        sync = options.sync\n      }\n      if (is.array(options.deps)) {\n        deps = options.deps\n      }\n      if (is.func(options.get)) {\n        getter = options.get\n      }\n      if (is.func(options.set)) {\n        setter = options.set\n      }\n    }\n\n    if (getter) {\n      return new Computed(keypath, sync, cache, deps, observer, getter, setter)\n    }\n\n  }\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  sync: boolean\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: ObserverInterface\n\n  getter: type.computedGetter\n\n  setter: type.computedSetter | void\n\n  callback: type.watcher\n\n  unique: Record<string, boolean>\n\n  private constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: ObserverInterface,\n    getter: type.computedGetter,\n    setter: type.computedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.sync = sync\n    instance.cache = cache\n    // 因为可能会修改 deps，所以这里创建一个自己的对象，避免影响外部传入的 deps\n    instance.deps = []\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.callback = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(env.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep: string) {\n          instance.add(dep)\n        }\n      )\n      instance.bind()\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, 'value')) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = env.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, callback, sync } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          callback,\n          sync ? syncWatcherOptions : asyncWatcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, callback } = this\n\n    array.each(\n      deps,\n      function (dep: string) {\n        observer.unwatch(dep, callback)\n      },\n      env.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix: string) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == env.NULL || keypath === env.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string | number, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (isDef(keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath))) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      'length',\n      newIsString ? newValue.length : env.UNDEFINED,\n      oldIsString ? oldValue.length : env.UNDEFINED\n    )\n    return env.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string | number, newValue: any, oldValue: any) => void\n): boolean | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : env.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : env.UNDEFINED\n\n    callback(\n      'length',\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        i,\n        newValue ? newValue[i] : env.UNDEFINED,\n        oldValue ? oldValue[i] : env.UNDEFINED\n      )\n    }\n\n    return env.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : env.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : env.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import isDef from 'yox-common/src/function/isDef'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: Object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (isDef(keypathUtil.matchFuzzy(keypath, watchKeypath))) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import * as type from 'yox-type/index'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (options: EmitterOptions, data: type.eventData | any[] | void): boolean | void {\n\n  if (options.count && data) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return data[0] !== data[1]\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as object from 'yox-common/src/util/object'\n\nimport WatcherOptions from 'yox-type/src/options/Watcher'\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: boolean | WatcherOptions | void): WatcherOptions {\n  // 这里要返回全新的对象，避免后续的修改会影响外部传入的配置对象\n  return options === env.TRUE\n    ? { immediate: env.TRUE }\n    : is.object(options)\n      ? object.copy(options)\n      : { }\n}","import * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as type from 'yox-type/index'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport EmitterOptions from 'yox-type/src/options/Emitter'\nimport ObserverInterface from 'yox-type/src/Observer'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer implements ObserverInterface {\n\n  data: Record<string, any>\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, any>\n\n  pending?: boolean\n\n  constructor(data?: Object, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === env.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: any, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue) || is.array(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            item.count++\n          }\n        )\n\n        const { list } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, list: [] })\n        if (!array.has(list, watchKeypath)) {\n          array.push(list, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = env.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = env.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (item, keypath) {\n\n        const args = [instance.get(keypath), item.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          item.list,\n          function (watchKeypath: string) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: type.computedGetter | ComputedOptions\n  ): Computed | void {\n\n    const instance = this,\n    computed = Computed.build(keypath, instance, options)\n\n    if (computed) {\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, env.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, env.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param options\n   * @param options.immediate 是否立即触发一次\n   * @param options.sync 是否同步响应，默认是异步\n   * @param options.once 是否监听一次\n   */\n  watch(\n    keypath: string | Record<string, type.watcher | WatcherOptions>,\n    watcher?: type.watcher,\n    options?: WatcherOptions | boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, watcher: any, options: WatcherOptions) {\n\n      if (is.object(watcher)) {\n\n        if (is.boolean(watcher.immediate)) {\n          options.immediate = watcher.immediate\n        }\n        if (is.boolean(watcher.sync)) {\n          options.sync = watcher.sync\n        }\n        if (is.boolean(watcher.once)) {\n          options.once = watcher.once\n        }\n        if (is.func(watcher.watcher)) {\n          watcher = watcher.watcher\n        }\n\n      }\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter\n\n      if (is.func(watcher)) {\n        const listener: EmitterOptions = {\n          fn: watcher,\n          ctx: context,\n          count: 0,\n        }\n        if (options.once) {\n          listener.max = 1\n        }\n        emitter.on(keypath, listener)\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function.`)\n        }\n      }\n\n      if (options.immediate) {\n        execute(\n          watcher,\n          context,\n          [\n            instance.get(keypath),\n            env.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      if (is.func(watcher) || is.object(watcher)) {\n        bind(\n          keypath as string,\n          watcher,\n          formatWatcherOptions(options)\n        )\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          logger.fatal(`watcher for \"${keypath}\" should be a function or object.`)\n        }\n      }\n      return\n    }\n\n    object.each(\n      keypath,\n      function (value: any, keypath: string) {\n        bind(keypath, value, {})\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath: string,\n    watcher?: type.watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === env.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === env.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return env.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.insert(keypath, item, env.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return env.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return env.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import * as config from 'yox-config/index'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport isUndef from 'yox-common/src/function/isUndef'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/Event'\n\nimport API from 'yox-type/src/API'\nimport SpecialEvent from 'yox-type/src/SpecialEvent'\n\nimport * as signature from 'yox-type/index'\n\nlet doc = env.doc,\n\n// textContent 不兼容 IE 678\ninnerText = 'textContent',\n\naddEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\nremoveEventListener: (node: HTMLElement, type: string, listener: (event: Event) => void) => void = env.EMPTY_FUNCTION,\n\naddClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nremoveClass: (node: HTMLElement, className: string) => void = env.EMPTY_FUNCTION,\n\nfindElement: (selector: string) => Element | void = env.EMPTY_FUNCTION\n\nif (doc) {\n  if (isUndef(doc.body[innerText])) {\n    innerText = 'innerText'\n  }\n  if (doc.addEventListener) {\n    addEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.addEventListener(type, listener, env.FALSE)\n    }\n    removeEventListener = function (node: HTMLElement, type: string, listener: (event: Event) => void) {\n      node.removeEventListener(type, listener, env.FALSE)\n    }\n  }\n  else {\n    addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.attachEvent(`on${type}`, listener)\n    }\n    removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n      node.detachEvent(`on${type}`, listener)\n    }\n  }\n  if (doc.body.classList) {\n    addClass = function (node: HTMLElement, className: string) {\n      node.classList.add(className)\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      node.classList.remove(className)\n    }\n  }\n  else {\n    addClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (!array.has(classes, className)) {\n        array.push(classes, className)\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n    removeClass = function (node: HTMLElement, className: string) {\n      const classes = node.className.split(CHAR_WHITESPACE)\n      if (array.remove(classes, className)) {\n        node.className = array.join(classes, CHAR_WHITESPACE)\n      }\n    }\n  }\n  if (doc.querySelector) {\n    findElement = function (selector: string): Element | void {\n      const node = (doc as Document).querySelector(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n  else {\n    findElement = function (selector: string): Element | void {\n      // 去掉 #\n      if (string.codeAt(selector, 0) === 35) {\n        selector = string.slice(selector, 1)\n      }\n      const node = (doc as Document).getElementById(selector)\n      if (node) {\n        return node\n      }\n    }\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 输入事件\n */\nINPUT = 'input',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nspecialEvents: Record<string, SpecialEvent> = {},\n\ndomApi: API = {\n\n  createElement(tag: string, isSvg?: boolean): Element {\n    return isSvg\n      ? (doc as Document).createElementNS(namespaces.svg, tag)\n      : (doc as Document).createElement(tag)\n  },\n\n  createText(text: string): Text {\n    return (doc as Document).createTextNode(text)\n  },\n\n  createComment(text: string): Comment {\n    return (doc as Document).createComment(text)\n  },\n\n  createEvent(event: any, node: HTMLElement): any {\n    return event\n  },\n\n  prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n    if (isDef(value)) {\n      object.set(node, name, value, env.FALSE)\n    }\n    else {\n      return object.get(node, name)\n    }\n  },\n\n  removeProp(node: HTMLElement, name: string, hint?: number): void {\n    object.set(\n      node,\n      name,\n      hint === config.HINT_BOOLEAN\n        ? env.FALSE\n        : env.EMPTY_STRING,\n      env.FALSE\n    )\n  },\n\n  attr(node: HTMLElement, name: string, value?: string): string | void {\n    if (isDef(value)) {\n      node.setAttribute(name, value as string)\n    }\n    else {\n      // value 还可能是 null\n      const value = node.getAttribute(name)\n      if (value != env.NULL) {\n        return value\n      }\n    }\n  },\n\n  removeAttr(node: HTMLElement, name: string): void {\n    node.removeAttribute(name)\n  },\n\n  before(parentNode: Node, node: Node, referenceNode: Node): void {\n    parentNode.insertBefore(node, referenceNode)\n  },\n\n  append(parentNode: Node, node: Node): void {\n    parentNode.appendChild(node)\n  },\n\n  replace(parentNode: Node, node: Node, oldNode: Node): void {\n    parentNode.replaceChild(node, oldNode)\n  },\n\n  remove(parentNode: Node, node: Node): void {\n    parentNode.removeChild(node)\n  },\n\n  parent(node: Node): Node | void {\n    const { parentNode } = node\n    if (parentNode) {\n      return parentNode\n    }\n  },\n\n  next(node: Node): Node | void {\n    const { nextSibling } = node\n    if (nextSibling) {\n      return nextSibling\n    }\n  },\n\n  find: findElement,\n\n  tag(node: Node): string | void {\n    if (node.nodeType === 1) {\n      return (node as HTMLElement).tagName.toLowerCase()\n    }\n  },\n\n  text(node: Node, text?: string): string | void {\n    if (isDef(text)) {\n      node[innerText] = text as string\n    }\n    else {\n      return node[innerText]\n    }\n  },\n\n  html(node: Element, html?: string): string | void {\n    if (isDef(html)) {\n      node.innerHTML = html as string\n    }\n    else {\n      return node.innerHTML\n    }\n  },\n\n  addClass,\n\n  removeClass,\n\n  on(node: HTMLElement, type: string, listener: signature.nativeEventListener, context?: any): void {\n\n    const emitter: Emitter = node[EMITTER] || (node[EMITTER] = new Emitter()),\n\n    nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n    // 一个元素，相同的事件，只注册一个 native listener\n    if (!nativeListeners[type]) {\n\n      // 特殊事件\n      const special = specialEvents[type],\n\n      // 唯一的原生监听器\n      nativeListener = function (event: Event | CustomEvent) {\n\n        emitter.fire(\n          event instanceof CustomEvent\n            ? event\n            : new CustomEvent(event.type, domApi.createEvent(event, node))\n        )\n\n      }\n\n      nativeListeners[type] = nativeListener\n\n      if (special) {\n        special.on(node, nativeListener)\n      }\n      else {\n        addEventListener(node, type, nativeListener)\n      }\n\n    }\n    emitter.on(\n      type,\n      {\n        fn: listener,\n        ctx: context,\n      }\n    )\n  },\n\n  off(node: HTMLElement, type: string, listener: signature.nativeEventListener): void {\n\n    const emitter: Emitter = node[EMITTER],\n\n    { listeners, nativeListeners } = emitter\n\n    // emitter 会根据 type 和 listener 参数进行适当的删除\n    emitter.off(type, listener)\n\n    // 如果注册的 type 事件都解绑了，则去掉原生监听器\n    if (nativeListeners && !emitter.has(type)) {\n\n      const special = specialEvents[type],\n\n      nativeListener = nativeListeners[type]\n\n      if (special) {\n        special.off(node, nativeListener as signature.specialEventListener)\n      }\n      else {\n        removeEventListener(node, type, nativeListener)\n      }\n\n      delete nativeListeners[type]\n\n    }\n\n    if (object.falsy(listeners)) {\n      node[EMITTER] = env.UNDEFINED\n    }\n\n  },\n\n  specialEvents\n\n}\n\nspecialEvents[INPUT] = {\n  on(node: HTMLElement, listener: signature.specialEventListener) {\n    let locked = env.FALSE\n    domApi.on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = env.TRUE\n    })\n    domApi.on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: CustomEvent) {\n      locked = env.FALSE\n      event.type = INPUT\n      listener(event)\n    })\n    addEventListener(node, INPUT, listener[INPUT] = function (event: Event) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement, listener: signature.specialEventListener) {\n    domApi.off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    domApi.off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, INPUT, listener[INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[INPUT] = env.UNDEFINED\n  }\n}\n\nexport default domApi","import execute from './execute'\n\nimport * as env from '../util/env'\nimport * as array from '../util/array'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: number\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, env.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = 0\n          if (!immediate) {\n            execute(fn, env.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const INPUT = 'input'\n\n/**\n * 表单控件的修改事件\n */\nexport const CHANGE = 'change'\n\n/**\n * IE 模拟输入事件的特殊事件\n */\nexport const PROPERTY_CHANGE = 'propertychange'\n","import execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\n\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\n\nimport api from 'yox-dom/index'\nimport * as event from '../config/event'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\nimport * as type from 'yox-type/index'\n\n// 避免连续多次点击，主要用于提交表单场景\n// 移动端的 tap 事件可自行在业务层打补丁实现\nconst immediateTypes = array.toObject([event.CLICK, event.TAP]),\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { name, handler } = directive,\n\n    lazy = vnode.lazy[name] || vnode.lazy[env.EMPTY_STRING]\n\n    if (!handler) {\n      return\n    }\n\n    if (lazy) {\n      // 编译模板时能保证不是 true 就是大于 0 数字\n      if (lazy === env.TRUE) {\n        name = event.CHANGE\n      }\n      else {\n        handler = debounce(\n          handler,\n          lazy,\n          immediateTypes[name]\n        )\n      }\n    }\n\n    if (vnode.isComponent) {\n\n      const component = node as Yox\n\n      component.on(name, handler)\n      vnode.data[directive.key] = function () {\n        component.off(name, handler as type.eventListener)\n      }\n\n    }\n    else {\n\n      const el = node as HTMLElement\n\n      api.on(el, name, handler)\n      vnode.data[directive.key] = function () {\n        api.off(el, name, handler as type.eventListener)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\n\nimport * as config from 'yox-config/index'\nimport api from 'yox-dom/index'\n\nimport * as event from '../config/event'\n\nimport Yox from 'yox-type/src/Yox'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\n\nfunction getOptionValue(option: HTMLOptionElement) {\n  return isDef(option.value)\n    ? option.value\n    : option.text\n}\n\ninterface Control {\n\n  set(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  sync(node: HTMLElement | Yox, keypath: string, context: Yox): void\n\n  name: string\n\n}\n\nconst syncWatcherOptions = { sync: env.TRUE },\n\ninputControl: Control = {\n  set(input: HTMLInputElement, keypath: string, context: Yox) {\n    input.value = toString(context.get(keypath))\n  },\n  sync(input: HTMLInputElement, keypath: string, context: Yox) {\n    context.set(keypath, input.value)\n  },\n  name: 'value'\n},\n\nselectControl: Control = {\n  set(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    array.each(\n      array.toArray(select.options),\n      select.multiple\n        ? function (option: HTMLOptionElement) {\n          option.selected = array.has(value, getOptionValue(option), env.FALSE)\n        }\n        : function (option: HTMLOptionElement, index: number) {\n          if (getOptionValue(option) == value) {\n            select.selectedIndex = index\n            return env.FALSE\n          }\n        }\n    )\n  },\n  sync(select: HTMLSelectElement, keypath: string, context: Yox) {\n    const options = array.toArray(select.options)\n    if (select.multiple) {\n      const values = []\n      array.each(\n        options,\n        function (option: HTMLOptionElement) {\n          if (option.selected) {\n            array.push(\n              values,\n              getOptionValue(option)\n            )\n          }\n        }\n      )\n      // 如果新旧值都是 []，set 没有意义\n      if (!array.falsy(values) || !array.falsy(context.get(keypath))) {\n        context.set(keypath, values)\n      }\n    }\n    else {\n      context.set(\n        keypath,\n        getOptionValue(\n          options[select.selectedIndex]\n        )\n      )\n    }\n  },\n  name: 'value'\n},\n\nradioControl: Control = {\n  set(radio: HTMLInputElement, keypath: string, context: Yox) {\n    radio.checked = radio.value === toString(context.get(keypath))\n  },\n  sync(radio: HTMLInputElement, keypath: string, context: Yox) {\n    if (radio.checked) {\n      context.set(keypath, radio.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: Control = {\n  set(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    checkbox.checked = is.array(value)\n      ? array.has(value, checkbox.value, env.FALSE)\n      : (is.boolean(value) ? value : !!value)\n  },\n  sync(checkbox: HTMLInputElement, keypath: string, context: Yox) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (checkbox.checked) {\n        context.append(keypath, checkbox.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, checkbox.value, env.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, checkbox.checked)\n    }\n  },\n  name: 'checked'\n},\n\ncomponentControl: Control = {\n  set(component: Yox, keypath: string, context: Yox) {\n    component.set(\n      component.$model,\n      context.get(keypath)\n    )\n  },\n  sync(component: Yox, keypath: string, context: Yox) {\n    context.set(\n      keypath,\n      component.get(component.$model)\n    )\n  },\n  name: 'value'\n},\n\nspecialControls = {\n  radio: radioControl,\n  checkbox: checkboxControl,\n  select: selectControl,\n},\n\ndirective: DirectiveHooks = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    let { binding } = directive,\n\n    { context, nativeProps } = vnode,\n\n    lazy = vnode.lazy[config.DIRECTIVE_MODEL] || vnode.lazy[env.EMPTY_STRING],\n\n    set = function () {\n      if (!isSyncing) {\n        control.set(component || element, binding as string, context)\n      }\n    },\n\n    sync = function () {\n      isSyncing = env.TRUE\n      control.sync(component || element, binding as string, context)\n      isSyncing = env.FALSE\n    },\n\n    isSyncing = env.FALSE,\n\n    component: Yox,\n\n    element: HTMLElement,\n\n    control: Control,\n\n    type: string\n\n    if (lazy && lazy !== env.TRUE) {\n      sync = debounce(sync, lazy)\n    }\n\n    if (vnode.isComponent) {\n\n      component = node as Yox\n      control = componentControl\n\n      // 监听交互，修改数据\n      component.watch(component.$model, sync)\n\n    }\n    else {\n\n      element = node as HTMLElement\n      control = specialControls[element['type']] || specialControls[api.tag(element) as string]\n\n      // checkbox,radio,select 监听的是 change 事件\n      type = event.CHANGE\n\n      // 如果是输入框，则切换成 input 事件\n      if (!control) {\n        control = inputControl\n        if (lazy !== env.TRUE) {\n          type = event.INPUT\n        }\n      }\n\n      // 如果模板里没写对应的属性，则这里先设值\n      if (!nativeProps || !object.has(nativeProps, control.name)) {\n        set()\n      }\n\n      // 监听交互，修改数据\n      api.on(element, type, sync)\n\n    }\n\n    // 监听数据，修改界面\n    // 这里使用同步监听，这样才能使 isSyncing 生效\n    context.watch(binding as string, set, syncWatcherOptions)\n\n    vnode.data[directive.key] = function () {\n      if (vnode.isComponent) {\n        component.unwatch(component.$model, sync)\n      }\n      else {\n        api.off(element, type, sync)\n      }\n      context.unwatch(binding as string, set)\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport VNode from 'yox-type/src/vnode/VNode'\nimport Directive from 'yox-type/src/vnode/Directive'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport Yox from 'yox-type/src/Yox'\n\nimport api from 'yox-dom/index'\n\nconst directive: DirectiveHooks = {\n\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // binding 可能是模糊匹配\n    // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n    const { binding } = directive\n\n    if (binding) {\n\n      const isFuzzy = keypathUtil.isFuzzy(binding),\n\n      watcher = function (newValue: any, oldValue: any, keypath: string) {\n\n        const name = isFuzzy\n          ? keypathUtil.matchFuzzy(keypath, binding) as string\n          : directive.name\n\n        if (vnode.isComponent) {\n          (node as Yox).set(name, newValue)\n        }\n        else if (isDef(directive.hint)) {\n          api.prop(node as HTMLElement, name, newValue)\n        }\n        else {\n          api.attr(node as HTMLElement, name, newValue)\n        }\n\n      }\n\n      vnode.context.watch(binding, watcher)\n\n      vnode.data[directive.key] = function () {\n        vnode.context.unwatch(binding, watcher)\n      }\n\n    }\n\n  },\n\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    execute(vnode.data[directive.key])\n  }\n\n}\n\nexport default directive\n","import isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\n\nimport Event from 'yox-common/src/util/Event'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as env from 'yox-common/src/util/env'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport * as config from 'yox-config/index'\nimport * as snabbdom from 'yox-snabbdom/index'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateStringify from 'yox-template-compiler/src/stringify'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\nimport VNode from 'yox-type/src/vnode/VNode'\nimport YoxInterface from 'yox-type/src/Yox'\nimport YoxOptions from 'yox-type/src/options/Yox'\nimport YoxPlugin from 'yox-type/src/YoxPlugin'\nimport ComputedOptions from 'yox-type/src/options/Computed'\nimport WatcherOptions from 'yox-type/src/options/Watcher'\nimport DirectiveHooks from 'yox-type/src/hooks/Directive'\nimport TransitionHooks from 'yox-type/src/hooks/Transition'\nimport PropRule from 'yox-type/src/PropRule'\nimport * as signature from 'yox-type/index'\n\nimport Computed from 'yox-observer/src/Computed'\nimport Observer from 'yox-observer/src/Observer'\nimport formatWatcherOptions from 'yox-observer/src/function/formatWatcherOptions'\n\nimport domApi from 'yox-dom/index'\n\nimport event from './directive/event'\nimport model from './directive/model'\nimport binding from './directive/binding'\nimport hasSlot from './filter/hasSlot'\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\nTEMPLATE_COMPUTED = '$' + env.RAW_TEMPLATE,\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: YoxOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $template?: Function\n\n  $refs: Record<string, YoxInterface | HTMLElement>\n\n  $parent?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $el?: HTMLElement\n\n  $model?: string\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, YoxOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Function | Record<string, Function>>\n\n  /**\n   * core 版本\n   */\n  public static version = '1.0.0-alpha'\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is = is\n  public static array = array\n  public static object = object\n  public static string = string\n  public static logger = logger\n  public static Event = Event\n  public static Emitter = Emitter\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(plugin: YoxPlugin) {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function) {\n    NextTask.shared().append(task)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string, stringify?: boolean): Function | string {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (process.env.NODE_ENV !== 'runtime') {\n        if (!templateStringify.hasStringify(template)) {\n          // 未编译，常出现在开发阶段\n          const nodes = templateCompiler.compile(template)\n          if (process.env.NODE_ENV === 'dev') {\n            if (nodes.length !== 1) {\n              logger.fatal(`\"template\" should have just one root element.`)\n            }\n          }\n          template = templateStringify.stringify(nodes[0])\n          if (stringify) {\n            return template\n          }\n        }\n      }\n      return new Function(`return ${template}`)()\n    }\n  }\n\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  public static component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource(globalComponents, name as string)\n        }\n        else if (is.func(component)) {\n          getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          return\n        }\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  public static partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  public static filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  /**\n   * 验证 props，无爱请重写\n   */\n  public static checkPropTypes(props: Record<string, any>, propTypes: Record<string, PropRule>) {\n    let result = object.copy(props)\n    object.each(\n      propTypes,\n      function (rule: PropRule, key: string) {\n\n        // 类型\n        let type = rule.type,\n\n        // 默认值\n        value = rule.value,\n\n        // 是否必传\n        required = rule.required,\n\n        // 实际的值\n        actual = props[key]\n\n        // 动态化获取是否必填\n        if (is.func(required)) {\n          required = (required as Function)(props)\n        }\n\n        // 传了数据\n        if (isDef(actual)) {\n\n          // 如果不写 type 或 type 不是 字符串 或 数组\n          // 就当做此规则无效，和没写一样\n          if (type) {\n            let matched: boolean | void\n            // 比较类型\n            if (!string.falsy(type)) {\n              matched = is.is(actual, type as string)\n            }\n            else if (!array.falsy(type)) {\n              array.each(\n                type as string[],\n                function (t) {\n                  if (is.is(actual, t)) {\n                    matched = env.TRUE\n                    return env.FALSE\n                  }\n                }\n              )\n            }\n            if (matched !== env.TRUE) {\n              logger.warn(`The prop \"${key}\" type is not matched.`)\n            }\n          }\n          else {\n            logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n          }\n\n        }\n        // 没传值但此项是必传项\n        else if (required) {\n          logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n        }\n        // 没传值但是配置了默认值\n        else if (isDef(value)) {\n          result[key] = type === env.RAW_FUNCTION\n            ? value\n            : (is.func(value) ? value(props) : value)\n        }\n      }\n    )\n    return result\n  }\n\n  constructor(options: YoxOptions) {\n\n    const instance = this\n\n    if (!is.object(options)) {\n      options = env.EMPTY_OBJECT\n    }\n\n    // 如果不绑着，其他方法调不到钩子\n    instance.$options = options\n\n    execute(options[ config.HOOK_BEFORE_CREATE ], instance, options)\n\n    let {\n      el,\n      data,\n      props,\n      model,\n      parent,\n      replace,\n      computed,\n      template,\n      transitions,\n      components,\n      directives,\n      partials,\n      filters,\n      slots,\n      events,\n      methods,\n      watchers,\n      extensions,\n    } = options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    if (model) {\n      instance.$model = model\n    }\n\n    // 数据源\n    const source = props\n      ? instance.checkPropTypes(props)\n      : {}\n\n    // 把 slots 放进数据里，方便 get\n    if (slots) {\n      object.extend(source, slots)\n    }\n\n    // 如果传了 props，则 data 应该是个 function\n    if (props && is.object(data)) {\n      logger.warn('\"data\" option expected to be a function.')\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options: signature.computedGetter | ComputedOptions, keypath: string) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (object.has(source, key)) {\n            logger.warn(`\"${key}\" is already defined as a prop. Use prop default value instead.`)\n          }\n          else {\n            source[key] = value\n          }\n        }\n      )\n    }\n\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(env.TRUE)\n\n    let placeholder: Node | void,\n\n    isComment = env.FALSE\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template)) {\n          placeholder = domApi.find(template)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = env.UNDEFINED\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"${template}\" 选择器找不到对应的元素`)\n            }\n          }\n        }\n      }\n      else {\n        template = env.UNDEFINED\n      }\n\n      // 检查 el\n      if (el) {\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'dev') {\n              if (!placeholder) {\n                logger.fatal(`\"${selector}\" 选择器找不到对应的元素`)\n              }\n            }\n          }\n          else {\n            if (process.env.NODE_ENV === 'dev') {\n              logger.fatal(`\"el\" option 格式错误`)\n            }\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n      }\n\n\n      if (placeholder && !replace) {\n        // 如果不是替换占位元素\n        // 则在该元素下新建一个注释节点，等会用新组件替换掉\n        isComment = env.TRUE\n        domApi.append(\n          placeholder as Node,\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        )\n      }\n\n      if (parent) {\n        instance.$parent = parent\n      }\n\n      setFlexibleOptions(instance, env.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, env.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, env.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, env.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, env.RAW_FILTER, filters)\n\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (instance[name]) {\n              logger.fatal(`\"${name}\" method is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    execute(options[ config.HOOK_AFTER_CREATE ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后且经过 stringify 的字符串\n        // 当然，这个需要外部自己控制传入的 template 是什么\n        // Yox.compile 会自动判断 template 是否经过编译\n        instance.$template = Yox.compile(template) as Function\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: env.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        watchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        // 当 virtual dom 变了，则更新视图\n        watchers[TEMPLATE_COMPUTED] = function (vnode: VNode) {\n          instance.update(vnode, instance.$vnode)\n        }\n\n        // 第一次渲染视图\n        if (!placeholder) {\n          isComment = env.TRUE\n          placeholder = domApi.createComment(env.EMPTY_STRING)\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          snabbdom.create(\n            domApi,\n            placeholder,\n            isComment,\n            instance,\n            env.EMPTY_STRING\n          )\n        )\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'dev') {\n          if (placeholder) {\n            logger.fatal('有 el 没 template 是几个意思？')\n          }\n        }\n      }\n    }\n\n    if (events) {\n      instance.on(events)\n    }\n\n    // 确保早于 AFTER_MOUNT 执行\n    if (watchers) {\n      observer.nextTask.prepend(\n        function () {\n          if (instance.$observer) {\n            instance.watch(watchers)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 添加计算属性\n   */\n  addComputed(\n    keypath: string,\n    computed: signature.computedGetter | ComputedOptions\n  ): Computed | void {\n    return this.$observer.addComputed(keypath, computed)\n  }\n\n  /**\n   * 删除计算属性\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n    this.$observer.removeComputed(keypath)\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n    return this.$observer.get(keypath, defaultValue, depIgnore)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Record<string, any>,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件\n   */\n  on(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this })\n    return this\n  }\n\n  /**\n   * 监听一次事件\n   */\n  once(\n    type: string | Record<string, signature.eventListener>,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.on(type, listener, { ctx: this, max: 1 })\n    return this\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(\n    type: string,\n    listener?: signature.eventListener\n  ): YoxInterface {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 触发事件\n   */\n  fire(\n    bullet: string | Event,\n    data?: signature.eventData | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    event = bullet instanceof Event ? bullet : new Event(bullet),\n\n    eventData: signature.eventData | void,\n\n    isComplete: boolean | void\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      eventData = data as Record<string, any>\n    }\n    else if (data === env.TRUE) {\n      downward = env.TRUE\n    }\n\n    isComplete = instance.$emitter.fire(event, eventData)\n    if (isComplete) {\n      if (downward) {\n        if (instance.$children) {\n          array.each(\n            instance.$children,\n            function (child: Yox) {\n              return isComplete = child.fire(event, data, env.TRUE)\n            }\n          )\n        }\n      }\n      else if (instance.$parent) {\n        isComplete = instance.$parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化\n   */\n  watch(\n    keypath: string | Record<string, signature.watcher | WatcherOptions>,\n    watcher?: signature.watcher,\n    options?: WatcherOptions | boolean\n  ): YoxInterface {\n    this.$observer.watch(keypath, watcher, options)\n    return this\n  }\n\n  /**\n   * 监听一次数据变化\n   */\n  watchOnce(\n    keypath: string,\n    watcher: signature.watcher,\n    options?: WatcherOptions\n  ): YoxInterface {\n    const watcherOptions = formatWatcherOptions(options)\n    watcherOptions.once = env.TRUE\n    this.$observer.watch(keypath, watcher, watcherOptions)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化\n   */\n  unwatch(\n    keypath: string,\n    watcher?: signature.watcher\n  ): YoxInterface {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  component(\n    name: string | Record<string, YoxOptions>,\n    component?: YoxOptions | signature.asyncComponent\n  ): YoxOptions | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name)) {\n        // 同步取值\n        if (!component) {\n          return getResource($components, name as string, Yox.component)\n        }\n        else if (is.func(component)) {\n          if (!getComponentAsync($components, name as string, component as signature.asyncComponent)) {\n            getComponentAsync(globalComponents, name as string, component as signature.asyncComponent)\n          }\n          return\n        }\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  partial(\n    name: string | Record<string, string>,\n    partial?: string\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  filter(\n    name: string | Record<string, Function | Record<string, Function>>,\n    filter?: Function | Record<string, Function | Record<string, Function>>\n  ): Function | Record<string, Function> | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $vnode, $observer } = instance\n\n      if ($vnode) {\n\n        const computed: Computed = $observer.computed[TEMPLATE_COMPUTED],\n\n        oldValue = computed.get()\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (oldValue === computed.get()) {\n          instance.update(\n            computed.get(env.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        mergeResource(instance.$filters, globalFilters),\n        mergeResource(instance.$partials, globalPartials),\n        mergeResource(instance.$directives, globalDirectives),\n        mergeResource(instance.$transitions, globalTransitions),\n        instance.$template\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      hook: Function | void\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[ config.HOOK_BEFORE_UPDATE ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        hook = $options[config.HOOK_AFTER_UPDATE]\n      }\n      else {\n        execute($options[ config.HOOK_BEFORE_MOUNT ], instance)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        hook = $options[config.HOOK_AFTER_MOUNT]\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      if (hook) {\n        instance.nextTick(\n          function () {\n            if (instance.$vnode) {\n              execute(hook, instance)\n            }\n          }\n        )\n      }\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkPropTypes(props: Record<string, any>): Record<string, any> {\n    const { propTypes } = this.$options\n    return propTypes\n      ? Yox.checkPropTypes(props, propTypes)\n      : props\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   * @param node DOM 元素\n   */\n  create(options: YoxOptions, vnode?: VNode, node?: Node): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n      options = object.copy(options)\n      options.parent = this\n\n      if (vnode) {\n\n        // 如果传了 node，表示有一个占位元素，新创建的 child 需要把它替换掉\n        if (node) {\n          options.el = node\n          options.replace = env.TRUE\n        }\n\n        let { slots, props, model } = vnode\n\n        if (slots) {\n          options.slots = slots\n        }\n\n        // 把 model 的值设置给 props 的逻辑只能写到这\n        // 不然子组件会报数据找不到的警告\n        if (isDef(model)) {\n          if (!props) {\n            props = {}\n          }\n          const name = options.model || 'value'\n          if (!object.has(props, name)) {\n            props[name] = model\n          }\n          options.model = name\n        }\n\n        options.props = props\n\n      }\n\n      const child = new Yox(options)\n      array.push(\n        this.$children || (this.$children = [ ]),\n        child\n      )\n\n      return child\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $options, $emitter, $observer } = instance\n\n    execute($options[ config.HOOK_BEFORE_DESTROY ], instance)\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const { $vnode, $parent } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $emitter.off()\n    $observer.destroy()\n\n    object.clear(instance)\n\n    execute($options[ config.HOOK_AFTER_DESTROY ], instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: Function, prepend?: boolean): void {\n    const { nextTask } = this.$observer\n    if (prepend) {\n      nextTask.prepend(task)\n    }\n    else {\n      nextTask.append(task)\n    }\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): boolean | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): boolean | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): boolean | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): boolean | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): boolean | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: Yox, key: string, value: Function | Record<string, any>) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction getComponentAsync(data: Record<string, any> | void, name: string, callback: signature.asyncComponent): boolean | void {\n  if (data && object.has(data, name)) {\n    const component = data[name]\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n      let { $queue } = component\n      if (!$queue) {\n        $queue = component.$queue = [callback]\n        component(\n          function (replacement: any) {\n\n            component.$queue = env.UNDEFINED\n\n            data[name] = replacement\n\n            array.each(\n              $queue,\n              function (callback) {\n                callback(replacement)\n              }\n            )\n\n          }\n        )\n      }\n      else {\n        array.push($queue, callback)\n      }\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component)\n    }\n    return env.TRUE\n  }\n}\n\nfunction getResource(data: Record<string, any> | void, name: string, lookup?: Function) {\n  if (data && data[name]) {\n    return data[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(data: Record<string, any>, name: string | Record<string, any>, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    data[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name,\n      function (value, key) {\n        data[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nfunction mergeResource(locals: Record<string, any> | void, globals: Record<string, any>): Record<string, any> {\n  return locals && globals\n    ? object.extend({}, globals, locals)\n    : locals || globals\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  Yox['dom'] = domApi\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({ hasSlot })\n}\n","import * as config from 'yox-config/index'\nimport * as logger from 'yox-common/src/util/logger'\n\nimport isDef from 'yox-common/src/function/isDef'\n\n/**\n * 组件是否存在某个 slot\n *\n * @param name\n */\nexport default function (name: string): boolean {\n  if (process.env.NODE_ENV === 'dev') {\n    logger.warn('hasSlot 过滤器已不建议使用')\n  }\n  return isDef(this.get(config.SLOT_DATA_PREFIX + name))\n}\n"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_COMPONENT","RAW_TRANSITION","RAW_FUNCTION","RAW_STATIC_KEYPATH","RAW_ABSOLUTE_KEYPATH","KEYPATH_PARENT","KEYPATH_CURRENT","win","window","doc","document","EMPTY_FUNCTION","EMPTY_OBJECT","EMPTY_ARRAY","EMPTY_STRING","target","env.UNDEFINED","toString","Object","prototype","is","value","type","numeric","call","toLowerCase","func","env.RAW_FUNCTION","array","Array","isArray","object","env.NULL","string","number","boolean","isNaN","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","isDef","CustomEvent","originalEvent","this","each","callback","reversed","length","let","i","env.FALSE","join","separator","nativePush","item","nativeUnshift","unshift","addItem","action","push","toArray","execute","slice","toObject","key","result","indexOf","strict","index","has","last","pop","remove","splice","env.TRUE","falsy","preventDefault","isPrevented","stopPropagation","isStoped","prevent","stop","camelizePattern","hyphenatePattern","camelizeCache","hyphenateCache","camelize","str","replace","$0","$1","toUpperCase","trim","env.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","charAt","codeAt","charCodeAt","is.string","offset","defaultValue","SEPARATOR","patternCache","match","keypath","prefix","string.startsWith","string.falsy","startIndex","endIndex","string.indexOf","string.slice","formatKeypath","keypath1","keypath2","isFuzzy","string.has","matchFuzzy","pattern","cache","RegExp","keys","is.object","sortKeyByAsc","a","b","sortKeyByDesc","sort","desc","hasOwnProperty","clear","_","extend","original","array.each","objects","copy","deep","valueHolder","get","keypathUtil.each","isLast","hasValue","set","autofill","nativeConsole","console","useSource","test","env.EMPTY_FUNCTION","isDebug","env.win","debug","is.boolean","warn","msg","log","error","Error","Emitter","ns","listeners","parseNamespace","name","createMatchListener","listener","options","matchNamespace","namespace","fire","bullet","data","filter","event","instance","list","isComplete","object.copy","array.has","ctx","num","max","off","matchListener","on","addListener","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","NextTask","nextTasks","append","task","prepend","run","SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","oldNativeAttrs","nativeAttrs","newValue","env.EMPTY_OBJECT","oldValue","object.each","attr","node","removeAttr","oldNativeProps","nativeProps","prop","removeProp","hint","oldDirectives","directives","field.COMPONENT","isKeypathChange","directive","hooks","unbind","bind","isComponent","props","checkPropTypes","slots","ref","refs","$refs","isPatchable","tag","createKeyToIndex","vnodes","insertBefore","parentNode","referenceNode","before","createComponent","child","parent","create","$el","field.LOADING","component.update","directive.update","guid","createData","field.ID","createVnode","isText","createText","text","isComment","createComment","isAsync","component","field.VNODE","enterVnode","env.RAW_COMPONENT","createElement","children","addVnodes","html","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","isStatic","nextTick","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifierInner","lookup","staticKeypath","nodeType.IDENTIFIER","createIdentifier","isProp","env.KEYPATH_CURRENT","env.KEYPATH_PARENT","createLiteral","nodeType.LITERAL","getLiteralNode","nodes","createMemberIfNeeded","literal","identifier","array.push","keypathUtil.join","nodeType.MEMBER","createMemberInner","unary","+","exec","-","~","!","!!","binary","*","prec","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","->","=>","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","skip","pick","scanToken","elements","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","creator.createLiteral","arg","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","creator.createIdentifier","CODE_SLASH","isIdentifierPart","callee","creator.createMemberIfNeeded","nodeType.CALL","object.has","keywordLiterals","CODE_PLUS","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_MINUS","CODE_GREAT","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","scanBinary","token","operatorInfo","lastOperator","lastOperatorInfo","output","interpreter.binary","creator.createBinary","yes","no","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","fatal","message","env.RAW_TRUE","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","env.RAW_SLOT","nodeType.IF","nodeType.EACH","nodeType.PARTIAL","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","expr","nodeType.DIRECTIVE","createProperty","nodeType.PROPERTY","nodeType.TEXT","isLeaf","compileCache","directiveSeparator","blockPattern","tagPattern","attributePattern","componentNamePattern","selfClosingTagPattern","selfClosingTagNames","split","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","slicePrefix","string.trim","nodeList","currentElement","currentAttribute","startQuote","nodeStack","ifStack","isSafeBlock","nextIsBlock","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","nodeType.ELEMENT","popStack","tagName","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","isComplex","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","isSpecialAttr","bindSpecialAttr","element","slot","safe","config.HINT_BOOLEAN","replaceChild","config.HINT_NUMBER","toNumber","env.RAW_STATIC_KEYPATH","binding","config.DIRECTIVE_LAZY","exprCompiler.compile","partial","isStringValueRequired","env.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","attrs","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","stub","addTextChild","creator.createText","htmlParsers","isSvg","creator.createElement","config.DIRECTIVE_MODEL","env.RAW_TRANSITION","creator.createDirective","string.camelize","config.DIRECTIVE_ON","config.DIRECTIVE_EVENT","lazy","config.DIRECTIVE_CUSTOM","custom","creator.createAttribute","lowerName","helper.specialTags","creator.createProperty","config.HINT_STRING","blockParsers","source","config.SYNTAX_EACH","terms","creator.createEach","config.SYNTAX_IMPORT","nodeType.IMPORT","config.SYNTAX_PARTIAL","config.SYNTAX_IF","creator.createIf","config.SYNTAX_ELSE_IF","creator.createElseIf","config.SYNTAX_ELSE","config.SYNTAX_SPREAD","nodeType.SPREAD","creator.createSpread","config.SYNTAX_COMMENT","creator.createExpression","parseHtml","tpl","parse","parseBlock","all","string.charAt","isCondition","helper.name2Type","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","JSON","stringify","isStringRequired","joinStack","collectStack","nodeStringify","RENDER_EXPRESSION","RENDER_EXPRESSION_ARG","RENDER_ELEMENT_VNODE","ARG_CONTEXT","SEP_COMMA","SEP_COLON","SEP_PLUS","STRING_TRUE","STRING_FALSE","STRING_EMPTY","toJSON","CODE_PREFIX","array.join","CODE_SUFFIX","stringifyObject","obj","fields","stringifyArray","arr","stringifyCall","stringifyFunction","stringifyGroup","stringifyExpression","renderName","extra","stringifyExpressionArg","stringifyValue","stringifyChildren","isJoin","map","stringifyConditionChildren","trimArgs","removable","array.unshift","renderElement","childs","elementChilds","elementSlots","elementAttrs","config.SLOT_DATA_PREFIX","addSlot","array.falsy","object.falsy","getComponentSlots","exprNodeType.CALL","method","exprNodeType.LITERAL","getter","isUndef","stringifyIf","nodeExecutor","setPair","render","filters","partials","transitions","template","eventScope","$keypath","$scope","$stack","vnodeStack","localPartials","stack","depIgnore","defaultKeypath","scope","absoluteKeypath","$item","object.get","logger.warn","getValue","renderStack","exprExecutor.execute","addBinding","config.DIRECTIVE_BINDING","createEventListener","Event","createMethodListener","$event","$data","createGetter","renderExpression","stringRequired","renderExpressionArg","renderExpressionVnode","renderTextVnode","vnodeList","lastVnode","renderElementVnode","handler","model","addDirective","env.RAW_ABSOLUTE_KEYPATH","spreadObject","renderSlots","renderSlot","defaultRender","renderPartial","renderImport","renderEach","eachIndex","eachHandler","exprKeypath","eachKeypath","lastKeypath","lastScope","lastKeypathStack","first","len","invoke","syncWatcherOptions","sync","asyncWatcherOptions","Computed","deps","observer","setter","unique","$2","diff","fixed","dep","add","sorted","keypathUtil.match","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","watcher","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","readValue","count","immediate","build","env.EMPTY_ARRAY","force","lastComputed","current","watch","unwatch","Observer","nextTask","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","reversedComputedKeys","matchBest","setValue","targetValue","object.set","pending","diffAsync","filterWatcher","addComputed","object.sort","removeComputed","once","emitter","formatWatcherOptions","toggle","increase","decrease","min","insert","removeAt","array.remove","object.clear","env.doc","innerText","addEventListener","removeEventListener","addClass","removeClass","findElement","body","attachEvent","detachEvent","classList","className","classes","CHAR_WHITESPACE","querySelector","selector","getElementById","namespaces","svg","domain","specialEvents","domApi","createElementNS","createTextNode","createEvent","setAttribute","getAttribute","removeAttribute","appendChild","removeChild","nextSibling","find","nodeType","innerHTML","nativeListeners","special","nativeListener","delay","timer","array.toArray","arguments","locked","immediateTypes","array.toObject","debounce","el","getOptionValue","option","inputControl","input","componentControl","$model","specialControls","radio","checked","checkbox","select","multiple","selected","selectedIndex","control","isSyncing","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","selectorPattern","Yox","$options","extensions","$observer","$emitter","placeholder","$parent","components","methods","$template","watchers","snabbdom.create","events","setFlexibleOptions","getComponentAsync","$queue","replacement","getResource","setResource","formatValue","mergeResource","locals","globals","object.extend","use","plugin","install","templateCompiler.compile","propTypes","rule","matched","required","actual","t","is.is","downward","eventData","$children","watchOnce","watcherOptions","$directives","$transitions","$components","$partials","$filters","forceUpdate","templateRender.render","hook","isRemove","logger"],"mappings":"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"}